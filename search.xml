<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>打造学术外挂大脑（三）：Query语法打造智能文献检索系统</title>
      <link href="2025/04/05/%E6%89%93%E9%80%A0%E5%AD%A6%E6%9C%AF%E5%A4%96%E6%8C%82%E5%A4%A7%E8%84%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AQuery%E8%AF%AD%E6%B3%95%E6%89%93%E9%80%A0%E6%99%BA%E8%83%BD%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>2025/04/05/%E6%89%93%E9%80%A0%E5%AD%A6%E6%9C%AF%E5%A4%96%E6%8C%82%E5%A4%A7%E8%84%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AQuery%E8%AF%AD%E6%B3%95%E6%89%93%E9%80%A0%E6%99%BA%E8%83%BD%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://youpai.yeureka.cn/picgo/202504052302915.jpeg"></p><p>通过前两期教程，我们已经打通了Zotero文献管理与Logseq知识图谱的联动通道（点击查看往期<a href="https://blog.csdn.net/dyw39/article/details/146990310?spm=1011.2124.3001.6209">教程1</a>、<a href="https://blog.csdn.net/dyw39/article/details/147003840?spm=1011.2124.3001.6209">教程2</a>）。本文将为您解锁Logseq的Query检索功能，助您实现文献数据的精准定位与智能聚合。</p><h2 id="Query语法核心操作指南"><a href="#Query语法核心操作指南" class="headerlink" title="Query语法核心操作指南"></a>Query语法核心操作指南</h2><p>在Zotero中建立文献标签体系后（示例标签系统如图）同步至Logseq，可通过以下逻辑运算符构建检索表达式：<br><img src="https://youpai.yeureka.cn/picgo/202504052151023.png_/fw/350"></p><h3 id="逻辑与（AND）检索"><a href="#逻辑与（AND）检索" class="headerlink" title="逻辑与（AND）检索"></a>逻辑与（AND）检索</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;query (<span class="name"><span class="builtin-name">and</span></span> [[A方面结论]] [[属于<span class="number">1</span>]] )&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：查找同时包含”核心结论”与”分类属性”的文献<br><strong>检索效果</strong>：精准定位同时满足两个条件的文献条目<br><img src="https://youpai.yeureka.cn/picgo/202504052155182.png" alt="AND检索结果"></p><h3 id="逻辑或（OR）检索"><a href="#逻辑或（OR）检索" class="headerlink" title="逻辑或（OR）检索"></a>逻辑或（OR）检索</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;query (<span class="name"><span class="builtin-name">or</span></span> [[属于<span class="number">1</span>]] [[属于<span class="number">2</span>]])&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：跨分类文献普查/建立关联研究网络<br><strong>检索效果</strong>：获取满足任一条件的文献集合<br><img src="https://youpai.yeureka.cn/picgo/202504052157877.png" alt="OR检索结果"></p><h3 id="逻辑非（NOT）嵌套检索"><a href="#逻辑非（NOT）嵌套检索" class="headerlink" title="逻辑非（NOT）嵌套检索"></a>逻辑非（NOT）嵌套检索</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;query (<span class="name"><span class="builtin-name">and</span></span> [[属于<span class="number">1</span>]] (<span class="name"><span class="builtin-name">not</span></span> [[A方面结论]])) &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：排除特定条件的精准筛查<br><strong>检索效果</strong>：获取目标分类中排除特定研究方向的文献<br><img src="https://youpai.yeureka.cn/picgo/202504052158627.png" alt="NOT嵌套检索"></p><blockquote><p>提示：所有检索操作均支持全局知识库查询，可实现跨文献的智能关联</p></blockquote><h2 id="科研工作流优化技巧"><a href="#科研工作流优化技巧" class="headerlink" title="科研工作流优化技巧"></a>科研工作流优化技巧</h2><h3 id="双模式标签系统"><a href="#双模式标签系统" class="headerlink" title="双模式标签系统"></a>双模式标签系统</h3><ul><li><code>[[双链标签]]</code> 与 <code>#标签</code> 完全等效（示例对比如下图），有的同学可能更习惯使用 <code>#标签</code>。<br><img src="https://youpai.yeureka.cn/picgo/202504052208557.png_/fw/250"><br><img src="https://youpai.yeureka.cn/picgo/202504052209559.png"></li></ul><h3 id="动态标签管理"><a href="#动态标签管理" class="headerlink" title="动态标签管理"></a>动态标签管理</h3><p>不必纠结标签的绝对一致。有的同学可能在不同时期对同一内容的标签略有不同，担心对搜索造成影响。Logseq支持对标签进行重命名，只要进入标签页面修改标签题目即可联动修改所有标签。<br><img src="https://youpai.yeureka.cn/picgo/202504052221455.png"><br><img src="https://youpai.yeureka.cn/picgo/202504052221501.png"><br>可以看到所有用到 <code>[[属于1]]</code> 的地方都修改成了 <code>[[属于8]]</code>。</p><h3 id="多维标注体系构建"><a href="#多维标注体系构建" class="headerlink" title="多维标注体系构建"></a>多维标注体系构建</h3><p>推荐标注维度：</p><ul><li>研究属性：<code>[[理论框架]]</code>、<code>[[实证研究]]</code> 等</li><li>方法论：<code>[[定性分析]]</code>、<code>[[量化模型]]</code> 等</li><li>学科领域：<code>[[经济学]]</code>、<code>[[社会学]]</code> 等</li><li>重要程度：<code>[[核心文献]]</code>、<code>[[参考文献]]</code> 等</li></ul><h3 id="跨场景应用扩展"><a href="#跨场景应用扩展" class="headerlink" title="跨场景应用扩展"></a>跨场景应用扩展</h3><ul><li><strong>学术写作</strong>：通过组合查询快速定位支撑论据 </li><li><strong>教学备课</strong>：<code>&#123;&#123;query (and [[经典理论]] [[教学案例]])&#125;&#125;</code> </li><li><strong>考试复习</strong>：<code>&#123;&#123;query (and [[重点考点]] (not [[已掌握]]))&#125;&#125;</code> </li></ul><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ul><li>建立标签命名规范文档</li><li>配合 <code>Zotero Better Notes</code> 模板功能实现自动化标注</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.logseq.com/#/page/queries">Logseq Queries 用法官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zotero </tag>
            
            <tag> Logseq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造学术外挂大脑：Zotero+Logseq文献笔记模版进阶指南</title>
      <link href="2025/04/04/%E6%89%93%E9%80%A0%E5%AD%A6%E6%9C%AF%E5%A4%96%E6%8C%82%E5%A4%A7%E8%84%91%EF%BC%9AZotero+Logseq%E6%96%87%E7%8C%AE%E7%AC%94%E8%AE%B0%E6%A8%A1%E7%89%88%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"/>
      <url>2025/04/04/%E6%89%93%E9%80%A0%E5%AD%A6%E6%9C%AF%E5%A4%96%E6%8C%82%E5%A4%A7%E8%84%91%EF%BC%9AZotero+Logseq%E6%96%87%E7%8C%AE%E7%AC%94%E8%AE%B0%E6%A8%A1%E7%89%88%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://youpai.yeureka.cn/picgo/202504042228945.jpeg"></p><p>上一篇文章介绍了如何设置Zotero与Logseq的笔记联动，本篇为大家提供文献笔记模版进阶指南。</p><h2 id="模版功能亮点✨"><a href="#模版功能亮点✨" class="headerlink" title="模版功能亮点✨"></a>模版功能亮点✨</h2><p>这个智能笔记模版可自动捕获以下核心文献信息：</p><ul><li>📚 双语标题：智能识别中英文题目对照</li><li>👥 作者列表：自动截断超长作者团队（保留前10位+et al.）</li><li>🏷️ 期刊信息：包含影响因子分区、出版日期双维度</li><li>🔗 智能链接：自适应生成PDF本地链接与DOI/URL切换</li><li>🌐 双语摘要：优先展示翻译版本摘要，无翻译版本自动回退原文摘要</li><li>📅 时间戳记：自动生成标准化的笔记创建时间<h2 id="配置步骤详解⚙️"><a href="#配置步骤详解⚙️" class="headerlink" title="配置步骤详解⚙️"></a>配置步骤详解⚙️</h2><h3 id="前置插件安装"><a href="#前置插件安装" class="headerlink" title="前置插件安装"></a>前置插件安装</h3></li></ul><ol><li><strong>Ethereal Style</strong>（期刊分区展示）<ul><li>基础安装过程省略</li><li>绑定EasyScholar账号获取期刊分区数据（<a href="https://zotero-chinese.com/user-guide/plugins/style#%E6%9C%9F%E5%88%8A%E6%A0%87%E7%AD%BE">设置方法</a>）</li></ul></li><li><strong>Translate for Zotero</strong>（摘要翻译）<ul><li>推荐使用DeepSeek（需自行申请密钥，可参照网络上的教程）</li><li>支持中英/中日等多语种互译<h3 id="模版代码定制"><a href="#模版代码定制" class="headerlink" title="模版代码定制"></a>模版代码定制</h3></li></ul></li></ol><p><strong>路径</strong>：Zotero 设置 → Better Notes → 模板编辑器 → 将上一篇文章我们创建的 <code>MD笔记</code> 模板替换为以下内容（可自定义，具体设置方法参见<a href="https://blog.yeureka.cn/index.php/2025/04/03/%e6%89%93%e9%80%a0%e5%ad%a6%e6%9c%af%e5%a4%96%e6%8c%82%e5%a4%a7%e8%84%91%ef%bc%9azoterologseq%e8%81%94%e5%8a%a8%e6%9e%84%e5%bb%ba%e8%ae%ba%e6%96%87%e5%ba%93/">上篇博客</a>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 标题智能处理模块 --&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;$&#123;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> title = topItem.getField(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> titleTranslation = topItem.getField(<span class="string">&quot;titleTranslation&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> titleTranslation </span><br><span class="line">    ? <span class="string">`文献笔记：<span class="subst">$&#123;title&#125;</span> (<span class="subst">$&#123;titleTranslation&#125;</span>)`</span></span><br><span class="line">    : <span class="string">`文献笔记：<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">&#125;)()&#125;&lt;<span class="regexp">/b&gt;&lt;/</span>p&gt;</span><br><span class="line">&lt;!-- 作者列表优化模块 --&gt;</span><br><span class="line">&lt;p&gt;作者: $&#123;topItem.getCreators()</span><br><span class="line">  .slice(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;v.firstName&#125;</span> <span class="subst">$&#123;v.lastName&#125;</span>`</span>)</span><br><span class="line">  .join(<span class="string">&quot;; &quot;</span>) + (topItem.getCreators().length &gt; <span class="number">10</span> ? <span class="string">&quot;; et al.&quot;</span> : <span class="string">&quot;;&quot;</span>)&#125;&lt;/p&gt;</span><br><span class="line">&lt;!-- 期刊信息渲染模块 --&gt;</span><br><span class="line">&lt;p&gt;期刊: $&#123;topItem.getField(<span class="string">&#x27;publicationTitle&#x27;</span>)&#125; </span><br><span class="line">（发表日期: [[$&#123;topItem.getField(<span class="string">&quot;date&quot;</span>).split(<span class="string">&#x27;T&#x27;</span>)[<span class="number">0</span>]&#125;]]）&lt;/p&gt;</span><br><span class="line">&lt;!-- 分区样式优化（兼容EasyScholar） --&gt;</span><br><span class="line">&lt;p&gt;期刊分区: $&#123;<span class="built_in">Array</span>.from(</span><br><span class="line">  Zotero.ZoteroStyle.api.renderCell(topItem, <span class="string">&quot;publicationTags&quot;</span>).childNodes</span><br><span class="line">).map(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  e.innerText = <span class="string">` <span class="subst">$&#123;e.innerText&#125;</span> `</span>;</span><br><span class="line">  <span class="keyword">return</span> e.outerHTML;</span><br><span class="line">&#125;).join(<span class="string">&#x27; &#x27;</span>)&#125;&lt;/p&gt;</span><br><span class="line">&lt;!-- 智能链接匹配系统 --&gt;</span><br><span class="line">&lt;p&gt;$&#123;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> attachments = Zotero.Items.get(topItem.getAttachments());</span><br><span class="line">  <span class="keyword">const</span> [pdf] = attachments.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.isPDFAttachment());</span><br><span class="line">  <span class="keyword">const</span> target = pdf || attachments[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> target </span><br><span class="line">    ? <span class="string">`本地链接: &lt;a href=&quot;zotero://open-pdf/0_<span class="subst">$&#123;target.key&#125;</span>&quot;&gt;<span class="subst">$&#123;target.getFilename()&#125;</span>&lt;/a&gt;`</span></span><br><span class="line">    : <span class="string">`本地链接: `</span>;</span><br><span class="line">&#125;)()&#125;&lt;/p&gt;</span><br><span class="line">&lt;!-- DOI/URL自适应模块 --&gt;</span><br><span class="line">&lt;p&gt;$&#123;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> doi = topItem.getField(<span class="string">&quot;DOI&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> doi</span><br><span class="line">    ? <span class="string">`DOI: &lt;a href=&quot;https://doi/<span class="subst">$&#123;doi&#125;</span>&quot;&gt;<span class="subst">$&#123;doi&#125;</span>&lt;/a&gt;`</span></span><br><span class="line">    : <span class="string">`URL: &lt;a href=&quot;<span class="subst">$&#123;topItem.getField(<span class="string">&#x27;url&#x27;</span>)&#125;</span>&quot;&gt;<span class="subst">$&#123;topItem.getField(<span class="string">&#x27;url&#x27;</span>)&#125;</span>&lt;/a&gt;`</span>;</span><br><span class="line">&#125;)()&#125;&lt;/p&gt;</span><br><span class="line">&lt;!-- 摘要智能呈现逻辑 --&gt;</span><br><span class="line">&lt;p&gt;$&#123;topItem.getField(<span class="string">&#x27;abstractTranslation&#x27;</span>) </span><br><span class="line">  ? <span class="string">`摘要翻译: <span class="subst">$&#123;topItem.getField(<span class="string">&#x27;abstractTranslation&#x27;</span>)&#125;</span>`</span></span><br><span class="line">  : <span class="string">`摘要: <span class="subst">$&#123;topItem.getField(<span class="string">&#x27;abstractNote&#x27;</span>)&#125;</span>`</span>&#125;&lt;/p&gt;</span><br><span class="line">&lt;!-- 动态时间戳生成器 --&gt;</span><br><span class="line">&lt;p&gt;笔记日期: $&#123;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pad = <span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">String</span>(n).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`[[<span class="subst">$&#123;d.getFullYear()&#125;</span>-<span class="subst">$&#123;pad(d.getMonth()+<span class="number">1</span>)&#125;</span>-<span class="subst">$&#123;pad(d.getDate())&#125;</span>]] `</span> +</span><br><span class="line">         <span class="string">`<span class="subst">$&#123;pad(d.getHours())&#125;</span>:<span class="subst">$&#123;pad(d.getMinutes())&#125;</span>:<span class="subst">$&#123;pad(d.getSeconds())&#125;</span>`</span>;</span><br><span class="line">&#125;)()&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>📜 研究核心：⚙️ 内容💡 创新点🧩 不足<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>🔁 研究内容：💧 数据👩🏻‍💻 方法🔬 结果📜 结论<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>🤔 个人总结：🙋‍♀️ 重点记录📌 待解决💭 思考启发<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>该模版生成的笔记如下图，如需要增加其他信息亦可自行添加。<br><img src="https://youpai.yeureka.cn/picgo/202504042204402.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zotero </tag>
            
            <tag> Logseq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造学术外挂大脑：Zotero+Logseq联动构建论文库</title>
      <link href="2025/04/03/%E6%89%93%E9%80%A0%E5%AD%A6%E6%9C%AF%E5%A4%96%E6%8C%82%E5%A4%A7%E8%84%91%EF%BC%9AZotero+Logseq%E8%81%94%E5%8A%A8%E6%9E%84%E5%BB%BA%E8%AE%BA%E6%96%87%E5%BA%93/"/>
      <url>2025/04/03/%E6%89%93%E9%80%A0%E5%AD%A6%E6%9C%AF%E5%A4%96%E6%8C%82%E5%A4%A7%E8%84%91%EF%BC%9AZotero+Logseq%E8%81%94%E5%8A%A8%E6%9E%84%E5%BB%BA%E8%AE%BA%E6%96%87%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://youpai.yeureka.cn/picgo/202504032015748.jpeg"></p><p>“你是否经历过这样的场景：</p><p>电脑里塞满了从各个数据库下载的 PDF 文献，文件夹命名混乱到连自己都找不到；读论文时灵感迸发写下的笔记，却散落在 Zotero 注释、Word 文档和纸质笔记本之间；写论文需要引用某个关键结论时，不得不花半小时翻查’可能存放在某个地方’的笔记。</p><p>在科研领域，我们缺的从来不是知识获取渠道，而是让碎片化信息真正流动起来的系统。直到我发现 Zotero 与 Logseq 的联动组合——前者像严谨的图书馆管理员，后者则化身思维导图师，共同构建起一个自生长的学术知识库。</p><p>尽管 Logseq 内置支持 Zotero 文献关联，但存在两个关键瓶颈：<br><strong>笔记同步割裂</strong>：Zotero 中的笔记修改后无法自动同步到 Logseq，需反复手动导入。<br><strong>格式兼容障碍</strong>：导出的笔记以纯文本块形式存在，无法继承 Markdown 语法特性，导致双向链接失效</p><p>本文方案通过 Zotero <strong>Better Notes 插件</strong> 能够实现：<br>✅ 保留 Markdown 原生语法（标签、双向链接）<br>✅ 建立 Zotero→Logseq 的单向自动同步通道<br>✅ 兼容 Logseq 日期日志关联机制</p><h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><ul><li>Zotero</li><li>Logseq</li><li>Better Notes for Zotero 插件</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ol><li><strong>标准化笔记生成</strong>：通过 Better Notes 插件在 Zotero 内创建结构化 Markdown 笔记</li><li><strong>定向导出机制</strong>：将笔记文件输出至 Logseq 的<code>/pages</code>目录实现关联</li><li><strong>语法适配转换</strong>：自定义正则表达式处理 Markdown 语法兼容性问题</li></ol><h2 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h2><h3 id="插件安装与基础配置"><a href="#插件安装与基础配置" class="headerlink" title="插件安装与基础配置"></a>插件安装与基础配置</h3><p>在 Zotero 中完成 Better Notes 插件安装（略过基础安装步骤）</p><h3 id="创建-Markdown-笔记模板"><a href="#创建-Markdown-笔记模板" class="headerlink" title="创建 Markdown 笔记模板"></a>创建 Markdown 笔记模板</h3><p><strong>路径</strong>：Zotero 设置 → Better Notes → 模板编辑器 → 新建 → 点击新生成的 New Template<br><img src="https://youpai.yeureka.cn/picgo/202504031118911.png_/fw/350"></p><p><strong>设置参数</strong>：</p><ul><li>模板类型：<code>条目</code></li><li>模板名称：<code>MD笔记</code>（可自定义）</li><li><strong>模板代码</strong>（以下直接复制）：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;b&gt;$&#123;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> title = topItem.getField(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> titleTranslation = topItem.getField(<span class="string">&quot;titleTranslation&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (titleTranslation) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`文献笔记：<span class="subst">$&#123;title&#125;</span> (<span class="subst">$&#123;titleTranslation&#125;</span>)`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`文献笔记：<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)()&#125;&lt;<span class="regexp">/b&gt;&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;笔记日期: $&#123;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> year = date.getFullYear();</span><br><span class="line">    <span class="keyword">const</span> month = <span class="built_in">String</span>(date.getMonth() + <span class="number">1</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> day = <span class="built_in">String</span>(date.getDate()).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> hours = <span class="built_in">String</span>(date.getHours()).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> minutes = <span class="built_in">String</span>(date.getMinutes()).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> seconds = <span class="built_in">String</span>(date.getSeconds()).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> formattedDate = <span class="string">`[[<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span>]] <span class="subst">$&#123;hours&#125;</span>:<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> formattedDate;</span><br><span class="line">&#125;)()&#125;&lt;<span class="regexp">/b&gt;&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>📜 研究核心：⚙️ 内容💡 创新点🧩 不足<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>🔁 研究内容：💧 数据👩🏻‍💻 方法🔬 结果📜 结论<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>🤔 个人总结：🙋‍♀️ 重点记录📌 待解决💭 思考启发<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>配置效果预览</strong>：<br><img src="https://youpai.yeureka.cn/picgo/202504031324805.png"><br><em>模板包含标题翻译字段、自动化时间戳、结构化笔记区块</em></p><h3 id="生成关联笔记"><a href="#生成关联笔记" class="headerlink" title="生成关联笔记"></a>生成关联笔记</h3><p>在目标文献条目下：</p><ol><li>进入「笔记」标签页</li><li>点击<code>+</code> →「从模板新建子条目笔记」</li><li>选择<code>MD笔记</code>模板<br><img src="https://youpai.yeureka.cn/picgo/202504031124394.png_/fw/350"><br><img src="https://youpai.yeureka.cn/picgo/202504032101965.png_/fw/350"></li></ol><h3 id="导出至-Logseq-系统"><a href="#导出至-Logseq-系统" class="headerlink" title="导出至 Logseq 系统"></a>导出至 Logseq 系统</h3><h4 id="前置条件设置"><a href="#前置条件设置" class="headerlink" title="前置条件设置"></a>前置条件设置</h4><p><strong>Logseq 端</strong>：</p><ul><li>将首选日期页面格式设置为<code>yyyy-MM-dd</code>，这样是为了配合笔记模板的 <code>formattedDate</code> 字段，在导入时将文献关联到当天的日志。<br><img src="https://youpai.yeureka.cn/picgo/202504031322815.png"></li></ul><p><strong>Better Notes 端</strong>：</p><ul><li>在 <code>Better Notes</code> 模版编辑器中用以下代码替换内置模板 <code>Export MD File Content(导出MD正文)</code> 的内容并保存。这一步是处理 Logseq 和 <code>Better Notes</code> 之间不兼容的部分，主要是为了 Logseq 正确识别在 <code>Better Notes</code> 中用中括号 <code>[[]]</code> 建立的标签。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&#123;</span><br><span class="line"><span class="comment">// let content = mdContent.replaceAll(&quot;\n\n&lt;!----&gt;\n\n&quot;, &quot;\n&quot;);</span></span><br><span class="line"><span class="comment">// 将pre标签产生的&lt;!----&gt;替换为 -，并换行</span></span><br><span class="line"><span class="keyword">let</span> content = mdContent.replaceAll(<span class="string">&quot;\n\n&lt;!----&gt;\n\n&quot;</span>, <span class="string">&quot;\n- &quot;</span>);</span><br><span class="line"><span class="comment">// 开头加 -（废弃）</span></span><br><span class="line"><span class="comment">// content = content.replaceAll(/^/gm, &#x27;- &#x27;);</span></span><br><span class="line"><span class="comment">// 替换 /[ 为[</span></span><br><span class="line">content = content.replaceAll(<span class="string">&quot;\\\[&quot;</span>, <span class="string">&quot;[&quot;</span>)</span><br><span class="line"><span class="comment">// 替换 * 为 -</span></span><br><span class="line">content = content.replace(<span class="regexp">/^(\s*)\*(?!\*)/gm</span>, <span class="string">&quot;$1-&quot;</span>);</span><br><span class="line"><span class="comment">// 替换 ** 为 - **</span></span><br><span class="line">content = content.replace(<span class="regexp">/^(\s*)\*\*/gm</span>, <span class="string">&#x27;$1- **&#x27;</span>);</span><br><span class="line"><span class="comment">// 非空，开头非空和开头非 - ，添加 -</span></span><br><span class="line">content = content.replace(<span class="regexp">/^(?!\s*$)(?!\s*-)/gm</span>, <span class="string">&#x27;- &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> content</span><br><span class="line">&#125;&#125;$</span><br></pre></td></tr></table></figure><h4 id="执行导出操作"><a href="#执行导出操作" class="headerlink" title="执行导出操作"></a>执行导出操作</h4></li></ul><ol><li>选中目标笔记 → 点击「导出笔记」<br><img src="https://youpai.yeureka.cn/picgo/202504031325196.png_/fw/350"></li><li>选择同步模式 → 指定 Logseq 的 <code>/pages</code> 目录<br><img src="https://youpai.yeureka.cn/picgo/202504031327805.png_/fw/350"></li></ol><h4 id="效果验证"><a href="#效果验证" class="headerlink" title="效果验证"></a>效果验证</h4><p>导出成功后：</p><ul><li>Logseq 日志页面自动关联文献笔记<br><img src="https://youpai.yeureka.cn/picgo/202504031330540.png"></li><li>在 <code>Better Notes</code> 中建立的 <code>测试标签</code> 能够正确完成双向链接解析<br><img src="https://youpai.yeureka.cn/picgo/202504031630551.png"><br>至此，可完成基于双向链接的文献知识库打造。同时可配合 <code>Translate for Zotero</code>、<code>Ethereal Style</code> 等插件自动插入更丰富的文献元数据。</li></ul><h2 id="方案限制"><a href="#方案限制" class="headerlink" title="方案限制"></a>方案限制</h2><p>由于 <code>Better Notes</code> 导出同步笔记时，会默认添加 YAML 头元数据，而 Logseq 无法正确识别和保存标准格式的 YAML 头，一旦在 Logseq 中修改了导出的笔记，同步以后 Zotero 中笔记的题目就会消失。因此虽然 <code>Better Notes</code> 支持双向同步，但实际上有以下两个局限：<br>⚠️ <strong>单向同步约束</strong>：仅支持 Zotero→Logseq 单向同步<br>⚠️ <strong>编辑锁定</strong>：笔记修改需在 Zotero 端完成，Logseq 端编辑会导致元数据丢失<br>如有大神能解决双向同步问题，欢迎在评论区讨论。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>经过研究解决了题目消失问题。在修改 Markdown 文件格式时，第一行不添加 <code>-</code>，保留其原始格式 Zotero 即可正确识别题目，这样就解决了 <code>双向同步</code> 问题，可以在 Zotero 或 Logseq 中随意修改笔记了。同时美化了一下导出格式，更新后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&#123;</span><br><span class="line"><span class="keyword">let</span> content = mdContent;</span><br><span class="line"><span class="keyword">const</span> lines = content.split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (lines.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> firstLine = lines[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> remainingContent = lines.slice(<span class="number">1</span>).join(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">remainingContent = remainingContent</span><br><span class="line"><span class="comment">// 处理&lt;!----&gt;标签（保留缩进结构）</span></span><br><span class="line">.replaceAll(<span class="regexp">/(\n\n)&lt;!----&gt;(\n\n)/g</span>, <span class="string">&quot;$1- $2&quot;</span>)</span><br><span class="line"><span class="comment">// 压缩连续空行</span></span><br><span class="line">.replace(<span class="regexp">/\n&#123;2,&#125;/g</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">// 转义方括号</span></span><br><span class="line">.replaceAll(<span class="string">&quot;\\[&quot;</span>, <span class="string">&quot;[&quot;</span>)</span><br><span class="line"><span class="comment">// 替换*为-（缩进减半）</span></span><br><span class="line">.replace(<span class="regexp">/^(\s*)\*(?!\*)/gm</span>, <span class="function">(<span class="params">_, p1</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p1.replace(<span class="regexp">/  /g</span>, <span class="string">&#x27; &#x27;</span>) + <span class="string">&#x27;- &#x27;</span>; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 替换**为- **（缩进减半）</span></span><br><span class="line">.replace(<span class="regexp">/^(\s*)\*\*/gm</span>, <span class="function">(<span class="params">_, p1</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p1.replace(<span class="regexp">/  /g</span>, <span class="string">&#x27; &#x27;</span>) + <span class="string">&#x27;- **&#x27;</span>; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 添加前缀（缩进减半）</span></span><br><span class="line">.replace(<span class="regexp">/^(\s*)(?!-)(\S)/gm</span>, <span class="function">(<span class="params">_, p1, p2</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p1.replace(<span class="regexp">/  /g</span>, <span class="string">&#x27; &#x27;</span>) + <span class="string">&#x27;- &#x27;</span> + p2; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 强制-后单空格</span></span><br><span class="line">.replace(<span class="regexp">/(-\s)\s+/g</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">content = [firstLine, remainingContent]</span><br><span class="line">.filter(<span class="function"><span class="params">line</span> =&gt;</span> line.trim() !== <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">.join(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125;&#125;$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zotero </tag>
            
            <tag> Logseq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨语言协作指南：如何通过rpy2无缝转换R变量至Python字典</title>
      <link href="2025/04/01/%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%8D%8F%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%9A%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87rpy2%E6%97%A0%E7%BC%9D%E8%BD%AC%E6%8D%A2R%E5%8F%98%E9%87%8F%E8%87%B3Python%E5%AD%97%E5%85%B8/"/>
      <url>2025/04/01/%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%8D%8F%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%9A%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87rpy2%E6%97%A0%E7%BC%9D%E8%BD%AC%E6%8D%A2R%E5%8F%98%E9%87%8F%E8%87%B3Python%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://youpai.yeureka.cn/picgo/202504011310943.jpeg"></p><h2 id="背景需求"><a href="#背景需求" class="headerlink" title="背景需求"></a>背景需求</h2><p>在数据科学实践中，我们经常需要整合不同语言的优势资源。本文将聚焦一个典型场景：将R语言的计算成果迁移至Python环境进行后续处理或可视化。通过rpy2工具包，我们可以实现变量结构的完整保留与高效转换。</p><h2 id="技术选型：rpy2核心优势"><a href="#技术选型：rpy2核心优势" class="headerlink" title="技术选型：rpy2核心优势"></a>技术选型：rpy2核心优势</h2><h3 id="工具定位"><a href="#工具定位" class="headerlink" title="工具定位"></a>工具定位</h3><p>rpy2是Python与R语言之间的双向桥梁，支持在Python环境中直接调用R函数库。其独特价值在于：</p><ul><li><strong>生态融合</strong>：集成CRAN超过18,000个R包</li><li><strong>性能优化</strong>：采用内存共享机制减少数据拷贝开销</li><li><strong>开发效率</strong>：支持Jupyter Notebook实时交互<h3 id="核心功能矩阵"><a href="#核心功能矩阵" class="headerlink" title="核心功能矩阵"></a>核心功能矩阵</h3><table><thead><tr><th>功能维度</th><th>具体实现</th></tr></thead><tbody><tr><td>代码互操作</td><td>支持在Python中执行R代码块，调用ggplot2、dplyr等经典库</td></tr><tr><td>数据转换</td><td>自动处理numpy数组与R矩阵、pandas.DataFrame与data.frame的类型转换</td></tr><tr><td>可视化整合</td><td>在Jupyter中直接渲染R图形输出（支持ggplot2、lattice等可视化库）</td></tr><tr><td>扩展能力</td><td>提供C扩展接口，支持并行计算加速</td></tr></tbody></table><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前置条件：已配置R语言环境（建议4.0+版本）</span></span><br><span class="line"><span class="comment"># 验证R_HOME环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$R_HOME</span></span><br><span class="line"><span class="comment"># 安装核心组件</span></span><br><span class="line">pip install rpy2 pandas</span><br></pre></td></tr></table></figure><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="数据持久化（R端）"><a href="#数据持久化（R端）" class="headerlink" title="数据持久化（R端）"></a>数据持久化（R端）</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存目标变量到二进制文件</span></span><br><span class="line">save(r_var, file=<span class="string">&quot;r_var.RData&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="数据加载与转换（Python端）"><a href="#数据加载与转换（Python端）" class="headerlink" title="数据加载与转换（Python端）"></a>数据加载与转换（Python端）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_r2py</span>(<span class="params">obj_name, sub_obj_name=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    递归解析R对象结构，实现自动化类型转换</span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        obj_name (str): 目标R变量名称</span></span><br><span class="line"><span class="string">        sub_obj_name (str): 嵌套子对象名称（用于处理list结构）</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Python原生类型或pandas对象（保留完整元数据）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> sub_obj_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _r_obj_name = <span class="string">f&quot;<span class="subst">&#123;obj_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        _r_obj_name = <span class="string">f&quot;<span class="subst">&#123;obj_name&#125;</span>$<span class="subst">&#123;sub_obj_name&#125;</span>&quot;</span></span><br><span class="line">    _r_obj = robjects.r(_r_obj_name)</span><br><span class="line">    <span class="comment"># 如果传入的是R列表，则遍历列表中的每一个子变量，返回子变量字典</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(_r_obj, ListVector):</span><br><span class="line">        <span class="keyword">return</span> &#123;_sub_obj_name: convert_r2py(_r_obj_name, _sub_obj_name) <span class="keyword">for</span> _sub_obj_name <span class="keyword">in</span> _r_obj.names&#125;</span><br><span class="line">    <span class="comment"># 如果传入的不是R列表，则解析此变量，并返回R对象对应的Python对象。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(_r_obj, np.ndarray):  <span class="comment"># 如果值时array，则有一维和二维两种情况，两种情况获取行列变量名的方法不同</span></span><br><span class="line">        _r_obj_shape = _r_obj.shape</span><br><span class="line">        array_dim = <span class="built_in">len</span>(_r_obj_shape)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        array_dim = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 根据变量的维度匹配获取行列变量名的方法</span></span><br><span class="line">    <span class="keyword">if</span> array_dim == <span class="number">2</span>:</span><br><span class="line">        _row_names = robjects.r(<span class="string">f&#x27;rownames(<span class="subst">&#123;_r_obj_name&#125;</span>)&#x27;</span>)</span><br><span class="line">        _col_names = robjects.r(<span class="string">f&#x27;colnames(<span class="subst">&#123;_r_obj_name&#125;</span>)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> pd.DataFrame(_r_obj, index=_row_names, columns=_col_names)</span><br><span class="line">    <span class="keyword">elif</span> array_dim == <span class="number">1</span>:</span><br><span class="line">        _names = robjects.r(<span class="string">f&#x27;names(<span class="subst">&#123;_r_obj_name&#125;</span>)&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(_names, NULLType):</span><br><span class="line">            <span class="keyword">return</span> _r_obj</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> pd.Series(_r_obj, index=_names, name=obj_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_rdata</span>(<span class="params">file_path, obj_name=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    封装R数据文件加载过程</span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        file_path (str): .RData文件路径</span></span><br><span class="line"><span class="string">        obj_name (str): 指定加载的变量名（可选）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 加载 .RData 文件</span></span><br><span class="line">    r_data_file_array = robjects.r[<span class="string">&#x27;load&#x27;</span>](file_path)</span><br><span class="line">    <span class="keyword">if</span> obj_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;obj_name.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;_&quot;</span>) <span class="keyword">if</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> obj_name <span class="keyword">else</span> obj_name: convert_r2py(obj_name) <span class="keyword">for</span> obj_name <span class="keyword">in</span> r_data_file_array&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> convert_r2py(obj_name)</span><br></pre></td></tr></table></figure><h3 id="执行示例"><a href="#执行示例" class="headerlink" title="执行示例"></a>执行示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rpy2.robjects <span class="keyword">import</span> pandas2ri</span><br><span class="line">pandas2ri.activate()  <span class="comment"># 启用增强转换模式</span></span><br><span class="line">dataset = parse_rdata(<span class="string">&quot;r_var.RData&quot;</span>)  <span class="comment"># 获取结构化字典</span></span><br><span class="line">print(dataset.keys())  <span class="comment"># 查看所有转换成功的变量</span></span><br></pre></td></tr></table></figure><h2 id="技术解析"><a href="#技术解析" class="headerlink" title="技术解析"></a>技术解析</h2><h3 id="关键实现逻辑"><a href="#关键实现逻辑" class="headerlink" title="关键实现逻辑"></a>关键实现逻辑</h3></li></ul><ol><li><strong>元数据捕获</strong><br>通过R原生函数<code>rownames()</code>/<code>colnames()</code>获取维度标签，确保pandas对象与原始数据结构完全对齐</li><li><strong>递归策略</strong><br>对ListVector类型采用深度优先遍历，自动处理嵌套数据结构</li><li><strong>异常处理</strong><br>内置NULLType检测，避免因缺失元数据导致的转换失败<h2 id="性能建议"><a href="#性能建议" class="headerlink" title="性能建议"></a>性能建议</h2></li><li>对于超过1GB的大型数据集，建议直接使用共享内存交换：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rpy2.robjects <span class="keyword">import</span> globalenv</span><br><span class="line">globalenv[<span class="string">&#x27;big_matrix&#x27;</span>] = np.random.rand(<span class="number">10000</span>,<span class="number">10000</span>)  <span class="comment"># 免拷贝传递</span></span><br></pre></td></tr></table></figure></li><li>启用多线程加速：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rpy2 <span class="keyword">import</span> rinterface</span><br><span class="line">rinterface.initr(rthreads=<span class="number">4</span>)  <span class="comment"># 设置R运行时线程数</span></span><br></pre></td></tr></table></figure><h2 id="代码要点解析"><a href="#代码要点解析" class="headerlink" title="代码要点解析"></a>代码要点解析</h2>通过 <code>robjects.r()</code> 这个核心函数，可以实现运行 R 代码并将结果返回到 Python 环境中，此脚本基于此特性构建。以下是部分过程的解析，仅为帮助理解，可能无法正确运行。<h3 id="读取-R-文件"><a href="#读取-R-文件" class="headerlink" title="读取 R 文件"></a>读取 R 文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rpy2.robjects <span class="keyword">as</span> robjects</span><br><span class="line"><span class="keyword">from</span> rpy2.robjects <span class="keyword">import</span> pandas2ri</span><br><span class="line"><span class="comment"># 激活pandas与R对象之间的转换</span></span><br><span class="line">pandas2ri.activate()</span><br><span class="line"><span class="comment"># 通过robjects.r()可以运行 R 语言的代码，并且返回值自动转换为 Python 数据类型</span></span><br><span class="line"><span class="comment"># 读取 R 变量到环境中</span></span><br><span class="line">r_data_file_array = robjects.r[<span class="string">&#x27;load&#x27;</span>](<span class="string">&quot;r_var.RData&quot;</span>) </span><br></pre></td></tr></table></figure><code>r_data_file_array</code> 是一个可迭代对象，可以使用<code>for obj_name in r_data_file_array</code>获取这个 R 文件下保存的所有变量名。<br>经过以上步骤，R 文件中保存的所有变量已经读取 Python 中，此时可以读取需要的变量。<h3 id="读取变量并转换为-Python-的变量类型"><a href="#读取变量并转换为-Python-的变量类型" class="headerlink" title="读取变量并转换为 Python 的变量类型"></a>读取变量并转换为 Python 的变量类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r_obj = robjects.r(obj_name)</span><br></pre></td></tr></table></figure>此时的 <code>r_obj</code> 已经是 Python 支持的变量类型了，但是丢失了行名和列名<h3 id="将变量转换为-pandas-的-DataFrame、Series-格式，并恢复行列名"><a href="#将变量转换为-pandas-的-DataFrame、Series-格式，并恢复行列名" class="headerlink" title="将变量转换为 pandas 的 DataFrame、Series 格式，并恢复行列名"></a>将变量转换为 pandas 的 DataFrame、Series 格式，并恢复行列名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先判断获取到的 r_obj 是不是已经是最终数据</span></span><br><span class="line"><span class="comment"># 如果值不是ndarray，则变量是 R 语言的 list，采用递归的方法继续向下解析，具体参照以上完整代码</span></span><br><span class="line"><span class="keyword">from</span> rpy2.robjects.vectors <span class="keyword">import</span> ListVector</span><br><span class="line"><span class="keyword">from</span> rpy2.rinterface_lib.sexp <span class="keyword">import</span> NULLType</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(r_obj, ListVector):</span><br><span class="line">    <span class="keyword">return</span> 递归解析</span><br><span class="line"><span class="comment"># 在递归的过程中，我们需要继续使用 robjects.r() 读取 r_obj 内的变量，可以使用 r_obj.names 获取 r_obj 内部的变量名，采用 robjects.r(f&quot;&#123;obj_name&#125;$&#123;sub_obj_name&#125;&quot;) 来读取内部变量。这部分逻辑是为了能够通过递归自动解析并转换为字典，各位参照完整代码即可。</span></span><br><span class="line"><span class="comment"># 如果值是ndarray，说明已经获取到了最终变量</span></span><br><span class="line"><span class="comment"># 此时有一维和二维两种情况，两种情况获取行列变量名的方法不同，先获取变量维度</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(r_obj, np.ndarray):  </span><br><span class="line">    r_obj_shape = r_obj.shape</span><br><span class="line">    array_dim = <span class="built_in">len</span>(r_obj_shape)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    array_dim = <span class="number">1</span></span><br><span class="line"><span class="comment"># 根据变量的维度匹配获取行列变量名的方法</span></span><br><span class="line"><span class="comment"># 如果是二维变量则转换为 DataFrame</span></span><br><span class="line"><span class="keyword">if</span> array_dim == <span class="number">2</span>:</span><br><span class="line">    row_names = robjects.r(<span class="string">f&#x27;rownames(<span class="subst">&#123;obj_name&#125;</span>)&#x27;</span>)</span><br><span class="line">    col_names = robjects.r(<span class="string">f&#x27;colnames(<span class="subst">&#123;obj_name&#125;</span>)&#x27;</span>)</span><br><span class="line">    print(pd.DataFrame(r_obj, index=row_names, columns=col_names))</span><br><span class="line"><span class="comment"># 如果是一维变量有两种情况，如果变量有names，则转换成Series，如果没有直接返回这个变量</span></span><br><span class="line"><span class="keyword">elif</span> array_dim == <span class="number">1</span>:</span><br><span class="line">    names = robjects.r(<span class="string">f&#x27;names(<span class="subst">&#123;obj_name&#125;</span>)&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(names, NULLType):</span><br><span class="line">        print(r_obj)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(pd.Series(_r_obj, index=names, name=obj_name))</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>通过本文方案，开发者可以突破语言边界，灵活调度R的统计计算能力与Python的工程化优势。这种跨语言协作模式特别适用于以下场景：</li></ol><ul><li>需要复用现有R模型产出的团队</li><li>在Python Web服务中集成R算法</li><li>构建混合语言的数据分析流水线<br>欢迎在评论区分享您的集成实践与优化建议！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> R 语言 </tag>
            
            <tag> rpy2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决每次 unraid 重启以后 immich 账户丢失问题</title>
      <link href="2024/08/12/%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%20unraid%20%E9%87%8D%E5%90%AF%E4%BB%A5%E5%90%8E%20immich%20%E8%B4%A6%E6%88%B7%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
      <url>2024/08/12/%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%20unraid%20%E9%87%8D%E5%90%AF%E4%BB%A5%E5%90%8E%20immich%20%E8%B4%A6%E6%88%B7%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://youpai.yeureka.cn/picgo/202408122015206.png"></p><p>最近购入了一台天钡 Wtr pro amd 版，安装 unraid 后部署了最新版 immich，但是发现每次重启 unraid 后 immich 的账户都会丢失。经排查发现是 env 文件中 DB_DATA_LOCATION 设置错误导致的。</p><p>错误设置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># The location where your uploaded files are stored</span><br><span class="line">UPLOAD_LOCATION&#x3D;&#x2F;mnt&#x2F;user&#x2F;immich</span><br><span class="line"># The location where your database files are stored</span><br><span class="line">DB_DATA_LOCATION&#x3D;&#x2F;volumn1&#x2F;...</span><br></pre></td></tr></table></figure><p>正确设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># The location where your uploaded files are stored</span><br><span class="line">UPLOAD_LOCATION&#x3D;&#x2F;mnt&#x2F;user&#x2F;immich</span><br><span class="line"># The location where your database files are stored</span><br><span class="line">DB_DATA_LOCATION&#x3D;&#x2F;mnt&#x2F;user&#x2F;appdata&#x2F;immich&#x2F;postgres</span><br></pre></td></tr></table></figure><p>由于 volumn1 卷为虚拟位置，postgres 可以正确启动，但是断电后数据会全部丢失，导致上传的文件还在但是包括账号、图片索引在内的数据库记录丢失，将 DB_DATA_LOCATION 设置为一个实际存在的位置即可。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unraid </tag>
            
            <tag> immich </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决python-wordpress-xmlrpc上传文章后发布时间为8小时后</title>
      <link href="2024/07/31/%E8%A7%A3%E5%86%B3python-wordpress-xmlrpc%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0%E5%90%8E%E5%8F%91%E5%B8%83%E6%97%B6%E9%97%B4%E4%B8%BA8%E5%B0%8F%E6%97%B6%E5%90%8E/"/>
      <url>2024/07/31/%E8%A7%A3%E5%86%B3python-wordpress-xmlrpc%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0%E5%90%8E%E5%8F%91%E5%B8%83%E6%97%B6%E9%97%B4%E4%B8%BA8%E5%B0%8F%E6%97%B6%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://youpai.yeureka.cn/picgo/202407311046799%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2%E9%85%8D%E5%9B%BE2.jpeg"></p><p><a href="https://blog.yeureka.cn/index.php/2024/07/30/%e4%bd%bf%e7%94%a8python%e8%87%aa%e5%8a%a8%e4%b8%8a%e4%bc%a0%e6%88%96%e6%9b%b4%e6%96%b0markdown%e6%96%87%e7%ab%a0%e5%88%b0wordpress/">上篇文章</a>介绍了如何使用 Python 自动上传更新 Markdown 格式的文章到 WordPress，但是上传后发现发布时间总是在设定时间的8小时以后。搜索了很多方法都不起作用，所以简单粗暴，上传的时候直接时间减8小时即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">post_modified_date = post_modified_date - timedelta(hours = <span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>这样处理似乎通用性欠佳，因为我们能确定这个问题和时区有关，因此可按照本地时区确定 timedelta。</p><ol><li><code>tzlocal.get_localzone().key</code> 获取当前系统时区名</li><li><code>pytz.timezone(时区名)</code> 将时区名转换成时区信息</li><li><code>datetime.now(时区信息).utcoffset()</code> 获取当前时区和 UTC 时区的偏移量 timedelta<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tzlocal</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line">local_timedelta = datetime.now(pytz.timezone(tzlocal.get_localzone().key)).utcoffset()</span><br></pre></td></tr></table></figure>将硬编码的 timedelta 更换成从本机时区换算的 local_timedelta 即可。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_modified_date = post_modified_date - local_timedelta</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python自动上传或更新Markdown文章到WordPress</title>
      <link href="2024/07/30/%E4%BD%BF%E7%94%A8Python%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E6%88%96%E6%9B%B4%E6%96%B0Markdown%E6%96%87%E7%AB%A0%E5%88%B0WordPress/"/>
      <url>2024/07/30/%E4%BD%BF%E7%94%A8Python%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E6%88%96%E6%9B%B4%E6%96%B0Markdown%E6%96%87%E7%AB%A0%E5%88%B0WordPress/</url>
      
        <content type="html"><![CDATA[<p><img src="https://youpai.yeureka.cn/picgo/202407301722620%E6%88%90%E5%8A%9F%E5%8F%91%E5%B8%83%E6%88%AA%E5%9B%BE.png"></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li><a href="https://pypi.org/project/python-wordpress-xmlrpc/">python-wordpress-xmlrpc</a></li><li><a href="https://python-markdown.github.io/">python-markdown</a></li><li><a href="https://pypi.org/project/python-frontmatter/">python-frontmatter</a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2>Markdown 写文章免除了排版的苦恼，适合简单记录。以前使用 Hexo 发布文章，在开头往往需要打上分类、标签等方便查找。我一般使用 <code>Jekyll-style YAML</code> 格式在 Markdown 文件开头建立元数据，如下图所示。<br><img src="https://youpai.yeureka.cn/picgo/202407301605628%E5%85%83%E6%95%B0%E6%8D%AE.png"><br>现在我要同时发布文章到 Hexo 和 WordPress，查找了些资料，整理出一个 Markdown 直接发布到 WordPress的思路：</li><li>使用 <code>python-frontmatter</code> 库识别 <code>Jekyll-style YAML</code> 格式文件的元数据和内容。</li><li>使用 <code>python-markdown</code> 将 Markdown 格式内容转换成 Html 形式。</li><li>使用 <code>python-wordpress-xmlrpc</code> 调用 WordPress 的 xmlrpc 接口进行文章上传、修改等操作。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="获取-Markdown-文件数据"><a href="#获取-Markdown-文件数据" class="headerlink" title="获取 Markdown 文件数据"></a>获取 Markdown 文件数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> frontmatter</span><br><span class="line"><span class="keyword">import</span> markdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 Markdown 文件信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_markdown</span>(<span class="params">path</span>):</span></span><br><span class="line">    post = frontmatter.load(path)</span><br><span class="line">    post_title = post.metadata.get(<span class="string">&#x27;title&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    post_tags = post.metadata.get(<span class="string">&#x27;tags&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    post_category = post.metadata.get(<span class="string">&#x27;categories&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    post_thumbnail_url = post.metadata.get(<span class="string">&quot;cover&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    date = post.metadata.get(<span class="string">&#x27;date&#x27;</span>, datetime.datetime.today())</span><br><span class="line">    post_date = date</span><br><span class="line">    post_content = convert_md2html(post.content)</span><br><span class="line">    <span class="keyword">return</span> post_title, post_tags, post_category, post_date, post_content, post_thumbnail_url</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将 Markdown 转为 Html5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_md2html</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> markdown.markdown(content, output_format=<span class="string">&#x27;html5&#x27;</span>, extensions=[<span class="string">&#x27;extra&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="初始化上传工具参数"><a href="#初始化上传工具参数" class="headerlink" title="初始化上传工具参数"></a>初始化上传工具参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordpress_xmlrpc <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">WORDPRESS_XMLRCPATH = <span class="string">&quot;https://your_wordpress_domin/xmlrpc.php&quot;</span></span><br><span class="line">WORDPRESS_USER_NAME = <span class="string">&quot;your user name&quot;</span></span><br><span class="line">WORDPRESS_USER_PASSWD = <span class="string">&quot;your user password&quot;</span></span><br><span class="line">wp = Client(WORDPRESS_XMLRCPATH, WORDPRESS_USER_NAME, WORDPRESS_USER_PASSWD)</span><br></pre></td></tr></table></figure><h3 id="将题图-cover-上传到-WordPress"><a href="#将题图-cover-上传到-WordPress" class="headerlink" title="将题图 cover 上传到 WordPress"></a>将题图 cover 上传到 WordPress</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> wordpress_xmlrpc.compat <span class="keyword">import</span> xmlrpc_client</span><br><span class="line"><span class="keyword">from</span> wordpress_xmlrpc.methods <span class="keyword">import</span> media</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_image_if_needed</span>(<span class="params">image_url</span>):</span></span><br><span class="line">    <span class="keyword">if</span> image_url <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 从链接下载图片</span></span><br><span class="line">    image_content = requests.get(image_url).content</span><br><span class="line">    <span class="comment"># 从链接获取图片文件名</span></span><br><span class="line">    image_name = image_url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 从图片文件名获取扩展名</span></span><br><span class="line">    image_fe = image_name.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 构建上传数据</span></span><br><span class="line">    imageData = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: image_name,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">f&#x27;image/<span class="subst">&#123;image_fe&#125;</span>&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;bits&#x27;</span>: xmlrpc_client.Binary(image_content),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 上传图片并获得图片id</span></span><br><span class="line">    response = wp.call(media.UploadFile(imageData))</span><br><span class="line">    <span class="keyword">return</span> response.get(<span class="string">&#x27;id&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="将文章上传到-WordPress"><a href="#将文章上传到-WordPress" class="headerlink" title="将文章上传到 WordPress"></a>将文章上传到 WordPress</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordpress_xmlrpc <span class="keyword">import</span> WordPressPost</span><br><span class="line"><span class="keyword">from</span> wordpress_xmlrpc.methods.posts <span class="keyword">import</span> NewPost, EditPost</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish_post</span>(<span class="params">post_file_name, post_title, post_tags, post_category, post_date, post_modified_date, post_content, thumbnail</span>):</span></span><br><span class="line">    <span class="comment"># 新建文章</span></span><br><span class="line">    post = WordPressPost()</span><br><span class="line">    <span class="comment"># 设置文章元数据</span></span><br><span class="line">    post.title = post_title     <span class="comment"># 标题</span></span><br><span class="line">    post.date = post_date    <span class="comment"># 发布时间</span></span><br><span class="line">    post.modified_date = datetime.fromtimestamp(post_modified_date)  <span class="comment"># 修改时间</span></span><br><span class="line">    terms_names = &#123;</span><br><span class="line">        <span class="string">&#x27;post_tag&#x27;</span>: post_tags,          <span class="comment"># 标签</span></span><br><span class="line">        <span class="string">&#x27;category&#x27;</span>: post_category,    <span class="comment"># 归档</span></span><br><span class="line">    &#125;</span><br><span class="line">    post.terms_names = terms_names</span><br><span class="line">    post.thumbnail = upload_image_if_needed(thumbnail)  <span class="comment"># 特色图片</span></span><br><span class="line">    post.post_status = <span class="string">&#x27;publish&#x27;</span>       <span class="comment"># 设置状态为已发布</span></span><br><span class="line">    post.comment_status = <span class="string">&#x27;open&#x27;</span>    <span class="comment"># 打开评论</span></span><br><span class="line">    <span class="comment"># 设置文章正文</span></span><br><span class="line">    post.content = post_content</span><br><span class="line">    <span class="comment"># 上传</span></span><br><span class="line">    post_id = wp.call(NewPost(post))</span><br><span class="line">    print(post_id)</span><br></pre></td></tr></table></figure><h3 id="正式上传"><a href="#正式上传" class="headerlink" title="正式上传"></a>正式上传</h3>做好前面的准备工作以后，就可以开始正式上传<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Markdown 文件</span></span><br><span class="line">md_path = <span class="string">&quot;one_md_file.md&quot;</span></span><br><span class="line"><span class="comment"># 获取 Markdown 文件数据</span></span><br><span class="line">post_title, post_tags, post_category, post_date, post_content, post_image = parse_markdown(md_path)</span><br><span class="line"><span class="comment"># 获取文件修改时间</span></span><br><span class="line">post_modified_date = <span class="built_in">int</span>(os.path.getmtime(md_path))</span><br><span class="line"><span class="comment"># 上传到 WordPress</span></span><br><span class="line">publish_post(md_path, post_title, post_tags, post_category, post_date, post_modified_date, post_content, post_image)</span><br></pre></td></tr></table></figure><h2 id="The-Next"><a href="#The-Next" class="headerlink" title="The Next"></a>The Next</h2>或许你已经注意到了，<code>publish_post</code> 函数中的第一个参数 <code>md_path</code> 和 <code>EditPost</code> 函数并没有用到，这是因为文章更新功能已经实现，但上述代码没有体现。这里提出一种思路：</li><li>文章、图片上传成功以后，WordPress 会返回该资源的 id。</li><li>维护一张本地文件名、修改时间和 id 关系对照表。</li><li>每次上传时，扫描所有文件，如果文件名在对照表中不存在，则上传到 WordPress 并在本地存储其 id。如果文件已上传，则与本次存储的最后修改时间做比较，决定是否更新上传。<br>这部分代码实现并不困难，每个人都可以有自己的思路，如果哪位友友特别需要请留言，或许我会考虑整理一下再写篇博文具体介绍，或者把完整代码分享到<a href="https://blog.yeureka.cn/">我的博客</a>或者<a href="https://github.com/yeureka/">Github</a>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Wordpress </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将博客从 Hexo 迁移到 Wordpress</title>
      <link href="2024/07/26/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8E%20Hexo%20%E8%BF%81%E7%A7%BB%E5%88%B0Wordpress/"/>
      <url>2024/07/26/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8E%20Hexo%20%E8%BF%81%E7%A7%BB%E5%88%B0Wordpress/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>博客很久没有更新了。一方面是由于本人并不是计算机从业人员，编程只是个人爱好，疫情期间过于忙碌，没有精力做工作以外的任何事情。另一方面是人到中年，有太多更加重要的事情需要去做。最近有些闲暇时间，发现原来的博客在新版 Hexo 下还能很好的运行，遂重新捡起来，写篇博客聊以纪念。</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>也不能算迁移，因为看到 Wordpress 建站的优点，想尝试一下，又没有内容，所以索性把旧博客的内容搬到 Wordpress，网址是：<a href="https://blog.yeureka.cn/">blog.yeureka.cn</a>。<br>本次迁移参考了 onekyle 的 <a href="https://github.com/onekyle/HexoToWordPress?tab=readme-ov-file">HexoToWordPress</a> 库。代码非常简单，只需两步：</p><ul><li>将 md 中的信息抽取</li><li>将获得的信息发布到 Wordpress</li></ul><p>onekyle 已经把完全写好了这两步需要用的方法，直接调用即可。<br>需要注意的是，该仓库用到的 frontmatter 库名为 python-frontmatter，注意不要安装错即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> blog_uploader.markdown_parser <span class="keyword">import</span> parse_markdown</span><br><span class="line"><span class="keyword">from</span> blog_uploader.wordpress_publisher <span class="keyword">import</span> publish_post</span><br><span class="line"></span><br><span class="line">data_dir_test = os.getcwd()</span><br><span class="line">dirs = os.listdir(data_dir_test)</span><br><span class="line">dirs = [e <span class="keyword">for</span> e <span class="keyword">in</span> dirs <span class="keyword">if</span> e[-<span class="number">2</span>:] == <span class="string">&quot;md&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> md_path <span class="keyword">in</span> dirs:</span><br><span class="line">    post_image=<span class="literal">None</span></span><br><span class="line">    print(<span class="string">f&quot;解析<span class="subst">&#123;md_path&#125;</span>&quot;</span>)</span><br><span class="line">    post_title, post_tags, post_category, post_date, post_content = parse_markdown(md_path)</span><br><span class="line">    print(<span class="string">&quot;上传&quot;</span>)</span><br><span class="line">    publish_post(post_title, post_tags, post_category, post_date, post_content, post_image)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Wordpress </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Roam Research图片链接一键替换保存工具</title>
      <link href="2021/03/13/RoamResearch%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E4%B8%80%E9%94%AE%E6%9B%BF%E6%8D%A2%E4%BF%9D%E5%AD%98%E5%B7%A5%E5%85%B7/"/>
      <url>2021/03/13/RoamResearch%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E4%B8%80%E9%94%AE%E6%9B%BF%E6%8D%A2%E4%BF%9D%E5%AD%98%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h3><p>由于Roam的调整，无法加载http链接图片，只能加载https链接图片，而本人RoamResearch中的图片存放在七牛云，https链接需要收费，因此转用又拍云，需要将笔记中所有图片链接转换到又拍云。</p><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>下载RoamResearch的图片并利用Picgo上传到新图床备份，同时用新图床链接替换原有图片链接，生成新的json文件可重新导入RoamResearch中。</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ol><li><a href="https://pypi.org/project/requests/">requests</a></li><li><a href="https://pysimplegui.readthedocs.io/en/latest/">pysimplegui</a></li><li><a href="https://molunerfinn.com/PicGo/">Picgo</a><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 下载并进入文件夹</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;yeureka&#x2F;RoamTools.git</span><br><span class="line">cd RoamTools</span><br><span class="line"># 使用 pipenv 安装虚拟环境</span><br><span class="line">pipenv install</span><br><span class="line"># 打开</span><br><span class="line">python RoamToolUI.py </span><br></pre></td></tr></table></figure><h4 id="使用前准备"><a href="#使用前准备" class="headerlink" title="使用前准备"></a>使用前准备</h4>首先需要将RoamResearch文章导出为json格式文件。<br>然后打开本工具。<br><img src="https://youpai.yeureka.cn/picgo/RoamTool%E7%95%8C%E9%9D%A2.png" alt="image"><br>由于RoamResearch原生图片存放在google，众所周知的原因下载这些图片需要使用代理。点击<code>设置</code>按钮可设置代理服务ip。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># config.json</span><br><span class="line">&#123;</span><br><span class="line">     &quot;proxies&quot;: &#123;   # 如果不需要代理，可将&quot;proxies&quot;置设为空值</span><br><span class="line">          &quot;http&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:1087&quot;,</span><br><span class="line">          &quot;https&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:1087&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;picgo_upload&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:36677&#x2F;upload&quot;    # 设置Picgo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>另外，上传图床利用了Picgo的服务，picgo设置请参考以下官方教程。<blockquote><ol><li><a href="https://picgo.github.io/PicGo-Doc/zh/guide/advance.html#picgo-server%E7%9A%84%E4%BD%BF%E7%94%A8">picgo-server的使用</a></li><li><a href="https://molunerfinn.com/PicGo/">Picgo主页</a></li></ol></blockquote><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4></li><li>点击<code>浏览</code>选择刚从RoamResearch下载的json文件。</li><li>点击<code>运行</code>。</li><li>运行结束后点击<code>下载</code>按钮保存转换好的json文件。</li><li>将转换好的json文件重新导入回RoamResearch中即可。</li><li>安装文件夹下的img文件夹中保存有所有的图片，可按需取用。<h4 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h4>感谢ryantuck提供的工具 <a href="https://github.com/ryantuck/fix-roam">fix-roam</a> 解决了Roam的json文件再次导入时遇到的问题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PysimpleGui </tag>
            
            <tag> Roam Research </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进程+协程——从零开始搭建异步爬虫（2）</title>
      <link href="2021/02/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/"/>
      <url>2021/02/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在上节中，我们成功的在多进程中利用协程实现了多任务异步执行和多流程按次序执行的目标。本节我们将在原有代码的基础上继续改造代码，增加网页请求功能，实现一个简单的异步爬虫，实现每次爬新网页只需要关注网络请求、网页解析和数据处理，多进程和异步请求部分由爬虫自身处理。</p><h4 id="详细流程图"><a href="#详细流程图" class="headerlink" title="详细流程图"></a>详细流程图</h4><p><img src="https://youpai.yeureka.cn/picgo/20210225200656%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%E6%9E%B6%E6%9E%84.jpg"></p><h4 id="需要用到的库"><a href="#需要用到的库" class="headerlink" title="需要用到的库"></a>需要用到的库</h4><p><code>Beautifulsoup</code>：一个可以从 <code>HTML</code> 或 <code>XML</code> 文件中提取数据的Python库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装方法</span><br><span class="line">cd AiospiderWorkshop</span><br><span class="line">pipenv shell</span><br><span class="line">pipenv install beautifulsoup4</span><br></pre></td></tr></table></figure><h4 id="创建下载类-Downloader"><a href="#创建下载类-Downloader" class="headerlink" title="创建下载类 Downloader"></a>创建下载类 <code>Downloader</code></h4><p>我们以崔庆才崔老师建立的爬虫练习网站  <a href="https://scrape.center/"><code>https://scrape.center/</code></a> 为练习对象。我们用到的是其中最简单的一个网页 <a href="https://ssr1.scrape.center/page/1"><code>https://ssr1.scrape.center/page/1</code></a>。阅读本节需要对 <code>Beautifulsoup</code> 库和 <code>aiohttp</code> 库有简单了解。</p><p>新建一个 <code>py</code> 文件，验证下载类 <code>Downloader</code> 的功能。</p><ol><li>建立一个函数备用，从网页抽取电影名并打印到屏幕上。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_movie_name</span>(<span class="params">html</span>):</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    name_tags = soup.find_all(class_=<span class="string">&quot;m-b-sm&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> name_tag <span class="keyword">in</span> name_tags:</span><br><span class="line">        print(name_tag.string)</span><br></pre></td></tr></table></figure><ol start="2"><li>创建下载类 <code>Downloader</code></li></ol><p><code>Downloader</code> 类主要有两个方法 <code>get_async</code>、<code>download</code>。</p><p><code>download</code>：打开一个 <code>session</code>，异步请求 <code>url</code> 列表中的所有 <code>url</code>。</p><p><code>get_async</code>：请求网页并返回网页 <code>html</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> ClientSession</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downloader</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_async</span>(<span class="params">self, session, url</span>):</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url=url) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> resp.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">            url_lst = [</span><br><span class="line">                <span class="string">&quot;https://ssr1.scrape.center/page/1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://ssr1.scrape.center/page/2&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            download_tasks = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> url_lst:</span><br><span class="line">                download_task = asyncio.create_task(self.get_async(session, url))</span><br><span class="line">                download_tasks.append(download_task)</span><br><span class="line">            <span class="keyword">for</span> task <span class="keyword">in</span> download_tasks:</span><br><span class="line">                <span class="keyword">await</span> task</span><br><span class="line">                result = task.result()</span><br><span class="line">                extract_movie_name(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self</span>):</span></span><br><span class="line">        asyncio.run(self.download())</span><br></pre></td></tr></table></figure><ol start="3"><li>编写主函数 <code>main</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    downloader = Downloader()</span><br><span class="line">    downloader.async_run()</span><br></pre></td></tr></table></figure><p>此时，下载类能够正常运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 运行结果</span><br><span class="line">霸王别姬 - Farewell My Concubine</span><br><span class="line">这个杀手不太冷 - Léon</span><br><span class="line">肖申克的救赎 - The Shawshank Redemption</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="整合下载类"><a href="#整合下载类" class="headerlink" title="整合下载类"></a>整合下载类</h4><p>目前我们的下载类还是一个单独的功能，我们需要将下载方法整合进现有代码，采用多进程方法调用下载方法，并通过下载队列交换数据。</p><ol><li>改造 <code>Bridge</code> 类</li></ol><p>增加下载队列相关功能，原有代码不变。</p><p><code>download_queue</code>：下载队列。</p><p><code>put_download_queue</code>、<code>get_download_queue</code>、<code>download_queue_empty</code> 的功能不言自明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        manager = Manager()</span><br><span class="line">        self.download_queue = manager.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_download_queue</span>(<span class="params">self, workshop</span>):</span></span><br><span class="line">        self.download_queue.put_nowait(workshop)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_queue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.download_queue.get_nowait()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_queue_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.download_queue.empty()</span><br></pre></td></tr></table></figure><ol start="2"><li>改造 <code>Workshop</code> 类</li></ol><p>增加 <code>url</code>、<code>need_download</code>、<code>html</code> 三个属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,  url, need_download</span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.need_download = need_download</span><br><span class="line">        self.html = <span class="literal">None</span></span><br><span class="line">        self._next_process = <span class="literal">None</span></span><br></pre></td></tr></table></figure><ol start="3"><li>改造 <code>MyWorkshop</code> 类</li></ol><p>依据 <code>Workshop</code> 类的改变修改初始化代码，用本节的 <code>extract_movie_name</code> 方法稍加改造代替上节的两段模拟代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorkshop</span>(<span class="params">Workshop</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, need_download</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(url, need_download)</span><br><span class="line">        self.set_start_process(self.extract_movie_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">extract_movie_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        soup = BeautifulSoup(self.html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        name_tags = soup.find_all(class_=<span class="string">&quot;m-b-sm&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> name_tag <span class="keyword">in</span> name_tags:</span><br><span class="line">            print(name_tag.string)</span><br><span class="line">        self.set_end()</span><br></pre></td></tr></table></figure><ol start="4"><li>改造 <code>Downloader</code> 类</li></ol><p>改造 <code>async_run</code>、<code>__init__</code> 方法，使其可以接收信息传递类 <code>Bridge</code> 并保存。</p><p>增加 <code>get_page</code> 方法：接收 <code>workshop</code>，取出 <code>url</code> 交给 <code>get_async</code> 下载，下载好的 <code>html</code> 保存在 <code>workshop</code> 的 <code>html</code> 属性，之后置 <code>workshop</code> 的 <code>need_download</code> 属性为 <code>False</code>，返回 <code>workshop</code> 。</p><p>修改 <code>download</code> 方法：和 <code>works</code> 一样采用 <code>bridge.work_end()</code> 判断是否程序结束，从 <code>download_queue</code> 下载队列中取得  <code>workshop</code>，交给 <code>get_page</code> 方法处理，返回的  <code>workshop</code> 放入任务队列 <code>work_queue</code> 中进行下一步处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downloader</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_async</span>(<span class="params">self, session, url</span>):</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url=url) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> resp.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">self, session, workshop</span>):</span></span><br><span class="line">        workshop.html = <span class="keyword">await</span> self.get_async(session, workshop.url)</span><br><span class="line">        workshop.need_download = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> workshop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_end():</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">                download_tasks = <span class="built_in">list</span>()</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.download_queue_empty():</span><br><span class="line">                    workshop = self.bridge.get_download_queue()</span><br><span class="line">                    task = asyncio.create_task(self.get_page(session, workshop))</span><br><span class="line">                    download_tasks.append(task)</span><br><span class="line">                <span class="keyword">for</span> task <span class="keyword">in</span> download_tasks:</span><br><span class="line">                    <span class="keyword">await</span> task</span><br><span class="line">                    workshop = task.result()</span><br><span class="line">                    self.bridge.put_work_queue(workshop)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, bridge</span>):</span></span><br><span class="line">        self.bridge = bridge</span><br><span class="line">        asyncio.run(self.download())</span><br></pre></td></tr></table></figure><ol start="5"><li>改造 <code>Works</code> 类</li></ol><p>修改 <code>run_works</code> 方法：从 <code>work_queue</code> 拿到 <code>workshop</code> 后，判断其是否需要下载，如果需要下载就推入下载队列 <code>download_queue</code> 让下载进程下载。</p><p>其余部分保持不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Works</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_works</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge.flag_start()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_end():</span><br><span class="line">            task_lst = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_queue_empty():</span><br><span class="line">                workshop = self.bridge.get_work_queue()</span><br><span class="line">                <span class="keyword">if</span> workshop.need_download:</span><br><span class="line">                    self.bridge.put_download_queue(workshop)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                task = asyncio.create_task(workshop.run_next_process())</span><br><span class="line">                task_lst.append(task)</span><br><span class="line">            <span class="keyword">for</span> task <span class="keyword">in</span> task_lst:</span><br><span class="line">                <span class="keyword">await</span> task</span><br><span class="line">                self.distribute_works(task)</span><br></pre></td></tr></table></figure><ol start="6"><li>改造 <code>App</code> 类</li></ol><p>下载进程作为一个新进程调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.works = Works()</span><br><span class="line">        self.bridge = Bridge()</span><br><span class="line">        self.download = Downloader()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, workshop_lst</span>):</span></span><br><span class="line">        self.bridge.init_works(workshop_lst)</span><br><span class="line">        p_run_works = Process(target=self.works.async_run,</span><br><span class="line">                              args=(self.bridge,))</span><br><span class="line">        p_download = Process(target=self.download.async_run,</span><br><span class="line">                             args=(self.bridge,))</span><br><span class="line">        p_run_works.start()</span><br><span class="line">        p_download.start()</span><br><span class="line">        p_run_works.join()</span><br><span class="line">        p_download.join()</span><br></pre></td></tr></table></figure><ol start="7"><li>改造主函数 <code>main</code> </li></ol><p>在主函数中生成 <code>Workshop</code> 的列表，交给 <code>App</code> 执行即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    work_lst = <span class="built_in">list</span>()</span><br><span class="line">    url_template = <span class="string">&quot;https://ssr1.scrape.center/page/&#123;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        url = url_template.<span class="built_in">format</span>(<span class="built_in">str</span>(i))</span><br><span class="line">        work_lst.append(</span><br><span class="line">            MyWorkshop(url=url, need_download=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line">    app = App()</span><br><span class="line">    app.async_run(work_lst)</span><br></pre></td></tr></table></figure><p>至此，程序已可正常执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 运行结果</span><br><span class="line">霸王别姬 - Farewell My Concubine</span><br><span class="line">...</span><br><span class="line">魂断蓝桥 - Waterloo Bridge</span><br><span class="line">运行时间：2.26s</span><br></pre></td></tr></table></figure><h4 id="本节完整代码"><a href="#本节完整代码" class="headerlink" title="本节完整代码"></a>本节完整代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> ClientSession</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_run_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># 记录运行程序运行时间的装饰器</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)  </span><span class="comment"># 保持被装饰的函数名不变，否则多进程调用出错</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        f = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">&quot;运行时间：&#123;:.2f&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        manager = Manager()</span><br><span class="line">        self.work_queue = manager.Queue()</span><br><span class="line">        self.download_queue = manager.Queue()</span><br><span class="line">        self.config_dict = manager.<span class="built_in">dict</span>()</span><br><span class="line">        self.init_config()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_config</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] = <span class="number">0</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_works</span>(<span class="params">self, workshop_lst</span>):</span></span><br><span class="line">        <span class="keyword">for</span> workshop <span class="keyword">in</span> workshop_lst:</span><br><span class="line">            self.put_work_queue(workshop)</span><br><span class="line">            self.work_cnt_increase()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flag_start</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>]\</span><br><span class="line">               <span class="keyword">and</span> <span class="keyword">not</span> self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_cnt_increase</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_cnt_decrease</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_work_queue</span>(<span class="params">self, workshop</span>):</span></span><br><span class="line">        self.work_queue.put_nowait(workshop)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_work_queue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.work_queue.get_nowait()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_queue_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.work_queue.empty()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_download_queue</span>(<span class="params">self, workshop</span>):</span></span><br><span class="line">        self.download_queue.put_nowait(workshop)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_queue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.download_queue.get_nowait()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_queue_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.download_queue.empty()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, need_download</span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.need_download = need_download</span><br><span class="line">        self.html = <span class="literal">None</span></span><br><span class="line">        self._next_process = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_start_process</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self._next_process = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_next_process</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self._next_process = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._next_process = <span class="string">&quot;/EOF&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._next_process == <span class="string">&quot;/EOF&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_next_process</span>(<span class="params">self</span>):</span></span><br><span class="line">        workshop = <span class="keyword">await</span> self._next_process()</span><br><span class="line">        <span class="keyword">if</span> workshop:</span><br><span class="line">            <span class="keyword">return</span> workshop</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Works</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distribute_works</span>(<span class="params">self, task</span>):</span></span><br><span class="line">        workshop = task.result()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> workshop.is_end():</span><br><span class="line">            self.bridge.put_work_queue(workshop)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.bridge.work_cnt_decrease()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_works</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge.flag_start()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_end():</span><br><span class="line">            task_lst = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_queue_empty():</span><br><span class="line">                workshop = self.bridge.get_work_queue()</span><br><span class="line">                <span class="keyword">if</span> workshop.need_download:</span><br><span class="line">                    self.bridge.put_download_queue(workshop)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                task = asyncio.create_task(workshop.run_next_process())</span><br><span class="line">                task_lst.append(task)</span><br><span class="line">            <span class="keyword">for</span> task <span class="keyword">in</span> task_lst:</span><br><span class="line">                <span class="keyword">await</span> task</span><br><span class="line">                self.distribute_works(task)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @print_run_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, bridge</span>):</span></span><br><span class="line">        self.bridge = bridge</span><br><span class="line">        asyncio.run(self.run_works())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downloader</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_async</span>(<span class="params">self, session, url</span>):</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url=url) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> resp.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">self, session, workshop</span>):</span></span><br><span class="line">        workshop.html = <span class="keyword">await</span> self.get_async(session, workshop.url)</span><br><span class="line">        workshop.need_download = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> workshop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_end():</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">                download_tasks = <span class="built_in">list</span>()</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.download_queue_empty():</span><br><span class="line">                    workshop = self.bridge.get_download_queue()</span><br><span class="line">                    task = asyncio.create_task(self.get_page(session, workshop))</span><br><span class="line">                    download_tasks.append(task)</span><br><span class="line">                <span class="keyword">for</span> task <span class="keyword">in</span> download_tasks:</span><br><span class="line">                    <span class="keyword">await</span> task</span><br><span class="line">                    workshop = task.result()</span><br><span class="line">                    self.bridge.put_work_queue(workshop)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, bridge</span>):</span></span><br><span class="line">        self.bridge = bridge</span><br><span class="line">        asyncio.run(self.download())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.works = Works()</span><br><span class="line">        self.bridge = Bridge()</span><br><span class="line">        self.download = Downloader()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, workshop_lst</span>):</span></span><br><span class="line">        self.bridge.init_works(workshop_lst)</span><br><span class="line">        p_run_works = Process(target=self.works.async_run,</span><br><span class="line">                              args=(self.bridge, ))</span><br><span class="line">        p_download = Process(target=self.download.async_run,</span><br><span class="line">                             args=(self.bridge,))</span><br><span class="line">        p_run_works.start()</span><br><span class="line">        p_download.start()</span><br><span class="line">        p_run_works.join()</span><br><span class="line">        p_download.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorkshop</span>(<span class="params">Workshop</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, need_download</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(url, need_download)</span><br><span class="line">        self.set_start_process(self.extract_movie_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">extract_movie_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        soup = BeautifulSoup(self.html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        name_tags = soup.find_all(class_=<span class="string">&quot;m-b-sm&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> name_tag <span class="keyword">in</span> name_tags:</span><br><span class="line">            print(name_tag.string)</span><br><span class="line">        self.set_end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    work_lst = <span class="built_in">list</span>()</span><br><span class="line">    url_template = <span class="string">&quot;https://ssr1.scrape.center/page/&#123;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        url = url_template.<span class="built_in">format</span>(<span class="built_in">str</span>(i))</span><br><span class="line">        work_lst.append(</span><br><span class="line">            MyWorkshop(url=url, need_download=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line">    app = App()</span><br><span class="line">    app.async_run(work_lst)</span><br></pre></td></tr></table></figure><h4 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h4><p>经过本节的改造，我们已经得到了一个简单的异步爬虫。针对一系列新网页，只需要继承 <code>Workshop</code> 类，实现自己的爬取流程代码即可。当然，目前它只能胜任最简单的工作，没有考虑错误处理、定制请求参数、代理、日志等一系列问题，这些需要在日后的使用中慢慢完善。</p>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> aiohttp </tag>
            
            <tag> 多进程 </tag>
            
            <tag> 协程 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进程+协程——从零开始搭建异步爬虫（1）</title>
      <link href="2021/02/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/"/>
      <url>2021/02/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>很多人入门 Python 是从爬虫开始的，笔者也不例外。爬取大量网页需要用到多进程、多线程、协程等等特性，而这类代码的编写往往比较繁琐，如果经常需要爬取不同的网页，我们往往会用到 scrapy 等爬虫框架以减少工作量。笔者最近正好需要大量爬取一些内容，本着学习的目的，我们不使用爬虫框架，从零开始搭建一个简单的异步爬虫。</p><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ol><li>利用协程异步请求网页。</li><li>利用多进程加快爬取速度。</li><li>提供需要请求的链接，设定好处理流程后，程序自动按顺序处理。</li></ol><h4 id="简易流程图"><a href="#简易流程图" class="headerlink" title="简易流程图"></a>简易流程图</h4><p><img src="https://youpai.yeureka.cn/picgo/20210225200616%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E7%BB%93%E6%9E%84.jpg" alt="Blog-异步爬虫结构"></p><h4 id="需要用到的库"><a href="#需要用到的库" class="headerlink" title="需要用到的库"></a>需要用到的库</h4><ol><li><a href="https://pipenv.pypa.io/en/latest/#install-pipenv-today"><code>pipenv</code></a> 创建虚拟环境，以免影响原有环境</li><li><a href="https://docs.aiohttp.org/en/stable/"><code>aiohttp</code></a> 是基于 <a href="https://docs.python.org/zh-cn/3/library/asyncio.html"><code>asyncio</code></a> 实现的HTTP框架</li></ol><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ol><li>安装 <a href="https://pipenv.pypa.io/en/latest/#install-pipenv-today"><code>pipenv</code></a>（参考<a href="https://pipenv.pypa.io/en/latest/#install-pipenv-today">官方教程</a>）</li><li>打开终端，在合适的位置创建文件夹，并进入文件夹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir AiospiderWorkshop</span><br><span class="line">cd AiospiderWorkshop</span><br></pre></td></tr></table></figure><ol start="3"><li>创建虚拟环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install --python 3.8</span><br></pre></td></tr></table></figure><ol start="4"><li>更换 <code>pipenv</code> 源为阿里云源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 打开 Pipfile 文件，修改 source 部分如下</span><br><span class="line">[[source]]</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&quot;</span><br><span class="line">verify_ssl &#x3D; true</span><br><span class="line">name &#x3D; &quot;aliyun&quot;</span><br><span class="line"># 保存后重启终端（否则换源可能未生效）</span><br></pre></td></tr></table></figure><ol start="5"><li>进入虚拟环境，并安装 <a href="https://docs.aiohttp.org/en/stable/"><code>aiohttp</code></a> </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 进入刚才创建的文件夹，并进入环境安装 aiohttp</span><br><span class="line">cd AiospiderWorkshop</span><br><span class="line">pipenv shell</span><br><span class="line">pipenv install aiohttp</span><br></pre></td></tr></table></figure><h4 id="创建任务类-Workshop-和任务分配类-Works"><a href="#创建任务类-Workshop-和任务分配类-Works" class="headerlink" title="创建任务类 Workshop 和任务分配类 Works"></a>创建任务类 <code>Workshop</code> 和任务分配类 <code>Works</code></h4><p>此部分需要你对 <code>Python</code> 的 <code>asyncio</code> 库有基本了解即可。</p><ol><li>导入需要的库</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br></pre></td></tr></table></figure><ol start="2"><li>首先创建一个任务类 <code>Workshop</code>，函数 <code>async_simulation</code> 用于模拟异步操作</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_simulation</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 模拟一个异步操作，随机停顿1-3秒</span></span><br><span class="line">        sleep_time = randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        print(<span class="string">&quot;等待&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>(sleep_time))</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(sleep_time)</span><br></pre></td></tr></table></figure><ol start="3"><li>运行上述模拟异步操作，查看运行情况</li></ol><p>在模拟运行之前，先创建一个装饰器用于记录程序运行时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_run_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># 记录运行程序运行时间的装饰器</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)    </span><span class="comment"># 保持被装饰的函数名不变，否则多进程调用出错</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        f = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">&quot;运行时间：&#123;:.2f&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br></pre></td></tr></table></figure><p>运行查看结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Works</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_works</span>(<span class="params">self</span>):</span></span><br><span class="line">        workshop = Workshop()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">await</span> workshop.async_simulation()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @print_run_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self</span>):</span></span><br><span class="line">        asyncio.run(self.run_works())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    works = Works()</span><br><span class="line">    works.async_run()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 运行结果</span><br><span class="line">等待3秒</span><br><span class="line">等待2秒</span><br><span class="line">等待3秒</span><br><span class="line">运行时间：8.01s</span><br></pre></td></tr></table></figure><p>我们看到程序并没有异步执行，要实现异步执行，我们需要对 <code>Works</code> 类的 <code>run_works</code> 函数做如下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Works</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_works</span>(<span class="params">self</span>):</span></span><br><span class="line">        task_lst = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            workshop = Workshop()</span><br><span class="line">            task = asyncio.create_task(workshop.async_simulation())</span><br><span class="line">            task_lst.append(task)</span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> task_lst:</span><br><span class="line">            <span class="keyword">await</span> task</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 运行结果</span><br><span class="line">等待3秒</span><br><span class="line">等待1秒</span><br><span class="line">等待2秒</span><br><span class="line">运行时间：3.01s</span><br></pre></td></tr></table></figure><p>程序成功实现异步执行</p><h4 id="在多进程中调用任务分配类"><a href="#在多进程中调用任务分配类" class="headerlink" title="在多进程中调用任务分配类"></a>在多进程中调用任务分配类</h4><p>此部分需要你对 <code>Python</code> 的 <code>multiprocessing</code> 库有基本了解</p><p>程序多进程化非常简单，进行如下修改即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    works = Works()</span><br><span class="line">    p_run_works = Process(target=works.async_run)</span><br><span class="line">    p_run_works.start()</span><br><span class="line">    p_run_works.join()</span><br></pre></td></tr></table></figure><h4 id="创建-App-类"><a href="#创建-App-类" class="headerlink" title="创建 App 类"></a>创建 App 类</h4><p>如果程序初始化和多进程逻辑都放在 <code>main</code> 主函数中执行，程序功能越复杂， <code>main</code> 主函数也会越复杂，因此创建一个 <code>App</code> 类负责程序的初始化运行。对代码如下部分做修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.works = Works()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self</span>):</span></span><br><span class="line">        p_run_works = Process(target=self.works.async_run)</span><br><span class="line">        p_run_works.start()</span><br><span class="line">        p_run_works.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = App()</span><br><span class="line">    app.async_run()</span><br></pre></td></tr></table></figure><h4 id="创建信息传递类-Bridge"><a href="#创建信息传递类-Bridge" class="headerlink" title="创建信息传递类 Bridge"></a>创建信息传递类 <code>Bridge</code></h4><p>从前面的简易流程图可以看出，我们程序的运行依赖多个队列传输数据，因此，我们创建一个 <code>Bridge</code> 类负责所有共享数据的保存和操作。</p><p><code>Bridge</code> 类中的 <code>init_works</code> 方法。将 <code>workshop_lst</code> 中的任务传入任务队列 <code>work_queue</code> 中，用于程序开始运行时任务初始化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        manager = Manager()</span><br><span class="line">        self.work_queue = manager.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_work_queue</span>(<span class="params">self, workshop</span>):</span></span><br><span class="line">        self.work_queue.put_nowait(workshop)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_work_queue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.work_queue.get_nowait()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_queue_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.work_queue.empty()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_works</span>(<span class="params">self, workshop_lst</span>):</span></span><br><span class="line">        <span class="keyword">for</span> workshop <span class="keyword">in</span> workshop_lst:</span><br><span class="line">            self.put_work_queue(workshop)</span><br></pre></td></tr></table></figure><ol><li>修改 <code>Works</code> 类，使其可以利用信息传递类中的队列等共享数据。</li></ol><p>修改 <code>async_run</code> 函数。调用 <code>Works</code> 类中的 <code>async_run</code> 函数时需要传入 <code>bridge</code>。<code>bridge</code> 为信息传递类 <code>Bridge</code> 的实例，可通过其操作任务队列。</p><p>修改 <code>run_works</code> 方法，其运行时，如果任务队列 <code>work_queue</code> 不为空，则从队列中取出所有任务异步执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Works</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_works</span>(<span class="params">self</span>):</span></span><br><span class="line">        task_lst = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_queue_empty():</span><br><span class="line">            workshop = self.bridge.get_work_queue()</span><br><span class="line">            task = asyncio.create_task(workshop.async_simulation())</span><br><span class="line">            task_lst.append(task)</span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> task_lst:</span><br><span class="line">            <span class="keyword">await</span> task</span><br><span class="line"></span><br><span class="line"><span class="meta">    @print_run_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, bridge</span>):</span></span><br><span class="line">        self.bridge = bridge</span><br><span class="line">        asyncio.run(self.run_works())</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>App</code> 类，使其可以传入 <code>bridge</code>。并且在 <code>async_run</code> 方法中调用 <code>bridge.init_works(workshop_lst)</code> 初始化任务队列。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.works = Works()</span><br><span class="line">        self.bridge = Bridge()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, workshop_lst</span>):</span></span><br><span class="line">        self.bridge.init_works(workshop_lst)</span><br><span class="line">        p_run_works = Process(target=self.works.async_run,</span><br><span class="line">                              args=(self.bridge, ))</span><br><span class="line">        p_run_works.start()</span><br><span class="line">        p_run_works.join()</span><br></pre></td></tr></table></figure><ol start="3"><li>修改主函数 <code>main</code> 传入任务列表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    work_lst = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        work_lst.append(Workshop())</span><br><span class="line">    app = App()</span><br><span class="line">    app.async_run(work_lst)</span><br></pre></td></tr></table></figure><p>修改至此，程序已可以正常运行</p><h4 id="增加按步骤运行函数的能力"><a href="#增加按步骤运行函数的能力" class="headerlink" title="增加按步骤运行函数的能力"></a>增加按步骤运行函数的能力</h4><p>到目前为止，我们的程序已经实现了传入任务列表并利用协程异步执行的功能，但还有一个问题需要解决：只能运行特定的方法，而爬取数据的处理往往需要经过很多步骤。</p><p>为了解决这个问题，我们在 <code>Workshop</code> 类中提供一个统一的函数运行接口 <code>run_next_process</code>，每个函数运行结束后，设定好下次运行的函数，并返回实例自身或者需要运行的其他实例。同时修改 <code>Works</code> 类，使其获得返回的实例后将返回的实例再次传入队列中，以便下次调用。</p><ol><li>修改 <code>Workshop</code> 类</li></ol><p>增加了 <code>_next_process</code> 属性、<code>set_start_process</code> 方法、<code>set_next_process</code> 方法、<code>set_end</code> 方法、<code>is_end</code> 方法、<code>run_next_process</code> 方法。</p><p><code>_next_process</code> 属性：用于存储下一步需要调用的函数，初始化为 <code>None</code>。</p><p><code>set_start_process</code> 方法：需要在实例化同时调用，设定程序第一个调用的函数。</p><p><code>set_next_process</code> 方法：在程序运行时调用，设定下一个调用的函数。</p><p><code>set_end</code> 方法：将 <code>_next_process</code> 属性设置为 <code>\EOF</code>，标记所有流程均完成。</p><p><code>is_end</code> 方法：返回流程是否全部结束。</p><p><code>run_next_process</code> 方法：调用当前设定的函数，得到异步调用返回的实例并返回，如果无返回值，则返回当前实例自身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._next_process = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_start_process</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self._next_process = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_next_process</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self._next_process = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._next_process = <span class="string">&quot;/EOF&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._next_process == <span class="string">&quot;/EOF&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_next_process</span>(<span class="params">self</span>):</span></span><br><span class="line">        workshop = <span class="keyword">await</span> self._next_process()</span><br><span class="line">        <span class="keyword">if</span> workshop:</span><br><span class="line">            <span class="keyword">return</span> workshop</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><ol start="2"><li>继承 <code>Workshop</code> 类创建  <code>MyWorkshop</code> 类，在其中编写业务业务代码，控制流程。</li></ol><p><code>async_simulation</code> 方法：模拟第一个异步操作，在其中调用<code>set_next_process</code> 方法设定下一个需要调用的函数。</p><p><code>print_end</code> 方法：模拟第二步操作，在其中调用 <code>set_end</code> 方法设定流程结束。</p><blockquote><p>注意：所有的业务流程函数均需要为异步函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorkshop</span>(<span class="params">Workshop</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.set_start_process(self.async_simulation)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_simulation</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 模拟一个异步操作，随机停顿1-3秒</span></span><br><span class="line">        sleep_time = randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        print(<span class="string">&quot;等待&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>(sleep_time))</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(sleep_time)</span><br><span class="line">        self.set_next_process(self.print_end)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 模拟第二步操作</span></span><br><span class="line">        print(<span class="string">&quot;End&quot;</span>)</span><br><span class="line">        self.set_end()</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 <code>Bridge</code> 类</li></ol><p>因为任务 <code>workshop</code> 需要再次进入任务队列中，所以在 <code>Works</code> 类中不能再用 <code>work_queue</code> 是否为空来判断程序是否应该结束了，因此对 <code>Bridge</code> 类进行一些改造，添加运行任务计数，并提供是否应该结束程序的判断函数。</p><p>在保持原有属性和方法不变的情况下，增加 <code>config_dict</code> 属性、<code>init_config</code> 方法、<code>flag_start</code> 方法、<code>work_end</code> 方法、<code>work_cnt_increase</code> 方法、<code>work_cnt_decrease</code> 方法，修改 <code>add_works</code> 方法。</p><p><code>config_dict</code> 属性：记录运行过程中的一些关键数据，如正在运行的任务数量 <code>running_work_cnt</code>、任务开始标记 <code>work_start_flag</code>，通过 <code>init_config</code> 方法初始化。因为这些常数数据在进入不同进程时会复制一份新数据，因此常数数据共享应该在可变数据类型下共享，比如这里采用 <code>dict</code> 共享数据。</p><p><code>flag_start</code> 方法：在程序最开始运行时调用，标记程序已开始运行</p><p><code>work_end</code> 方法：返回程序是否完全结束，判断方法为 <code>work_start_flag</code> 标记为 <code>True</code> 且 <code>running_work_cnt</code> 为 <code>0</code>。</p><p><code>work_cnt_increase</code> 方法：标记正在运行中的任务增加。</p><p><code>work_cnt_decrease</code> 方法：标记正在运行中的任务减少。</p><p>修改 <code>init_works</code> 方法：接收 <code>workshop</code> 列表，将其压入任务队列，入队时调用 <code>self.bridge.work_cnt_increase()</code> 方法增加正在运行的程序计数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        manager = Manager()</span><br><span class="line">        self.work_queue = manager.Queue()</span><br><span class="line">        self.config_dict = manager.<span class="built_in">dict</span>()</span><br><span class="line">        self.init_config()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_works</span>(<span class="params">self, workshop_lst</span>):</span></span><br><span class="line">        <span class="keyword">for</span> workshop <span class="keyword">in</span> workshop_lst:</span><br><span class="line">            self.put_work_queue(workshop)</span><br><span class="line">            self.work_cnt_increase()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_config</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] = <span class="number">0</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flag_start</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>]\</span><br><span class="line">               <span class="keyword">and</span> <span class="keyword">not</span> self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_cnt_increase</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_cnt_decrease</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] -= <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改 <code>Works</code> 类</li></ol><p>我们已经修改 <code>Workshop</code> 类使其每次运行完一个方法后，返回实例自身，因此需要修改 <code>run_works</code> 方法，拿到返回实例，并视情况将其重新加入队列。增加 <code>distribute_works</code> 方法处理返回的实例。并在  <code>distribute_works</code> 方法中处理运行中程序的计数问题。</p><p><code>run_works</code> 方法：修改循环条件，由 <code>not bridge.work_queue_empty()</code> 变为 <code>not bridge.work_end()</code>。<code>await task</code> 后调用 <code>distribute_works</code> 方法处理返回的实例。<code>asyncio.create_task</code> 中调用 <code>Workshop</code> 的 <code>run_next_process()</code> 方法。</p><p><code>distribute_works</code> 方法：调用 <code>Workshop</code> 的 <code>is_end()</code> 方法判断是否已完成所有流程，如未完成，任务重新入队，如已完成，调用 <code>bridge.work_cnt_decrease()</code> 减少正在运行的程序计数。</p><p>最后，在 <code>run_works</code> 方法中调用 <code>bridge.flag_start()</code> 方法标记程序开始运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Works</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distribute_works</span>(<span class="params">self, task</span>):</span></span><br><span class="line">        workshop = task.result()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> workshop.is_end():</span><br><span class="line">            self.bridge.put_work_queue(workshop)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.bridge.work_cnt_decrease()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_works</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge.flag_start()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_end():</span><br><span class="line">            task_lst = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_queue_empty():</span><br><span class="line">                workshop = self.bridge.get_work_queue()</span><br><span class="line">                task = asyncio.create_task(workshop.run_next_process())</span><br><span class="line">                task_lst.append(task)</span><br><span class="line">            <span class="keyword">for</span> task <span class="keyword">in</span> task_lst:</span><br><span class="line">                <span class="keyword">await</span> task</span><br><span class="line">                self.distribute_works(task)</span><br></pre></td></tr></table></figure><ol start="5"><li>修改 <code>main</code> 主函数</li></ol><p>用 <code>MyWorkshop()</code> 代替 <code>Workshop()</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    work_lst = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        work_lst.append(MyWorkshop())</span><br><span class="line">    app = App()</span><br><span class="line">    app.async_run(work_lst)</span><br></pre></td></tr></table></figure><p>此时，程序能够正常运行，并按顺序调用业务流程函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 运行结果</span><br><span class="line">等待1秒</span><br><span class="line">等待1秒</span><br><span class="line">等待3秒</span><br><span class="line">End</span><br><span class="line">End</span><br><span class="line">End</span><br><span class="line">运行时间：3.01s</span><br></pre></td></tr></table></figure><p>至此，我们成功的在多进程中利用协程实现了多任务异步执行和多流程次序执行，将来可以通过增减进程的方式灵活的调节速率。</p><h4 id="本节完整代码"><a href="#本节完整代码" class="headerlink" title="本节完整代码"></a>本节完整代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_run_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># 记录运行程序运行时间的装饰器</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)    </span><span class="comment"># 保持被装饰的函数名不变，否则多进程调用出错</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        f = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">&quot;运行时间：&#123;:.2f&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        manager = Manager()</span><br><span class="line">        self.work_queue = manager.Queue()</span><br><span class="line">        self.config_dict = manager.<span class="built_in">dict</span>()</span><br><span class="line">        self.init_config()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_works</span>(<span class="params">self, workshop_lst</span>):</span></span><br><span class="line">        <span class="keyword">for</span> workshop <span class="keyword">in</span> workshop_lst:</span><br><span class="line">            self.put_work_queue(workshop)</span><br><span class="line">            self.work_cnt_increase()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_config</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] = <span class="number">0</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flag_start</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.config_dict[<span class="string">&quot;work_start_flag&quot;</span>] \</span><br><span class="line">               <span class="keyword">and</span> <span class="keyword">not</span> self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_cnt_increase</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_cnt_decrease</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.config_dict[<span class="string">&quot;running_work_cnt&quot;</span>] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_work_queue</span>(<span class="params">self, workshop</span>):</span></span><br><span class="line">        self.work_queue.put_nowait(workshop)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_work_queue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.work_queue.get_nowait()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_queue_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.work_queue.empty()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workshop</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._next_process = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_start_process</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self._next_process = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_next_process</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self._next_process = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._next_process = <span class="string">&quot;/EOF&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._next_process == <span class="string">&quot;/EOF&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_next_process</span>(<span class="params">self</span>):</span></span><br><span class="line">        workshop = <span class="keyword">await</span> self._next_process()</span><br><span class="line">        <span class="keyword">if</span> workshop:</span><br><span class="line">            <span class="keyword">return</span> workshop</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorkshop</span>(<span class="params">Workshop</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.set_start_process(self.async_simulation)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_simulation</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 模拟一个异步操作，随机停顿1-3秒</span></span><br><span class="line">        sleep_time = randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        print(<span class="string">&quot;等待&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>(sleep_time))</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(sleep_time)</span><br><span class="line">        self.set_next_process(self.print_end)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_end</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 模拟第二步操作</span></span><br><span class="line">        print(<span class="string">&quot;End&quot;</span>)</span><br><span class="line">        self.set_end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Works</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distribute_works</span>(<span class="params">self, task</span>):</span></span><br><span class="line">        workshop = task.result()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> workshop.is_end():</span><br><span class="line">            self.bridge.put_work_queue(workshop)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.bridge.work_cnt_decrease()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_works</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bridge.flag_start()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_end():</span><br><span class="line">            task_lst = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> self.bridge.work_queue_empty():</span><br><span class="line">                workshop = self.bridge.get_work_queue()</span><br><span class="line">                task = asyncio.create_task(workshop.run_next_process())</span><br><span class="line">                task_lst.append(task)</span><br><span class="line">            <span class="keyword">for</span> task <span class="keyword">in</span> task_lst:</span><br><span class="line">                <span class="keyword">await</span> task</span><br><span class="line">                self.distribute_works(task)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @print_run_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, bridge</span>):</span></span><br><span class="line">        self.bridge = bridge</span><br><span class="line">        asyncio.run(self.run_works())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.works = Works()</span><br><span class="line">        self.bridge = Bridge()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_run</span>(<span class="params">self, workshop_lst</span>):</span></span><br><span class="line">        self.bridge.init_works(workshop_lst)</span><br><span class="line">        p_run_works = Process(target=self.works.async_run,</span><br><span class="line">                              args=(self.bridge, ))</span><br><span class="line">        p_run_works.start()</span><br><span class="line">        p_run_works.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    work_lst = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        work_lst.append(MyWorkshop())</span><br><span class="line">    app = App()</span><br><span class="line">    app.async_run(work_lst)</span><br></pre></td></tr></table></figure><h4 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h4><p>在本节中，我们成功的在多进程中利用协程实现了多任务异步执行和多流程按次序执行，将来可以通过增减进程的方式灵活的调节速率，本文开头的目标第2、3点已基本完成。下一节将继续改造代码，增加网页请求功能，实现一个简单的异步爬虫，实现每次爬新网页只需要关注网络请求、网页解析和数据处理，多进程和异步请求部分由爬虫自身处理。</p>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> aiohttp </tag>
            
            <tag> 多进程 </tag>
            
            <tag> 协程 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1017 A除以B (20)</title>
      <link href="2018/02/04/PAT(Basic%20Level)%201017%20A%E9%99%A4%E4%BB%A5B%20(20)/"/>
      <url>2018/02/04/PAT(Basic%20Level)%201017%20A%E9%99%A4%E4%BB%A5B%20(20)/</url>
      
        <content type="html"><![CDATA[<p>本题要求计算A/B，其中A是不超过1000位的正整数，B是1位正整数。你需要输出商数Q和余数R，使得A = B * Q + R成立。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>100 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>本题要求计算A/B，其中A是不超过1000位的正整数，B是1位正整数。你需要输出商数Q和余数R，使得A = B * Q + R成立。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入在1行中依次给出A和B，中间以1空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>在1行中依次输出Q和R，中间以1空格分隔。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>123456789050987654321 7</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>17636684150141093474 3</code></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    char A[1000];</span><br><span class="line">    int B, quotient, remainder, tmp &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%s %d&quot;, A, &amp;B);</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0; i &lt; strlen(A); i++) &#123;</span><br><span class="line">        if ( tmp ) &#123;</span><br><span class="line">            tmp &#x3D; tmp * 10 + (A[i] - &#39;0&#39;);</span><br><span class="line">            quotient &#x3D; tmp &#x2F; B;</span><br><span class="line">            remainder &#x3D; tmp % B;</span><br><span class="line">            printf(&quot;%d&quot;, quotient);</span><br><span class="line">            tmp &#x3D; remainder;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int t &#x3D; A[i] - &#39;0&#39;;</span><br><span class="line">            quotient &#x3D; t &#x2F; B;</span><br><span class="line">            remainder &#x3D; t % B;</span><br><span class="line">            if ( i&#x3D;&#x3D;0 &amp;&amp; strlen(A)&gt;1 &amp;&amp; quotient&#x3D;&#x3D;0 ) &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果第一位是 0，不输出</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                printf(&quot;%d&quot;, quotient);</span><br><span class="line">            &#125;</span><br><span class="line">            tmp &#x3D; remainder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot; %d&quot;, tmp);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A, B &#x3D; input().split()</span><br><span class="line">quotient &#x3D; int(A) &#x2F;&#x2F; int(B)</span><br><span class="line">remainder &#x3D; int(A) % int(B)</span><br><span class="line">print(quotient, remainder)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1016 部分A+B (15)</title>
      <link href="2018/02/04/PAT(Basic%20Level)%201016%20%E9%83%A8%E5%88%86A%20B%20(15)/"/>
      <url>2018/02/04/PAT(Basic%20Level)%201016%20%E9%83%A8%E5%88%86A%20B%20(15)/</url>
      
        <content type="html"><![CDATA[<p>正整数A的“DA（为1位整数）部分”定义为由A中所有DA组成的新整数PA。例如：给定A = 3862767，DA = 6，则A的“6部分”PA是66，因为A中有2个6。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>100 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>正整数A的“DA（为1位整数）部分”定义为由A中所有DA组成的新整数PA。例如：给定A = 3862767，DA = 6，则A的“6部分”PA是66，因为A中有2个6。</p><p>现给定A、DA、B、DB，请编写程序计算PA + PB。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入在一行中依次给出A、DA、B、DB，中间以空格分隔，其中0 &lt; A, B &lt; 1010。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>在一行中输出PA + PB的值。</p><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h3><p><code>3862767 6 13530293 3</code></p><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h3><p><code>399</code></p><h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h3><p><code>3862767 1 13530293 8</code></p><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h3><p><code>0</code></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int p_search(char S[], int n) &#123;</span><br><span class="line">    int out&#x3D;0;</span><br><span class="line">    for ( int i&#x3D;0; i&lt;strlen(S); i++ ) &#123;</span><br><span class="line">        if ((S[i]-&#39;0&#39;) &#x3D;&#x3D; n) &#123;</span><br><span class="line">            out &#x3D; 10*out + n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    char A[10], B[10];</span><br><span class="line">    int Da, Db;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%s %d %s %d&quot;, A, &amp;Da, B, &amp;Db);</span><br><span class="line">    printf(&quot;%d&quot;, p_search(A, Da) + p_search(B, Db));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def p_search(A, D):</span><br><span class="line">    num &#x3D; 0</span><br><span class="line">    for letter in A:</span><br><span class="line">        if D &#x3D;&#x3D; letter:</span><br><span class="line">            num +&#x3D; 1</span><br><span class="line">    if num:</span><br><span class="line">        return D * num</span><br><span class="line">    else:</span><br><span class="line">        return &#39;0&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    A, Da, B, Db &#x3D; input().split()</span><br><span class="line">    print(int(p_search(A, Da)) + int(p_search(B, Db)))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1014 福尔摩斯的约会 (20)</title>
      <link href="2017/11/13/PAT(Basic%20Level)%201014%20%E7%A6%8F%E5%B0%94%E6%91%A9%E6%96%AF%E7%9A%84%E7%BA%A6%E4%BC%9A%20(20)/"/>
      <url>2017/11/13/PAT(Basic%20Level)%201014%20%E7%A6%8F%E5%B0%94%E6%91%A9%E6%96%AF%E7%9A%84%E7%BA%A6%E4%BC%9A%20(20)/</url>
      
        <content type="html"><![CDATA[<p>大侦探福尔摩斯接到一张奇怪的字条：“我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm”。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>100 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>大侦探福尔摩斯接到一张奇怪的字条：“我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm”。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间“星期四 14:04”，因为前面两字符串中第1对相同的大写英文字母（大小写有区分）是第4个字母’D’，代表星期四；第2对相同的字符是’E’，那是第5个英文字母，代表一天里的第14个钟头（于是一天的0点到23点由数字0到9、以及大写字母A到N表示）；后面两字符串第1对相同的英文字母’s’出现在第4个位置（从0开始计数）上，代表第4分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入在4行中分别给出4个非空、不包含空格、且长度不超过60的字符串。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>在一行中输出约会的时间，格式为“DAY HH:MM”，其中“DAY”是某星期的3字符缩写，即MON表示星期一，TUE表示星期二，WED表示星期三，THU表示星期四，FRI表示星期五，SAT表示星期六，SUN表示星期日。题目输入保证每个测试存在唯一解。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djDkxh4hhGE </span><br><span class="line">2984akDfkkkkggEdsb </span><br><span class="line">s&amp;hgsfdk </span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">char* read_line() &#123;</span><br><span class="line">    char *string;</span><br><span class="line">    string &#x3D; (char*)malloc(60 * sizeof(char));</span><br><span class="line">    scanf(&quot;%s&quot;, string);</span><br><span class="line">    return string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void judgment_1( char *string_1, const char *string_2 ) &#123;</span><br><span class="line">    int i;</span><br><span class="line">    char week[] &#x3D; &quot;MONTUEWEDTHUFRISATSUN&quot;;</span><br><span class="line"></span><br><span class="line">    for ( i&#x3D;0; i&lt;60; i++)&#123;</span><br><span class="line">        if ( string_1[i] &#x3D;&#x3D; string_2[i] ) &#123;</span><br><span class="line">            int day &#x3D; string_1[i]-&#39;A&#39;;</span><br><span class="line">            if ( day&gt;&#x3D;0 &amp;&amp; day&lt;7 ) &#123;</span><br><span class="line">                printf(&quot;%c%c%c &quot;, week[3*day], week[3*day+1], week[3*day+2]);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i++;    &#x2F;&#x2F; 移动i到下一个，否则还是之前找到的那对大写字母。</span><br><span class="line"></span><br><span class="line">    for ( ; i&lt;60; i++ ) &#123;</span><br><span class="line">        if ( string_1[i] &#x3D;&#x3D; string_2[i] ) &#123;</span><br><span class="line">            if ( string_1[i]-&#39;0&#39;&gt;&#x3D;0 &amp;&amp; string_1[i]-&#39;0&#39;&lt;&#x3D;9 ) &#123;</span><br><span class="line">                printf(&quot;%02d:&quot;, string_1[i]-&#39;0&#39;);</span><br><span class="line">                break;</span><br><span class="line">            &#125; else if ( string_1[i]-&#39;A&#39;&gt;&#x3D;0 &amp;&amp; string_1[i]-&#39;A&#39;&lt;&#x3D;14 ) &#123;</span><br><span class="line">                printf(&quot;%02d:&quot;, string_1[i]-&#39;A&#39;+10);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void judgment_2( const char *string_1, const char *string_2 ) &#123;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    for ( i&#x3D;0; i&lt;60; i++ ) &#123;</span><br><span class="line">        if ( string_1[i] &#x3D;&#x3D; string_2[i] ) &#123;</span><br><span class="line">            int flag &#x3D; string_1[i] - &#39;A&#39;;</span><br><span class="line">            if ( flag&gt;&#x3D;0 &amp;&amp; flag&lt;26 ) &#123;</span><br><span class="line">                printf(&quot;%02d&quot;, i);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            flag &#x3D; string_1[i] - &#39;a&#39;;</span><br><span class="line">            if ( flag&gt;&#x3D;0 &amp;&amp; flag&lt;26 ) &#123;</span><br><span class="line">                printf(&quot;%02d&quot;, i);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    char *secret_code_1, *secret_code_2;</span><br><span class="line"></span><br><span class="line">    secret_code_1 &#x3D; read_line();</span><br><span class="line">    secret_code_2 &#x3D; read_line();</span><br><span class="line">    judgment_1(secret_code_1, secret_code_2);</span><br><span class="line">    free(secret_code_1); free(secret_code_2);</span><br><span class="line"></span><br><span class="line">    secret_code_1 &#x3D; read_line();</span><br><span class="line">    secret_code_2 &#x3D; read_line();</span><br><span class="line">    judgment_2(secret_code_1, secret_code_2);</span><br><span class="line">    free(secret_code_1); free(secret_code_2);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-图1 列出连通集（25 分）</title>
      <link href="2017/11/02/06-%E5%9B%BE1%20%E5%88%97%E5%87%BA%E8%BF%9E%E9%80%9A%E9%9B%86%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
      <url>2017/11/02/06-%E5%9B%BE1%20%E5%88%97%E5%87%BA%E8%BF%9E%E9%80%9A%E9%9B%86%EF%BC%8825%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>给定一个有N个顶点和E条边的无向图，请用DFS和BFS分别列出其所有的连通集。假设顶点从0到N−1编号。进行搜索时，假设我们总是从编号最小的顶点出发，按编号递增的顺序访问邻接点。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入第1行给出2个整数<code>N(0&lt;N≤10)</code>和E，分别是图的顶点数和边数。随后E行，每行给出一条边的两个端点。每行中的数字之间用1空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>按照”{ v1 v2 … vk}”的格式，每行输出一个连通集。先输出DFS的结果，再输出BFS的结果。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">8 6</span><br><span class="line">0 7</span><br><span class="line">0 1</span><br><span class="line">2 0</span><br><span class="line">4 1</span><br><span class="line">2 4</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; 0 1 4 2 7 &#125;</span><br><span class="line">&#123; 3 5 &#125;</span><br><span class="line">&#123; 6 &#125;</span><br><span class="line">&#123; 0 1 2 7 4 &#125;</span><br><span class="line">&#123; 3 5 &#125;</span><br><span class="line">&#123; 6 &#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#define MaxVertexNum 11</span><br><span class="line">typedef int Vertex;</span><br><span class="line">Vertex Visited[MaxVertexNum];</span><br><span class="line"></span><br><span class="line">typedef struct GNode *PtrToGNode;   &#x2F;&#x2F; 图节点</span><br><span class="line">struct GNode &#123;</span><br><span class="line">int Nv;</span><br><span class="line">int Ne;</span><br><span class="line">int G[MaxVertexNum][MaxVertexNum];</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToGNode MGraph;</span><br><span class="line"></span><br><span class="line">MGraph CreateGraph( int VertexNum ) &#123;   &#x2F;&#x2F; 初始化图</span><br><span class="line">Vertex V, W;</span><br><span class="line">MGraph Graph;</span><br><span class="line">Graph &#x3D; (MGraph)malloc(sizeof(struct GNode));</span><br><span class="line">Graph-&gt;Nv &#x3D; VertexNum;</span><br><span class="line">Graph-&gt;Ne &#x3D; 0;</span><br><span class="line">for ( V&#x3D;0; V&lt;Graph-&gt;Nv; V++ ) &#123;</span><br><span class="line">for ( W&#x3D;0; W&lt;Graph-&gt;Nv; W++ ) &#123;</span><br><span class="line">Graph-&gt;G[V][W] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return Graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typedef struct ENode *PtrToENode;</span><br><span class="line">struct ENode &#123;  &#x2F;&#x2F; 边节点</span><br><span class="line">Vertex V1, V2;</span><br><span class="line">int Weight;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToENode Edge;</span><br><span class="line"></span><br><span class="line">void InsertEdge( MGraph Graph, Edge E ) &#123;   &#x2F;&#x2F; 给边赋权重</span><br><span class="line">Graph-&gt;G[E-&gt;V1][E-&gt;V2] &#x3D; E-&gt;Weight;</span><br><span class="line">Graph-&gt;G[E-&gt;V2][E-&gt;V1] &#x3D; E-&gt;Weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MGraph BuildGraph() &#123;   &#x2F;&#x2F; 根据题目建立图</span><br><span class="line">MGraph Graph;</span><br><span class="line">Edge E;</span><br><span class="line">Vertex V;</span><br><span class="line">int Nv, i;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;Nv);</span><br><span class="line">Graph &#x3D; CreateGraph(Nv);</span><br><span class="line">scanf(&quot;%d&quot;, &amp;(Graph-&gt;Ne));</span><br><span class="line">if ( Graph-&gt;Ne !&#x3D; 0 ) &#123;</span><br><span class="line">E &#x3D; (Edge)malloc(sizeof(struct ENode));</span><br><span class="line">for ( i&#x3D;0; i&lt;Graph-&gt;Ne; i++ ) &#123;</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;E-&gt;V1, &amp;E-&gt;V2);</span><br><span class="line">E-&gt;Weight &#x3D; 1;</span><br><span class="line">InsertEdge( Graph, E );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return Graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void DFS ( MGraph Graph , Vertex V) &#123;   &#x2F;&#x2F; 深度遍历</span><br><span class="line">Visited[V] &#x3D; 1;</span><br><span class="line">printf(&quot;%d &quot;, V);</span><br><span class="line">for ( Vertex j&#x3D;0; j&lt;Graph-&gt;Nv; j++ ) &#123;</span><br><span class="line">if ( Graph-&gt;G[V][j] &#x3D;&#x3D; 1 &amp;&amp; Visited[j] &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">DFS(Graph, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct &#123;    &#x2F;&#x2F; 创建队列节点</span><br><span class="line">Vertex Vert[MaxVertexNum];</span><br><span class="line">int rear;</span><br><span class="line">int front;</span><br><span class="line">&#125; Q;</span><br><span class="line"></span><br><span class="line">void CreateQ() &#123;    &#x2F;&#x2F; 初始化队列</span><br><span class="line">    Q.rear &#x3D; 0;</span><br><span class="line">    Q.front &#x3D; 0;</span><br><span class="line">    for ( int i&#x3D;0; i&lt;MaxVertexNum; i++ ) &#123;</span><br><span class="line">        Q.Vert[i] &#x3D; -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void AddQ(Vertex V) &#123;   &#x2F;&#x2F; 队列push节点</span><br><span class="line">if ( (Q.rear+1) % MaxVertexNum &#x3D;&#x3D; Q.front ) &#123;</span><br><span class="line">printf(&quot;The queue is full.\n&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Q.rear &#x3D; (Q.rear+1) % MaxVertexNum;</span><br><span class="line">Q.Vert[Q.rear] &#x3D; V;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vertex DelQ() &#123; &#x2F;&#x2F; 队列pop节点</span><br><span class="line">if ( Q.front &#x3D;&#x3D; Q.rear ) &#123;</span><br><span class="line">printf(&quot;The queue is empty.\n&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Q.front &#x3D; (Q.front+1) % MaxVertexNum;</span><br><span class="line">return Q.Vert[Q.front];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void BFS ( MGraph Graph , Vertex V ) &#123;  &#x2F;&#x2F; 广度遍历</span><br><span class="line">    Vertex T;</span><br><span class="line">    AddQ(V);</span><br><span class="line">    Visited[V] &#x3D; 1;</span><br><span class="line">    while ( Q.front !&#x3D; Q.rear ) &#123;</span><br><span class="line">        T &#x3D; DelQ();</span><br><span class="line">        printf(&quot;%d &quot;, T);</span><br><span class="line">        for ( Vertex j&#x3D;0; j&lt;Graph-&gt;Nv; j++ ) &#123;</span><br><span class="line">            if ( Graph-&gt;G[T][j] &#x3D;&#x3D; 1 &amp;&amp; Visited[j] &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">                AddQ(j);</span><br><span class="line">                Visited[j] &#x3D; 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InitVisit() &#123;  &#x2F;&#x2F; 标记节点是否被访问过。此为初始化。</span><br><span class="line">    for ( int i&#x3D;0; i&lt;MaxVertexNum; i++ ) Visited[i] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">MGraph Graph;</span><br><span class="line">Graph &#x3D; BuildGraph();</span><br><span class="line"></span><br><span class="line">Vertex V &#x3D; 0;</span><br><span class="line">    InitVisit();</span><br><span class="line">for ( V&#x3D;0; V&lt;Graph-&gt;Nv; V++ ) &#123;</span><br><span class="line">if ( Visited[V] &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">printf(&quot;&#123; &quot;);</span><br><span class="line">DFS ( Graph, V);</span><br><span class="line">printf(&quot;&#125;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    CreateQ();</span><br><span class="line">    InitVisit();</span><br><span class="line">    for ( V&#x3D;0; V&lt;Graph-&gt;Nv; V++ ) &#123;</span><br><span class="line">        if ( Visited[V] &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">            printf(&quot;&#123; &quot;);</span><br><span class="line">            BFS ( Graph, V);</span><br><span class="line">            printf(&quot;&#125;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-树7 堆中的路径（25 分）</title>
      <link href="2017/10/23/05-%E6%A0%917%20%E5%A0%86%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
      <url>2017/10/23/05-%E6%A0%917%20%E5%A0%86%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%8825%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>将一系列给定数字插入一个初始为空的小顶堆H[]。随后对任意给定的下标i，打印从H[i]到根结点的路径。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每组测试第1行包含2个正整数N和M(≤1000)，分别是插入元素的个数、以及需要打印的路径条数。下一行给出区间[-10000, 10000]内的N个要被插入一个初始为空的小顶堆的整数。最后一行给出M个下标。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对输入中给出的每个下标i，在一行中输出从H[i]到根结点的路径上的数据。数字间以1个空格分隔，行末不得有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">46 23 26 24 10</span><br><span class="line">5 4 3</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24 23 10</span><br><span class="line">46 23 10</span><br><span class="line">26 10</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define MAXN 1001</span><br><span class="line">#define MINH -10001</span><br><span class="line"></span><br><span class="line">int H[MAXN], size;</span><br><span class="line"></span><br><span class="line">void Create() &#123;</span><br><span class="line">size &#x3D; 0;</span><br><span class="line">H[0] &#x3D; MINH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Insert (int X) &#123;</span><br><span class="line">int i;</span><br><span class="line">for ( i&#x3D;++size; H[i&#x2F;2] &gt; X; i&#x2F;&#x3D;2 ) &#123;</span><br><span class="line">H[i] &#x3D; H[i&#x2F;2];</span><br><span class="line">&#125;</span><br><span class="line">H[i] &#x3D; X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int n, m, x, i, j;</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</span><br><span class="line">Create();</span><br><span class="line">for ( i &#x3D; 0; i&lt;n; i++ ) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;x);</span><br><span class="line">Insert(x);</span><br><span class="line">&#125;</span><br><span class="line">for ( i&#x3D;0; i&lt;m; i++ ) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;j);</span><br><span class="line">printf(&quot;%d&quot;, H[j]);</span><br><span class="line">while( j&gt;1 ) &#123;</span><br><span class="line">j &#x2F;&#x3D; 2;</span><br><span class="line">printf(&quot; %d&quot;, H[j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-树3 Tree Traversals Again（25 分）</title>
      <link href="2017/09/24/03-%E6%A0%913%20Tree%20Traversals%20Again%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
      <url>2017/09/24/03-%E6%A0%913%20Tree%20Traversals%20Again%EF%BC%8825%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree.</p><p>Figure 1<br><img src="https://images.ptausercontent.com/30"></p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer N (≤30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N). Then 2N lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">Push 1</span><br><span class="line">Push 2</span><br><span class="line">Push 3</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br><span class="line">Push 4</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br><span class="line">Push 5</span><br><span class="line">Push 6</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 2 6 5 1</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">本题本质上是已知前序中序遍历，求后序遍历的问题。</span><br><span class="line">在输入的时候有如下规律：</span><br><span class="line">1、第一个push进来的是整个树的根节点。</span><br><span class="line">2、若本次操作为push，且上次操作为push，则本次push的节点是上次push节点的左儿子。</span><br><span class="line">3、若本次操作为push，且上次操作为pop，则本次push节点是上次pop出来节点的右儿子。</span><br><span class="line">4、若本次操作为pop，且上次操作为push，则本次push节点是叶节点。</span><br><span class="line">5、若本次操作为pop，且上次操作为pop，无节点设置。 </span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#define MaxTree 30</span><br><span class="line">#define Null -1</span><br><span class="line"></span><br><span class="line">int A[MaxTree];&#x2F;&#x2F; 用于记录递归后序遍历得到的节点号 </span><br><span class="line">int Aindex &#x3D; 0;</span><br><span class="line"></span><br><span class="line">struct TreeNode &#123;</span><br><span class="line">int Left;</span><br><span class="line">int Right;</span><br><span class="line">&#125; T[MaxTree];</span><br><span class="line"></span><br><span class="line">struct Stack &#123;</span><br><span class="line">int TreeNodes[MaxTree];</span><br><span class="line">int front;</span><br><span class="line">&#125; S;</span><br><span class="line"></span><br><span class="line">void InitStack() &#123;</span><br><span class="line">for ( int i&#x3D;0; i&lt;MaxTree; i++ ) &#123;</span><br><span class="line">S.TreeNodes[i] &#x3D; Null;</span><br><span class="line">&#125;</span><br><span class="line">S.front &#x3D; MaxTree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InitTree() &#123;</span><br><span class="line">for ( int i&#x3D;0; i&lt;MaxTree; i++ ) &#123;</span><br><span class="line">T[i].Left &#x3D; Null;</span><br><span class="line">T[i].Right &#x3D; Null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Push(int R) &#123;</span><br><span class="line">if ( S.front ) &#123;</span><br><span class="line">S.front--;</span><br><span class="line">S.TreeNodes[S.front] &#x3D; R;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Stack full\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Pop() &#123;</span><br><span class="line">int output;</span><br><span class="line">if ( S.front &lt; MaxTree ) &#123;</span><br><span class="line">output &#x3D; S.TreeNodes[S.front];</span><br><span class="line">S.front++;</span><br><span class="line">return output;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Stack empty&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void PostOrderTraversal(int Root) &#123;</span><br><span class="line">if ( Root!&#x3D;Null ) &#123;</span><br><span class="line">PostOrderTraversal(T[Root].Left);</span><br><span class="line">PostOrderTraversal(T[Root].Right);</span><br><span class="line">A[Aindex++] &#x3D; Root;&#x2F;&#x2F; 递归后序遍历需要一个全局变量储存得到的节点号 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int N;&#x2F;&#x2F; 输入的节点数 </span><br><span class="line">int Root;&#x2F;&#x2F; 标记整个树的根节点 </span><br><span class="line">int RootFlag &#x3D; 0;&#x2F;&#x2F; 标记整个树的根节点是否已存在 </span><br><span class="line">int record &#x3D; 0;&#x2F;&#x2F; 记录每次push和pop的节点 </span><br><span class="line">int pushpop &#x3D; 1;&#x2F;&#x2F; 记录上次操作，1代表push，0代表pop </span><br><span class="line">InitTree();</span><br><span class="line">InitStack();</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;N);</span><br><span class="line">for ( int i&#x3D;0; i&lt;2*N; i++ ) &#123;</span><br><span class="line">char operation[10]; </span><br><span class="line">int R;</span><br><span class="line">scanf(&quot;%s&quot;, operation);</span><br><span class="line">if ( strcmp(operation, &quot;Push&quot;) &#x3D;&#x3D; 0 ) &#123; &#x2F;&#x2F; 本次操作push </span><br><span class="line">scanf(&quot;%d&quot;, &amp;R);</span><br><span class="line">if ( RootFlag ) &#123;&#x2F;&#x2F; 整个树根节点已存在时 </span><br><span class="line">if ( pushpop &#x3D;&#x3D; 1 ) &#123;&#x2F;&#x2F; 右儿子 </span><br><span class="line">T[record].Left &#x3D; R;</span><br><span class="line">&#125; else if ( pushpop &#x3D;&#x3D; 0 ) &#123;&#x2F;&#x2F; 左儿子 </span><br><span class="line">T[record].Right &#x3D; R;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;&#x2F;&#x2F; 整个树根节点不存在时</span><br><span class="line">Root &#x3D; R;   &#x2F;&#x2F; 记录整个树的根节点</span><br><span class="line">RootFlag &#x3D; 1; </span><br><span class="line">&#125;</span><br><span class="line">Push(R);</span><br><span class="line">record &#x3D; R;&#x2F;&#x2F; 操作完成后更新记录节点为本次节点 </span><br><span class="line">pushpop &#x3D; 1;&#x2F;&#x2F; 更新操作状态为push </span><br><span class="line">&#125; else &#123;&#x2F;&#x2F; 本次操作pop </span><br><span class="line">R &#x3D; Pop();</span><br><span class="line">if ( pushpop &#x3D;&#x3D; 1 ) &#123;&#x2F;&#x2F; 叶节点 </span><br><span class="line">T[R].Left &#x3D; Null;</span><br><span class="line">T[R].Right &#x3D; Null;</span><br><span class="line">&#125; else if ( pushpop &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">record &#x3D; R;</span><br><span class="line">pushpop &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PostOrderTraversal(Root);</span><br><span class="line">if ( N ) &#123;</span><br><span class="line">printf(&quot;%d&quot;, A[0]);</span><br><span class="line">for ( int i&#x3D;1; i&lt;N; i++ ) &#123;</span><br><span class="line">printf(&quot; %d&quot;, A[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-树2 List Leaves（25 分）</title>
      <link href="2017/09/23/03-%E6%A0%912%20List%20Leaves%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
      <url>2017/09/23/03-%E6%A0%912%20List%20Leaves%EF%BC%8825%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Given a tree, you are supposed to list all the leaves in the order of top down, and left to right.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤10) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to N−1. Then N lines follow, each corresponds to a node, and gives the indices of the left and right children of the node. If the child does not exist, a “-“ will be put at the position. Any pair of children are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h3><p>For each test case, print in one line all the leaves’ indices in the order of top down, and left to right. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 -</span><br><span class="line">- -</span><br><span class="line">0 -</span><br><span class="line">2 7</span><br><span class="line">- -</span><br><span class="line">- -</span><br><span class="line">5 -</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 1 5</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define MaxTree 10</span><br><span class="line">#define MaxQueue 10</span><br><span class="line">#define ElementType int</span><br><span class="line">#define Tree int</span><br><span class="line">#define Null -1</span><br><span class="line"></span><br><span class="line">struct TreeNode &#123;</span><br><span class="line">Tree Left;</span><br><span class="line">Tree Right;</span><br><span class="line">&#125; T[MaxTree];</span><br><span class="line"></span><br><span class="line">struct QNode &#123;&#x2F;&#x2F; 结构中有Roots队列 </span><br><span class="line">Tree Roots[MaxQueue];</span><br><span class="line">int rear;</span><br><span class="line">int front;</span><br><span class="line">&#125; Q;</span><br><span class="line"></span><br><span class="line">Tree BuildTree(struct TreeNode T[]) &#123;&#x2F;&#x2F; 建立结构的数组，每个数组下标表示节点编号，每个节点储存节点编号，左右节点编号 </span><br><span class="line">Tree Root &#x3D; Null;</span><br><span class="line">char cl, cr;</span><br><span class="line">int N;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;N);</span><br><span class="line">int check[N];</span><br><span class="line">for ( int i&#x3D;0; i&lt;N; i++ ) &#123;</span><br><span class="line">check[i] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">if ( N ) &#123;</span><br><span class="line">for ( int i&#x3D;0; i&lt;N; i++ ) &#123;</span><br><span class="line">getchar();</span><br><span class="line">scanf(&quot; %c %c&quot;, &amp;cl, &amp;cr);</span><br><span class="line">if ( cl !&#x3D; &#39;-&#39;) &#123;</span><br><span class="line">T[i].Left &#x3D; cl - &#39;0&#39;;</span><br><span class="line">check[T[i].Left] &#x3D; 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">T[i].Left &#x3D; Null;</span><br><span class="line">&#125;</span><br><span class="line">if ( cr !&#x3D; &#39;-&#39; ) &#123;</span><br><span class="line">T[i].Right &#x3D; cr - &#39;0&#39;;</span><br><span class="line">check[T[i].Right] &#x3D; 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">T[i].Right &#x3D; Null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for ( int i&#x3D;0; i&lt;N; i++ ) &#123;</span><br><span class="line">if ( !check[i] ) &#123;</span><br><span class="line">Root &#x3D; i;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return Root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">void PreOrderTraversal(Tree Root) &#123;&#x2F;&#x2F; 树的前中后序遍历，本题用不到 </span><br><span class="line">if ( Root !&#x3D; Null ) &#123;</span><br><span class="line">if ( T[Root].Left&#x3D;&#x3D;Null &amp;&amp; T[Root].Right&#x3D;&#x3D;Null ) &#123;</span><br><span class="line">printf(&quot;%d &quot;, Root);</span><br><span class="line">&#125;</span><br><span class="line">PreOrderTraversal(T[Root].Left);</span><br><span class="line">PreOrderTraversal(T[Root].Right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">void AddQ(Tree Root) &#123;&#x2F;&#x2F; 加入队列 </span><br><span class="line">if ( (Q.rear+1) % MaxQueue &#x3D;&#x3D; Q.front ) &#123;</span><br><span class="line">printf(&quot;The queue is full\n&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Q.rear &#x3D; (Q.rear+1) % MaxQueue;</span><br><span class="line">Q.Roots[Q.rear] &#x3D; Root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree DeleteQ(Tree Root) &#123;&#x2F;&#x2F; 取出队列 </span><br><span class="line">if ( Q.front &#x3D;&#x3D; Q.rear ) &#123;</span><br><span class="line">printf(&quot;The queue is empty\n&quot;);</span><br><span class="line">return Null;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Q.front &#x3D; (Q.front+1) % MaxQueue;</span><br><span class="line">return Q.Roots[Q.front];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int IsEmptyQ() &#123;&#x2F;&#x2F; 判断队列是否为空 </span><br><span class="line">int check &#x3D; 0;</span><br><span class="line">if ( Q.front &#x3D;&#x3D; Q.rear ) &#123;</span><br><span class="line">check &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">return check;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void LevelOrderTraversal(Tree Root) &#123;&#x2F;&#x2F; 树的层序遍历 </span><br><span class="line">AddQ(Root);</span><br><span class="line">int flag &#x3D; 0;</span><br><span class="line">while ( !IsEmptyQ() ) &#123;</span><br><span class="line">Root &#x3D; DeleteQ(Root);</span><br><span class="line">if ( T[Root].Left &#x3D;&#x3D; Null &amp;&amp; T[Root].Right &#x3D;&#x3D; Null ) &#123;&#x2F;&#x2F; 只输出叶节点 </span><br><span class="line">if ( flag ) &#123; </span><br><span class="line">printf(&quot; %d&quot;, Root);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;%d&quot;, Root);</span><br><span class="line">flag &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if ( T[Root].Left !&#x3D; Null ) AddQ(T[Root].Left);</span><br><span class="line">if ( T[Root].Right !&#x3D; Null ) AddQ(T[Root].Right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">Tree R;</span><br><span class="line">R &#x3D; BuildTree(T);&#x2F;&#x2F; 建立节点构成的数组，数组下标表示节点编号，节点内储存左右节点编号。 </span><br><span class="line">LevelOrderTraversal(R);&#x2F;&#x2F; 层序遍历，按从上到下从左到右输出，只输出叶节点。 </span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-树1 树的同构（25 分）</title>
      <link href="2017/09/22/03-%E6%A0%911%20%E6%A0%91%E7%9A%84%E5%90%8C%E6%9E%84%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
      <url>2017/09/22/03-%E6%A0%911%20%E6%A0%91%E7%9A%84%E5%90%8C%E6%9E%84%EF%BC%8825%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>给定两棵树T1和T2。如果T1可以通过若干次左右孩子互换就变成T2，则我们称两棵树是“同构”的。现给定两棵树，请你判断它们是否是同构的。</p><p>给定两棵树T1和T2。如果T1可以通过若干次左右孩子互换就变成T2，则我们称两棵树是“同构”的。例如图1给出的两棵树就是同构的，因为我们把其中一棵树的结点A、B、G的左右孩子互换后，就得到另外一棵树。而图2就不是同构的。</p><p>图1<br><img src="https://images.ptausercontent.com/28"></p><p>图2<br><img src="https://images.ptausercontent.com/29"></p><p>现给定两棵树，请你判断它们是否是同构的。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入给出2棵二叉树树的信息。对于每棵树，首先在一行中给出一个非负整数N (≤10)，即该树的结点数（此时假设结点从0到N−1编号）；随后N行，第i行对应编号第i个结点，给出该结点中存储的1个英文大写字母、其左孩子结点的编号、右孩子结点的编号。如果孩子结点为空，则在相应位置上给出“-”。给出的数据间用一个空格分隔。注意：题目保证每个结点中存储的字母是不同的。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>如果两棵树是同构的，输出“Yes”，否则输出“No”。</p><h3 id="输入样例1（对应图1）"><a href="#输入样例1（对应图1）" class="headerlink" title="输入样例1（对应图1）"></a>输入样例1（对应图1）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">A 1 2</span><br><span class="line">B 3 4</span><br><span class="line">C 5 -</span><br><span class="line">D - -</span><br><span class="line">E 6 -</span><br><span class="line">G 7 -</span><br><span class="line">F - -</span><br><span class="line">H - -</span><br><span class="line">8</span><br><span class="line">G - 4</span><br><span class="line">B 7 6</span><br><span class="line">F - -</span><br><span class="line">A 5 1</span><br><span class="line">H - -</span><br><span class="line">C 0 -</span><br><span class="line">D - -</span><br><span class="line">E 2 -</span><br></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h3 id="输入样例2（对应图2）"><a href="#输入样例2（对应图2）" class="headerlink" title="输入样例2（对应图2）"></a>输入样例2（对应图2）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">B 5 7</span><br><span class="line">F - -</span><br><span class="line">A 0 3</span><br><span class="line">C 6 -</span><br><span class="line">H - -</span><br><span class="line">D - -</span><br><span class="line">G 4 -</span><br><span class="line">E 1 -</span><br><span class="line">8</span><br><span class="line">D 6 -</span><br><span class="line">B 5 -</span><br><span class="line">E - -</span><br><span class="line">H - -</span><br><span class="line">C 0 2</span><br><span class="line">G - 3</span><br><span class="line">F - -</span><br><span class="line">A 1 4</span><br></pre></td></tr></table></figure><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define MaxTree 10</span><br><span class="line">#define ElementType char</span><br><span class="line">#define Tree int</span><br><span class="line">#define Null -1</span><br><span class="line"></span><br><span class="line">struct TreeNode &#123;</span><br><span class="line">ElementType Element;</span><br><span class="line">Tree Left;</span><br><span class="line">Tree Right;</span><br><span class="line">&#125; T1[MaxTree], T2[MaxTree];</span><br><span class="line"></span><br><span class="line">Tree BuildTree(struct TreeNode T[]) &#123;</span><br><span class="line">int N;</span><br><span class="line">Tree Root &#x3D; Null;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;N);</span><br><span class="line">if ( N ) &#123;</span><br><span class="line">int check[MaxTree];</span><br><span class="line">int i;</span><br><span class="line">for ( i&#x3D;0; i&lt;MaxTree; i++ ) check[i] &#x3D; 0;</span><br><span class="line">for ( i&#x3D;0; i&lt;N; i++ ) &#123;</span><br><span class="line">char cl, cr; </span><br><span class="line">getchar();&#x2F;&#x2F; 读取缓冲区内容并丢弃。因为%c会读取遗留的回车导致下面的scanf读取到错误的信息 </span><br><span class="line">scanf(&quot; %c %c %c&quot;, &amp;T[i].Element, &amp;cl, &amp;cr);&#x2F;&#x2F; 如果上句不用getchar()，可以在第一个%前加空格，跳过回车这个空字符。 </span><br><span class="line">if ( cl !&#x3D; &#39;-&#39; ) &#123;</span><br><span class="line">T[i].Left &#x3D; cl - &#39;0&#39;;</span><br><span class="line">check[T[i].Left] &#x3D; 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">T[i].Left &#x3D; Null;</span><br><span class="line">&#125;</span><br><span class="line">if ( cr !&#x3D; &#39;-&#39; ) &#123;</span><br><span class="line">T[i].Right &#x3D; cr - &#39;0&#39;;</span><br><span class="line">check[T[i].Right] &#x3D; 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">T[i].Right &#x3D; Null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for ( i&#x3D;0; i&lt;N; i++ ) &#123;</span><br><span class="line">if ( !check[i] ) &#123;</span><br><span class="line">Root &#x3D; i;</span><br><span class="line">break;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return Root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int isomorphic(Tree R1, Tree R2) &#123;&#x2F;&#x2F; 前三个为递归结束的条件 </span><br><span class="line">&#x2F;&#x2F; 判断是不是有树 </span><br><span class="line">if ( (R1&#x3D;&#x3D;Null) &amp;&amp; (R2&#x3D;&#x3D;Null)) return 1;</span><br><span class="line">if ( ((R1&#x3D;&#x3D;Null) &amp;&amp; (R2!&#x3D;Null)) || ((R1!&#x3D;Null) &amp;&amp; (R2&#x3D;&#x3D;Null)) ) return 0;</span><br><span class="line">&#x2F;&#x2F; 判断树的根节点是不是一致 </span><br><span class="line">if ( (T1[R1].Element !&#x3D; T2[R2].Element) )  return 0; </span><br><span class="line">&#x2F;&#x2F; 如果左边都不存在，那么递归的看右边 </span><br><span class="line">if ( (T1[R1].Left&#x3D;&#x3D;Null) &amp;&amp; (T2[R2].Left&#x3D;&#x3D;Null) ) &#123;</span><br><span class="line">return isomorphic(T1[R1].Right, T2[R2].Right);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;  如果左边都存在，并且两个树的左边节点一致，那么递归的同时比较左边和右边。如果左右节点不一致，那么左边比较右边，右边比较左边。 </span><br><span class="line">if ( ((T1[R1].Left!&#x3D;Null) &amp;&amp; (T2[R2].Left!&#x3D;Null)) &amp;&amp; (T1[T1[R1].Left].Element &#x3D;&#x3D; T2[T2[R2].Left].Element) ) &#123;</span><br><span class="line">return ( isomorphic(T1[R1].Left, T2[R2].Left) &amp;&amp; isomorphic(T1[R1].Right, T2[R2].Right) );&#x2F;&#x2F; &amp;&amp; 两个左边相同的同时两个右边也相同 </span><br><span class="line">&#125; else &#123;</span><br><span class="line">return ( isomorphic(T1[R1].Left, T2[R2].Right) &amp;&amp; isomorphic(T1[R1].Right, T2[R2].Left) );&#x2F;&#x2F; 左边和右边相同的同时右边和左边相同 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">Tree R1, R2;</span><br><span class="line"></span><br><span class="line">R1 &#x3D; BuildTree(T1);</span><br><span class="line">R2 &#x3D; BuildTree(T2);</span><br><span class="line">if ( isomorphic(R1, R2) ) &#123;</span><br><span class="line">printf(&quot;Yes\n&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;No\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-线性结构4 Pop Sequence（25 分）</title>
      <link href="2017/09/22/02-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%844%20Pop%20Sequence%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
      <url>2017/09/22/02-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%844%20Pop%20Sequence%EF%BC%8825%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Given a stack which can keep M numbers at most. Push N numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if M is 5 and N is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h3><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): M (the maximum capacity of the stack), N (the length of push sequence), and K (the number of pop sequences to be checked). Then K lines follow, each contains a pop sequence of N numbers. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h3><p>For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 7 5</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">3 2 1 7 5 6 4</span><br><span class="line">7 6 5 4 3 2 1</span><br><span class="line">5 6 4 3 7 2 1</span><br><span class="line">1 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">&#x2F;&#x2F; Max堆栈已压入的最大值，Push、Pop标记压入和取出次数 </span><br><span class="line">int M, N, K, Max, Push, Pop; </span><br><span class="line"></span><br><span class="line">scanf(&quot;%d %d %d&quot;, &amp;M, &amp;N, &amp;K);</span><br><span class="line">int A[N];&#x2F;&#x2F; C99</span><br><span class="line">for ( int i&#x3D;0; i&lt;K; i++ ) &#123;&#x2F;&#x2F; 有K个序列需要检查 </span><br><span class="line">Max &#x3D; Push &#x3D; Pop &#x3D; 0;</span><br><span class="line">for ( int j&#x3D;0; j&lt;N; j++ ) &#123;&#x2F;&#x2F; 保存序列到数组 </span><br><span class="line">scanf(&quot;%d&quot;, &amp;A[j]);</span><br><span class="line">&#125;</span><br><span class="line">for ( int m&#x3D;0; m&lt;N; m++ ) &#123;&#x2F;&#x2F; 遍历每个数组 </span><br><span class="line">if ( A[m] &gt; Max ) &#123;&#x2F;&#x2F;  如果读取的数大于记录的最大值，则堆栈中有数字压入 </span><br><span class="line">Push +&#x3D; A[m] - Max;&#x2F;&#x2F; 更新压入的次数 </span><br><span class="line">if ( Push - Pop &lt;&#x3D; M ) &#123;&#x2F;&#x2F; 压入后堆栈中的数不能大于堆栈能容纳的最大值 </span><br><span class="line">Pop++;&#x2F;&#x2F; 更新取出次数 </span><br><span class="line">Max &#x3D; A[m];&#x2F;&#x2F; 更新已压入最大数 </span><br><span class="line">&#125; else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if ( A[m] &lt; Max ) &#123;&#x2F;&#x2F; 如果读取的数小于最大值，则堆栈处于取出状态 </span><br><span class="line">if ( A[m] &lt; A[m-1] ) &#123;&#x2F;&#x2F; 处于取出状态时，因为从小到大压入，所以后一个取出的数字一定小于前一个 </span><br><span class="line">Pop++;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if ( Push &#x3D;&#x3D; Pop &amp;&amp; Pop &#x3D;&#x3D; N ) &#123;&#x2F;&#x2F; 如果记录的push和pop次数相等，并且等于数字个数，则该序列可输出 </span><br><span class="line">printf(&quot;YES\n&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;NO\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-线性结构3 Reversing Linked List（25 分）</title>
      <link href="2017/09/21/02-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%843%20Reversing%20Linked%20List%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
      <url>2017/09/21/02-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%843%20Reversing%20Linked%20List%EF%BC%8825%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Given a constant K and a singly linked list L, you are supposed to reverse the links of every K elements on L. For example, given L being 1→2→3→4→5→6, if K=3, then you must output 3→2→1→6→5→4; if K=4, you must output 4→3→2→1→5→6.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h3><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (≤10^5) which is the total number of nodes, and a positive K (≤N) which is the length of the sublist to be reversed. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.</p><p>Then N lines follow, each describes a node in the format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address Data Next</span><br></pre></td></tr></table></figure><p>where <code>Address</code> is the position of the node, <code>Data</code> is an integer, and <code>Next</code> is the position of the next node.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h3><p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00100 6 4</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000 4 33218</span><br><span class="line">33218 3 12309</span><br><span class="line">12309 2 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 -1</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Node *List;</span><br><span class="line">struct Node &#123;</span><br><span class="line">char Address[6];</span><br><span class="line">int Data;</span><br><span class="line">char Next[6];</span><br><span class="line">List link;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List ReadList() &#123;&#x2F;&#x2F; 按输入顺序读入，并存为链表 </span><br><span class="line">List L, p;</span><br><span class="line">int N;</span><br><span class="line">L &#x3D; (List)malloc(sizeof(struct Node));</span><br><span class="line">p &#x3D; L;</span><br><span class="line">scanf(&quot;%s %d %d&quot;, L-&gt;Next, &amp;N, &amp;(L-&gt;Data));</span><br><span class="line">for ( int i&#x3D;0; i&lt;N; i++ ) &#123;</span><br><span class="line">List t &#x3D; (List)malloc(sizeof(struct Node));</span><br><span class="line">scanf(&quot;%s %d %s&quot;, t-&gt;Address, &amp;(t-&gt;Data), t-&gt;Next);</span><br><span class="line">t-&gt;link &#x3D; NULL;</span><br><span class="line">p-&gt;link &#x3D; t;</span><br><span class="line">p &#x3D; t;</span><br><span class="line">&#125;</span><br><span class="line">return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List SearchList( List L, char Next[] ) &#123;&#x2F;&#x2F; 查找结点的下一个节点，用在SortList函数中 </span><br><span class="line">List p, t;</span><br><span class="line">p &#x3D; L;&#x2F;&#x2F; 标记当前操作节点 </span><br><span class="line">t &#x3D; L;&#x2F;&#x2F; 标记当前操作节点的前一节点，方便找到要找的节点后删除该节点</span><br><span class="line">if ( p-&gt;link ) &#123;</span><br><span class="line">while ( p-&gt;link ) &#123;</span><br><span class="line">p &#x3D; p-&gt;link;</span><br><span class="line">if ( strcmp(p-&gt;Address, Next) &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">t-&gt;link &#x3D; p-&gt;link;&#x2F;&#x2F; 删除找到的节点，节点数据多时加快以后的查找速度 </span><br><span class="line">p-&gt;link &#x3D; NULL;&#x2F;&#x2F; 初始化返回节点的link指针 </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">t &#x3D; t-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List SortList( List L ) &#123;&#x2F;&#x2F;将输入的节点按Address，Next的顺序排序并返回 </span><br><span class="line">List p, tmp, Lout;&#x2F;&#x2F;p标记返回List，tmp标记查找到的节点，Lout标记返回的List的空间 </span><br><span class="line">Lout &#x3D; (List)malloc(sizeof(struct Node));</span><br><span class="line">Lout-&gt;Data &#x3D; L-&gt;Data;&#x2F;&#x2F; 头结点的Data字段存放反转个数K </span><br><span class="line">strcpy(Lout-&gt;Next, L-&gt;Next);&#x2F;&#x2F; 初始化返回List的开始节点 </span><br><span class="line">p &#x3D; Lout;</span><br><span class="line">&#x2F;&#x2F; 从原乱序List表中查找节点并拼接到返回Lout中 </span><br><span class="line">while ( strcmp(p-&gt;Next, &quot;-1&quot;) !&#x3D; 0 ) &#123;&#x2F;&#x2F; Next&#x3D;&quot;-1&quot;为List表最后一个节点的标识 </span><br><span class="line">tmp &#x3D; SearchList( L, p-&gt;Next );&#x2F;&#x2F; 查找并返回前一个节点所指的下一个节点 </span><br><span class="line">if ( tmp ) &#123;&#x2F;&#x2F; 将返回的节点接到Lout最后 </span><br><span class="line">tmp-&gt;link &#x3D; NULL;</span><br><span class="line">p-&gt;link &#x3D; tmp;</span><br><span class="line">p &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return Lout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List Push( List Stack, List tmp ) &#123;&#x2F;&#x2F; 堆栈压入方法 </span><br><span class="line">List s, p;</span><br><span class="line">s &#x3D; Stack;</span><br><span class="line">p &#x3D; (List)malloc(sizeof(struct Node));</span><br><span class="line">if ( s-&gt;link ) &#123;</span><br><span class="line">s &#x3D; s-&gt;link;</span><br><span class="line">strcpy(p-&gt;Address, tmp-&gt;Address);</span><br><span class="line">p-&gt;Data &#x3D; tmp-&gt;Data;</span><br><span class="line">strcpy(p-&gt;Next, tmp-&gt;Next);</span><br><span class="line">p-&gt;link &#x3D; s;</span><br><span class="line">Stack-&gt;link &#x3D; p;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">strcpy(p-&gt;Address, tmp-&gt;Address);</span><br><span class="line">p-&gt;Data &#x3D; tmp-&gt;Data;</span><br><span class="line">strcpy(p-&gt;Next, tmp-&gt;Next);</span><br><span class="line">p-&gt;link &#x3D; NULL;</span><br><span class="line">Stack-&gt;link &#x3D; p;</span><br><span class="line">&#125;</span><br><span class="line">    return Stack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List Pop( List Stack ) &#123;&#x2F;&#x2F; 堆栈弹出方法 </span><br><span class="line">List s;</span><br><span class="line">s &#x3D; Stack;</span><br><span class="line">if ( s-&gt;link ) &#123;</span><br><span class="line">s &#x3D; s-&gt;link;</span><br><span class="line">Stack-&gt;link &#x3D; s-&gt;link;</span><br><span class="line">strcpy(s-&gt;Next, &quot;-1&quot;);&#x2F;&#x2F; pop出来时将List节点的Next值初始化为&quot;-1&quot;</span><br><span class="line">s-&gt;link &#x3D; NULL;</span><br><span class="line">return s;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List ReverseList( List L ) &#123;&#x2F;&#x2F; 反转并输出排序好的List </span><br><span class="line">List Lout, Stack, p, s, mark, t;&#x2F;&#x2F; t存放堆栈取出的节点 </span><br><span class="line">&#x2F;&#x2F; 输出链表初始化 </span><br><span class="line">Lout &#x3D; (List)malloc(sizeof(struct Node));</span><br><span class="line">Lout-&gt;link &#x3D; NULL;</span><br><span class="line">strcpy(Lout-&gt;Next, &quot;-1&quot;);</span><br><span class="line">&#x2F;&#x2F; 初始化一个堆栈用于反向 </span><br><span class="line">Stack &#x3D; (List)malloc(sizeof(struct Node));</span><br><span class="line">Stack-&gt;link &#x3D; NULL;</span><br><span class="line">p &#x3D; L;&#x2F;&#x2F; 取出原链表节点的标记，用于堆栈push </span><br><span class="line">mark &#x3D; L;&#x2F;&#x2F; 已处理原链表节点的标记 </span><br><span class="line">s &#x3D; Lout;&#x2F;&#x2F; 输出链表的标记 </span><br><span class="line"></span><br><span class="line">if ( p-&gt;link ) &#123;</span><br><span class="line">int K &#x3D; L-&gt;Data;&#x2F;&#x2F;需要反向的节点个数 </span><br><span class="line">int flag &#x3D; 0;&#x2F;&#x2F;已压入堆栈的节点个数 </span><br><span class="line">&#x2F;&#x2F;  从原链表取出节点并压入堆栈，每K个从堆栈取出并插入到输出链表后。 </span><br><span class="line">while( p-&gt;link ) &#123;</span><br><span class="line">p &#x3D; p-&gt;link;</span><br><span class="line">if ( flag &lt; K ) &#123;&#x2F;&#x2F; 压入堆栈 </span><br><span class="line">Stack &#x3D; Push(Stack, p);</span><br><span class="line">flag++;&#x2F;&#x2F; 标记已压入堆栈的节点数 </span><br><span class="line">&#125; else &#123;</span><br><span class="line">for ( int i&#x3D;K; i&gt;0; i-- ) &#123;&#x2F;&#x2F; 达到K个后一次性弹出 </span><br><span class="line">t &#x3D; Pop(Stack);</span><br><span class="line">s-&gt;link &#x3D; t;</span><br><span class="line">strcpy(s-&gt;Next, t-&gt;Address);&#x2F;&#x2F;将前一个节点的Next值标记为下一个节点的Address值 </span><br><span class="line">s &#x3D; t;&#x2F;&#x2F; 移动插入标记到插入好的节点 </span><br><span class="line">mark &#x3D; mark-&gt;link;&#x2F;&#x2F; 每处理好一个移动一次原链表的标记指针。方便最后不足K个节点的处理 </span><br><span class="line">&#125;</span><br><span class="line">Stack &#x3D; Push(Stack, p);&#x2F;&#x2F; 输出完以后压入本次循环的原链表节点 </span><br><span class="line">flag &#x3D; 1; &#x2F;&#x2F; 初始化已压入堆栈节点数为1 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if ( mark-&gt;link &amp;&amp; flag !&#x3D; K ) &#123;&#x2F;&#x2F; 剩余的节点不足K个，则按原链表顺序输出 </span><br><span class="line">while( mark-&gt;link ) &#123;&#x2F;&#x2F; 处理，直到最后一个节点 </span><br><span class="line">mark &#x3D; mark-&gt;link;&#x2F;&#x2F; 直接取原链表节点操作 </span><br><span class="line">s-&gt;link &#x3D; mark; </span><br><span class="line">strcpy(s-&gt;Next, mark-&gt;Address);</span><br><span class="line">s &#x3D; mark;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;&#x2F;&#x2F; 如果最后正好有K个节点压入堆栈，则没有输出，需要将堆栈中的节点全部输出 </span><br><span class="line">for ( int i&#x3D;K; i&gt;0; i-- ) &#123;</span><br><span class="line">t &#x3D; Pop(Stack);</span><br><span class="line">s-&gt;link &#x3D; t;</span><br><span class="line">strcpy(s-&gt;Next, t-&gt;Address);</span><br><span class="line">s &#x3D; t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return Lout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Print( List L ) &#123;&#x2F;&#x2F; 打印函数 </span><br><span class="line">List p &#x3D; L;</span><br><span class="line">if ( p-&gt;link ) &#123;</span><br><span class="line">while ( p-&gt;link ) &#123;</span><br><span class="line">p &#x3D; p-&gt;link;</span><br><span class="line">printf(&quot;%s %d %s\n&quot;, p-&gt;Address, p-&gt;Data, p-&gt;Next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">List L, Lout1, Lout2;</span><br><span class="line">L &#x3D; ReadList();&#x2F;&#x2F; 读入节点顺序，保存为链表 </span><br><span class="line">Lout1 &#x3D; SortList( L );&#x2F;&#x2F; 按Address、Next顺序排序，并保存为新链表 </span><br><span class="line">Lout2 &#x3D; ReverseList( Lout1 );&#x2F;&#x2F; 每K个反向，并保存为新链表 </span><br><span class="line">Print(Lout2); &#x2F;&#x2F; 打印处理好的链表 </span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-线性结构2 一元多项式的乘法与加法运算（20 分）</title>
      <link href="2017/09/19/02-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%842%20%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E4%B9%98%E6%B3%95%E4%B8%8E%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%EF%BC%8820%20%E5%88%86%EF%BC%89/"/>
      <url>2017/09/19/02-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%842%20%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E4%B9%98%E6%B3%95%E4%B8%8E%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%EF%BC%8820%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>设计函数分别求两个一元多项式的乘积与和。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出0 0。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 3 4 -5 2  6 1  -2 0</span><br><span class="line">3 5 20  -7 4  3 1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1</span><br><span class="line">5 20 -4 4 -5 2 9 1 -2 0</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef struct PolyNode *Polynomial;</span><br><span class="line">struct PolyNode &#123;</span><br><span class="line">int coef;</span><br><span class="line">int expon;</span><br><span class="line">Polynomial link;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Polynomial ReadPoly() &#123;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">Polynomial Poly &#x3D; (Polynomial)malloc(sizeof(struct PolyNode));</span><br><span class="line">Polynomial p &#x3D; Poly;</span><br><span class="line">for (int i&#x3D;0; i&lt;n; i++ ) &#123;</span><br><span class="line">Polynomial t &#x3D; (Polynomial)malloc(sizeof(struct PolyNode));</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;(t-&gt;coef), &amp;(t-&gt;expon));</span><br><span class="line">t-&gt;link &#x3D; NULL;</span><br><span class="line">p-&gt;link &#x3D; t;</span><br><span class="line">p &#x3D; t;</span><br><span class="line">&#125;</span><br><span class="line">return Poly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Polynomial InsertPoly( Polynomial Poly, Polynomial t ) &#123;</span><br><span class="line">Polynomial p, tmp;&#x2F;&#x2F; p标记当前项，tmp标记当前项的前一项 </span><br><span class="line">p &#x3D; Poly;</span><br><span class="line">if ( p-&gt;link ) &#123;</span><br><span class="line">while ( p-&gt;link ) &#123; </span><br><span class="line">tmp &#x3D; p;</span><br><span class="line">p &#x3D; p-&gt;link;</span><br><span class="line">if ( p-&gt;expon &gt; t-&gt;expon ) &#123;&#x2F;&#x2F;如果t的幂次小于此项，则继续向后查找</span><br><span class="line">continue;</span><br><span class="line">&#125; else if ( p-&gt;expon &lt; t-&gt;expon ) &#123;&#x2F;&#x2F;如果t的幂次大于此项 ，则t插入此项之前</span><br><span class="line">t-&gt;link &#x3D; p;</span><br><span class="line">tmp-&gt;link &#x3D; t;</span><br><span class="line">break;</span><br><span class="line">&#125; else if ( p-&gt;expon &#x3D;&#x3D; t-&gt;expon ) &#123;&#x2F;&#x2F;如果t的幂次等于此项，则系数相加 </span><br><span class="line">p-&gt;coef &#x3D; p-&gt;coef + t-&gt;coef;</span><br><span class="line">if ( p-&gt;coef &#x3D;&#x3D; 0 ) &#123;&#x2F;&#x2F;如果相加后系数为0，则删除该项 </span><br><span class="line">tmp-&gt;link &#x3D; p-&gt;link;</span><br><span class="line">break;</span><br><span class="line">&#125; </span><br><span class="line">break;&#x2F;&#x2F; 缺此句会重复添加。 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (p-&gt;expon &gt; t-&gt;expon ) &#123;</span><br><span class="line">p-&gt;link &#x3D; t;&#x2F;&#x2F;  如果t的幂次最小，则添加到最后。 </span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">p-&gt;link &#x3D; t;&#x2F;&#x2F; 如果是第一个节点则直接添加。 </span><br><span class="line">&#125;</span><br><span class="line">return Poly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Polynomial MultPoly( Polynomial P1, Polynomial P2 ) &#123;</span><br><span class="line">Polynomial p1, p2, p;</span><br><span class="line">Polynomial Poly &#x3D; (Polynomial)malloc(sizeof(struct PolyNode));</span><br><span class="line">Poly-&gt;link &#x3D; NULL;</span><br><span class="line">p &#x3D; Poly;</span><br><span class="line">p1 &#x3D; P1;</span><br><span class="line">while ( p1-&gt;link ) &#123;</span><br><span class="line">p1 &#x3D; p1-&gt;link;</span><br><span class="line">p2 &#x3D; P2;</span><br><span class="line">while( p2-&gt;link ) &#123;</span><br><span class="line">p2 &#x3D; p2-&gt;link;</span><br><span class="line">Polynomial t &#x3D; (Polynomial)malloc(sizeof(struct PolyNode));</span><br><span class="line">t-&gt;coef &#x3D; p1-&gt;coef * p2-&gt;coef;</span><br><span class="line">t-&gt;expon &#x3D; p1-&gt;expon + p2-&gt;expon;</span><br><span class="line">t-&gt;link &#x3D; NULL;</span><br><span class="line">Poly &#x3D; InsertPoly(Poly, t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return Poly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Polynomial AddPoly( Polynomial P1, Polynomial P2 ) &#123;</span><br><span class="line">Polynomial p1, p2, p;</span><br><span class="line">Polynomial Poly &#x3D; (Polynomial)malloc(sizeof(struct PolyNode));</span><br><span class="line">p &#x3D; Poly;</span><br><span class="line">p1 &#x3D; P1-&gt;link;</span><br><span class="line">p2 &#x3D; P2-&gt;link;</span><br><span class="line">while ( p1 &amp;&amp; p2 ) &#123;</span><br><span class="line">if ( p1-&gt;expon &gt; p2-&gt;expon ) &#123;</span><br><span class="line">Polynomial t &#x3D; (Polynomial)malloc(sizeof(struct PolyNode));</span><br><span class="line">t-&gt;link &#x3D; NULL;</span><br><span class="line">t-&gt;coef &#x3D; p1-&gt;coef;</span><br><span class="line">t-&gt;expon &#x3D; p1-&gt;expon;</span><br><span class="line">p-&gt;link &#x3D; t;</span><br><span class="line">p &#x3D; t;</span><br><span class="line">p1 &#x3D; p1-&gt;link;</span><br><span class="line">&#125; else if ( p1-&gt;expon &lt; p2-&gt;expon ) &#123;</span><br><span class="line">Polynomial t &#x3D; (Polynomial)malloc(sizeof(struct PolyNode));</span><br><span class="line">t-&gt;link &#x3D; NULL;</span><br><span class="line">t-&gt;coef &#x3D; p2-&gt;coef;</span><br><span class="line">t-&gt;expon &#x3D; p2-&gt;expon;</span><br><span class="line">p-&gt;link &#x3D; t;</span><br><span class="line">p &#x3D; t;</span><br><span class="line">p2 &#x3D; p2-&gt;link;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Polynomial t &#x3D; (Polynomial)malloc(sizeof(struct PolyNode));</span><br><span class="line">t-&gt;link &#x3D; NULL;</span><br><span class="line">int tmp &#x3D; p1-&gt;coef + p2-&gt;coef;</span><br><span class="line">if ( tmp ) &#123;</span><br><span class="line">t-&gt;coef &#x3D; tmp;</span><br><span class="line">t-&gt;expon &#x3D; p1-&gt;expon;</span><br><span class="line">p-&gt;link &#x3D; t;</span><br><span class="line">p &#x3D; t;</span><br><span class="line">p1 &#x3D; p1-&gt;link;</span><br><span class="line">p2 &#x3D; p2-&gt;link;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">p1 &#x3D; p1-&gt;link;</span><br><span class="line">p2 &#x3D; p2-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">p-&gt;link &#x3D; p1?p1:p2;</span><br><span class="line">return Poly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void PrintPoly( Polynomial Poly ) &#123;</span><br><span class="line">int flag &#x3D; 0;</span><br><span class="line">Polynomial p &#x3D; Poly;</span><br><span class="line">if ( p-&gt;link ) &#123;</span><br><span class="line">while ( p-&gt;link ) &#123;</span><br><span class="line">p &#x3D; p-&gt;link;</span><br><span class="line">if ( flag ) &#123;</span><br><span class="line">printf(&quot; %d %d&quot;, p-&gt;coef, p-&gt;expon);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;%d %d&quot;, p-&gt;coef, p-&gt;expon);</span><br><span class="line">flag &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;0 0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">Polynomial Poly_1, Poly_2, PolyAdd, PolyMult;</span><br><span class="line">Poly_1 &#x3D; ReadPoly();</span><br><span class="line">Poly_2 &#x3D; ReadPoly();</span><br><span class="line">PolyMult &#x3D; MultPoly( Poly_1, Poly_2 );</span><br><span class="line">PolyAdd &#x3D; AddPoly( Poly_1, Poly_2 );</span><br><span class="line">PrintPoly( PolyMult );</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">PrintPoly( PolyAdd );</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-线性结构1 两个有序链表序列的合并（15 分）</title>
      <link href="2017/09/18/02-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%841%20%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E5%BA%8F%E5%88%97%E7%9A%84%E5%90%88%E5%B9%B6%EF%BC%8815%20%E5%88%86%EF%BC%89/"/>
      <url>2017/09/18/02-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%841%20%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E5%BA%8F%E5%88%97%E7%9A%84%E5%90%88%E5%B9%B6%EF%BC%8815%20%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。</p><h3 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List Merge( List L1, List L2 );</span><br><span class="line">其中List结构定义如下：</span><br><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node &#123;</span><br><span class="line">    ElementType Data; &#x2F;* 存储结点数据 *&#x2F;</span><br><span class="line">    PtrToNode   Next; &#x2F;* 指向下一个结点的指针 *&#x2F;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToNode List; &#x2F;* 定义单链表类型 *&#x2F;</span><br></pre></td></tr></table></figure><p>L1和L2是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数Merge要将L1和L2合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的链表头指针。</p><h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef int ElementType;</span><br><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node &#123;</span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode   Next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToNode List;</span><br><span class="line"></span><br><span class="line">List Read(); &#x2F;* 细节在此不表 *&#x2F;</span><br><span class="line">void Print( List L ); &#x2F;* 细节在此不表；空链表将输出NULL *&#x2F;</span><br><span class="line"></span><br><span class="line">List Merge( List L1, List L2 );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    List L1, L2, L;</span><br><span class="line">    L1 &#x3D; Read();</span><br><span class="line">    L2 &#x3D; Read();</span><br><span class="line">    L &#x3D; Merge(L1, L2);</span><br><span class="line">    Print(L);</span><br><span class="line">    Print(L1);</span><br><span class="line">    Print(L2);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 你的代码将被嵌在这里 *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3 5</span><br><span class="line">5</span><br><span class="line">2 4 6 8 10</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 8 10 </span><br><span class="line">NULL</span><br><span class="line">NULL</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef int ElementType;</span><br><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node &#123;</span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode   Next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToNode List;</span><br><span class="line"></span><br><span class="line">List Read(); &#x2F;* 细节在此不表 *&#x2F;</span><br><span class="line">void Print( List L ); &#x2F;* 细节在此不表；空链表将输出NULL *&#x2F;</span><br><span class="line"></span><br><span class="line">List Merge( List L1, List L2 );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    List L1, L2, L;</span><br><span class="line">    L1 &#x3D; Read();</span><br><span class="line">    L2 &#x3D; Read();</span><br><span class="line">    L &#x3D; Merge(L1, L2);</span><br><span class="line">    Print(L);</span><br><span class="line">    Print(L1);</span><br><span class="line">    Print(L2);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 你的代码将被嵌在这里 *&#x2F;</span><br><span class="line"></span><br><span class="line">List Read()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">List L &#x3D; (List)malloc(sizeof(PtrToNode));</span><br><span class="line">L-&gt;Next &#x3D; NULL;</span><br><span class="line">if ( n )</span><br><span class="line">&#123;</span><br><span class="line">List r &#x3D; L;</span><br><span class="line">for ( int i&#x3D;0; i&lt;n; i++ )</span><br><span class="line">&#123;</span><br><span class="line">List p &#x3D; (List)malloc(sizeof(struct Node));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;(p-&gt;Data));</span><br><span class="line">r-&gt;Next &#x3D; p;</span><br><span class="line">r &#x3D; p;</span><br><span class="line">&#125;</span><br><span class="line">r-&gt;Next &#x3D; NULL;</span><br><span class="line">&#125;</span><br><span class="line">return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Print( List L )</span><br><span class="line">&#123;</span><br><span class="line">List p &#x3D; L;</span><br><span class="line">if ( p-&gt;Next )</span><br><span class="line">&#123;</span><br><span class="line">while ( p-&gt;Next )</span><br><span class="line">&#123;</span><br><span class="line">p &#x3D; p-&gt;Next;</span><br><span class="line">printf(&quot;%d &quot;, p-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;NULL &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List Merge ( List L1, List L2 ) &#123;</span><br><span class="line">List pL1, pL2, pL, L;</span><br><span class="line">L &#x3D; (List)malloc(sizeof(struct Node));</span><br><span class="line">pL1 &#x3D; L1-&gt;Next;</span><br><span class="line">pL2 &#x3D; L2-&gt;Next;</span><br><span class="line">pL &#x3D; L;</span><br><span class="line">while ( pL1 &amp;&amp; pL2 ) &#123;</span><br><span class="line">if ( pL1-&gt;Data &lt;&#x3D; pL2-&gt;Data ) &#123;</span><br><span class="line">pL-&gt;Next &#x3D; pL1;</span><br><span class="line">pL &#x3D; pL1;</span><br><span class="line">pL1 &#x3D; pL1-&gt;Next;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">pL-&gt;Next &#x3D; pL2;</span><br><span class="line">pL &#x3D; pL2;</span><br><span class="line">pL2 &#x3D; pL2-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pL-&gt;Next &#x3D; pL1?pL1:pL2;</span><br><span class="line">L1-&gt;Next &#x3D; NULL;</span><br><span class="line">L2-&gt;Next &#x3D; NULL;</span><br><span class="line">return L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1013 数素数 (20)</title>
      <link href="2017/08/20/PAT(Basic%20Level)%201013%20%E6%95%B0%E7%B4%A0%E6%95%B0%20(20)/"/>
      <url>2017/08/20/PAT(Basic%20Level)%201013%20%E6%95%B0%E7%B4%A0%E6%95%B0%20(20)/</url>
      
        <content type="html"><![CDATA[<p>令Pi表示第i个素数。现任给两个正整数M &lt;= N &lt;= 104，请输出PM到PN的所有素数。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>100 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>令Pi表示第i个素数。现任给两个正整数M &lt;= N &lt;= 104，请输出PM到PN的所有素数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入在一行中给出M和N，其间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出从PM到PN的所有素数，每10个数字占1行，其间以空格分隔，但行末不得有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>5 27</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11 13 17 19 23 29 31 37 41 43</span><br><span class="line">47 53 59 61 67 71 73 79 83 89</span><br><span class="line">97 101 103</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 一个实例运行超时</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">def check_prime(n):</span><br><span class="line">    isPrime &#x3D; 1</span><br><span class="line">    for i in range(2, int(math.sqrt(n)) + 1):</span><br><span class="line">        if n % i &#x3D;&#x3D; 0:</span><br><span class="line">            isPrime &#x3D; 0</span><br><span class="line">            break</span><br><span class="line">    return isPrime</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    m, n &#x3D; [int(i) for i in input().split()]</span><br><span class="line">    cnt &#x3D; 0</span><br><span class="line">    i &#x3D; 2</span><br><span class="line"></span><br><span class="line">    while cnt &lt;&#x3D; n:</span><br><span class="line">        if check_prime(i):</span><br><span class="line">            cnt +&#x3D; 1</span><br><span class="line">            if (cnt &gt;&#x3D; m and (cnt - m) % 10 &#x3D;&#x3D; 9) or cnt &#x3D;&#x3D; n:</span><br><span class="line">                print(i)</span><br><span class="line">            elif m &lt;&#x3D; cnt &lt; n:</span><br><span class="line">                print(i, end&#x3D;&#39; &#39;)</span><br><span class="line">        i +&#x3D; 1</span><br></pre></td></tr></table></figure><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int check_prime(int n) &#123;</span><br><span class="line">int isPrime &#x3D; 1;</span><br><span class="line">for ( int i &#x3D; 2; i &lt; (int)sqrt(n) + 1; i++ ) &#123;</span><br><span class="line">if ( n % i &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">isPrime &#x3D; 0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return isPrime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int m, n;</span><br><span class="line">int cnt &#x3D; 0;</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;m, &amp;n);</span><br><span class="line"></span><br><span class="line">for ( int i &#x3D; 2; cnt &lt;&#x3D; n; i++) &#123;</span><br><span class="line">if ( check_prime(i) ) &#123;</span><br><span class="line">cnt++;</span><br><span class="line"></span><br><span class="line">if ( cnt &gt;&#x3D; m &amp;&amp; cnt &lt;&#x3D; n ) &#123;</span><br><span class="line">printf(&quot;%d&quot;, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( cnt &gt;&#x3D; m &amp;&amp; (cnt - m) % 10 &#x3D;&#x3D; 9 )&#123;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125; else if ( cnt &gt;&#x3D; m &amp;&amp; cnt &lt; n)&#123;</span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1012 数字分类 (20)</title>
      <link href="2017/08/20/PAT(Basic%20Level)%201012%20%E6%95%B0%E5%AD%97%E5%88%86%E7%B1%BB%20(20)/"/>
      <url>2017/08/20/PAT(Basic%20Level)%201012%20%E6%95%B0%E5%AD%97%E5%88%86%E7%B1%BB%20(20)/</url>
      
        <content type="html"><![CDATA[<p>给定一系列正整数，请按要求对数字进行分类。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>100 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字：</p><ul><li>A1 = 能被5整除的数字中所有偶数的和；</li><li>A2 = 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4…；</li><li>A3 = 被5除后余2的数字的个数；</li><li>A4 = 被5除后余3的数字的平均数，精确到小数点后1位；</li><li>A5 = 被5除后余4的数字中最大数字。</li></ul><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N，随后给出N个不超过1000的待分类的正整数。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p><p>若其中某一类数字不存在，则在相应位置输出“N”。</p><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h3><p><code>13 1 2 3 4 5 6 7 8 9 10 20 16 18</code></p><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h3><p><code>30 11 2 9.7 9</code></p><h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h3><p><code>8 1 2 4 5 6 7 9 16</code></p><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h3><p><code>N 11 2 N 9</code></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">n_array &#x3D; [int(n) for n in input().split()]</span><br><span class="line">A1 &#x3D; A2 &#x3D; A3 &#x3D; A4 &#x3D; A5 &#x3D; 0</span><br><span class="line">A2_flag &#x3D; 1</span><br><span class="line">A2_cnt &#x3D; 0</span><br><span class="line">A4_cnt &#x3D; 0</span><br><span class="line"></span><br><span class="line">for n in n_array[1:]:</span><br><span class="line">    if n % 5 &#x3D;&#x3D; 0 and n % 2 &#x3D;&#x3D; 0:</span><br><span class="line">        A1 +&#x3D; n</span><br><span class="line">    elif n % 5 &#x3D;&#x3D; 1:</span><br><span class="line">        if A2_flag:</span><br><span class="line">            A2 +&#x3D; n</span><br><span class="line">            A2_flag &#x3D; 0</span><br><span class="line">        else:</span><br><span class="line">            A2 -&#x3D; n</span><br><span class="line">            A2_flag &#x3D; 1</span><br><span class="line">        A2_cnt +&#x3D; 1</span><br><span class="line">    elif n % 5 &#x3D;&#x3D; 2:</span><br><span class="line">        A3 +&#x3D; 1</span><br><span class="line">    elif n % 5 &#x3D;&#x3D; 3:</span><br><span class="line">        A4 +&#x3D; n</span><br><span class="line">        A4_cnt +&#x3D; 1</span><br><span class="line">    elif n % 5 &#x3D;&#x3D; 4:</span><br><span class="line">        if n &gt; A5:</span><br><span class="line">            A5 &#x3D; n</span><br><span class="line"></span><br><span class="line">if A1 &#x3D;&#x3D; 0:</span><br><span class="line">    A1 &#x3D; &#39;N&#39;</span><br><span class="line">if A2_cnt &#x3D;&#x3D; 0:</span><br><span class="line">    A2 &#x3D; &#39;N&#39;</span><br><span class="line">if A3 &#x3D;&#x3D; 0:</span><br><span class="line">    A3 &#x3D; &#39;N&#39;</span><br><span class="line">if A4_cnt &gt; 0:</span><br><span class="line">    A4 &#x2F;&#x3D; A4_cnt</span><br><span class="line">    A4 &#x3D; str(&#39;&#123;:.1f&#125;&#39;.format(A4))</span><br><span class="line">else:</span><br><span class="line">    A4 &#x3D; &#39;N&#39;</span><br><span class="line">if A5 &#x3D;&#x3D; 0:</span><br><span class="line">    A5 &#x3D; &#39;N&#39;</span><br><span class="line"></span><br><span class="line">print(A1, A2, A3, A4, A5)</span><br></pre></td></tr></table></figure><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">int m;</span><br><span class="line">int A1 &#x3D; 0;</span><br><span class="line">int A2 &#x3D; 0;</span><br><span class="line">int A3 &#x3D; 0;</span><br><span class="line">int A4 &#x3D; 0;</span><br><span class="line">int A5 &#x3D; 0;</span><br><span class="line">int A2_flag &#x3D; 1;</span><br><span class="line">int A2_cnt &#x3D; 0;</span><br><span class="line">int A4_cnt &#x3D; 0;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line"></span><br><span class="line">for ( int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;m);</span><br><span class="line">if ( m % 5 &#x3D;&#x3D; 0 &amp;&amp; m % 2 &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">A1 +&#x3D; m;</span><br><span class="line">&#125; else if ( m % 5 &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">if ( A2_flag ) &#123;</span><br><span class="line">A2 +&#x3D; m;</span><br><span class="line">A2_flag &#x3D; 0;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">A2 -&#x3D; m;</span><br><span class="line">A2_flag &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">A2_cnt++;</span><br><span class="line">&#125; else if ( m % 5 &#x3D;&#x3D; 2 ) &#123;</span><br><span class="line">A3++;</span><br><span class="line">&#125; else if ( m % 5 &#x3D;&#x3D; 3 ) &#123;</span><br><span class="line">A4 +&#x3D; m;</span><br><span class="line">A4_cnt++;</span><br><span class="line">&#125; else if ( m % 5 &#x3D;&#x3D; 4 ) &#123;</span><br><span class="line">if ( m &gt; A5 ) &#123;</span><br><span class="line">A5 &#x3D; m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( A1 ) &#123;</span><br><span class="line">printf(&quot;%d &quot;, A1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;N &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( A2_cnt ) &#123;</span><br><span class="line">printf(&quot;%d &quot;, A2);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;N &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( A3 ) &#123;</span><br><span class="line">printf(&quot;%d &quot;, A3);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;N &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( A4_cnt ) &#123;</span><br><span class="line">printf(&quot;%.1f &quot;, ((float)A4) &#x2F; A4_cnt);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">printf(&quot;N &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( A5 ) &#123;</span><br><span class="line">printf(&quot;%d&quot;, A5);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;N&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1011 A+B和C (15)</title>
      <link href="2017/08/18/PAT(Basic%20Level)%201011%20A+B%E5%92%8CC%20(15)/"/>
      <url>2017/08/18/PAT(Basic%20Level)%201011%20A+B%E5%92%8CC%20(15)/</url>
      
        <content type="html"><![CDATA[<p>给定区间[-231, 231]内的3个整数A、B和C，请判断A+B是否大于C</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>150 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>HOU, Qiming</td></tr></tbody></table><p>给定区间[-231, 231]内的3个整数A、B和C，请判断A+B是否大于C。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入第1行给出正整数T(&lt;=10)，是测试用例的个数。随后给出T组测试用例，每组占一行，顺序给出A、B和C。整数间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对每组测试用例，在一行中输出“Case #X: true”如果A+B&gt;C，否则输出“Case #X: false”，其中X是测试用例的编号（从1开始）。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; int(input())</span><br><span class="line"></span><br><span class="line">for i in range(n):</span><br><span class="line">    num_str &#x3D; [float(e) for e in input().split()]</span><br><span class="line">    if num_str[0] + num_str[1] &gt; num_str[2]:</span><br><span class="line">        print(&#39;Case #&#123;&#125;: true&#39;.format(i + 1))</span><br><span class="line">    else:</span><br><span class="line">        print(&#39;Case #&#123;&#125;: false&#39;.format(i + 1))</span><br></pre></td></tr></table></figure><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">double a, b, c;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">scanf(&quot;%lf%lf%lf&quot;, &amp;a, &amp;b, &amp;c);</span><br><span class="line">if ( a + b &gt; c ) &#123;</span><br><span class="line">printf(&quot;Case #%d: true\n&quot;, i + 1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Case #%d: false\n&quot;, i + 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1010 一元多项式求导 (25)</title>
      <link href="2017/08/18/PAT(Basic%20Level)%201010%20%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E5%AF%BC%20(25)/"/>
      <url>2017/08/18/PAT(Basic%20Level)%201010%20%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E5%AF%BC%20(25)/</url>
      
        <content type="html"><![CDATA[<p>设计函数求一元多项式的导数</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr></tbody></table><p>设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为n*xn-1。）</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是0，但是表示为“0 0”。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>3 4 -5 2 6 1 -2 0</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>12 3 -10 1 6 0</code></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">num_lst &#x3D; [int(i) for i in input().split()]</span><br><span class="line"></span><br><span class="line">if num_lst[0] &#x3D;&#x3D; 0 or num_lst[1] &#x3D;&#x3D; 0:</span><br><span class="line">    print(&#39;0 0&#39;)</span><br><span class="line">else:</span><br><span class="line">    output_lst &#x3D; []</span><br><span class="line">    for i in range(0,len(num_lst),2):</span><br><span class="line">        if num_lst[i+1] &#x3D;&#x3D; 0:</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            output_lst.append(num_lst[i] * num_lst[i+1])</span><br><span class="line">            output_lst.append(num_lst[i+1] - 1)</span><br><span class="line">    output_str &#x3D; [str(i) for i in output_lst]</span><br><span class="line">    print(&#39; &#39;.join(output_str))</span><br></pre></td></tr></table></figure><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int a;</span><br><span class="line">int n;</span><br><span class="line">int flag &#x3D; 0;</span><br><span class="line"></span><br><span class="line">while ( scanf(&quot;%d%d&quot;, &amp;a, &amp;n) !&#x3D; EOF ) &#123;</span><br><span class="line">if ( n ) &#123;</span><br><span class="line">if ( flag ) &#123;</span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d %d&quot;, a*n, n-1);</span><br><span class="line">flag &#x3D; 1;</span><br><span class="line">&#125; </span><br><span class="line">if ( !flag ) &#123;</span><br><span class="line">printf(&quot;0 0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C语言（失败版，暂时找不到无法通过的原因）"><a href="#C语言（失败版，暂时找不到无法通过的原因）" class="headerlink" title="C语言（失败版，暂时找不到无法通过的原因）"></a>C语言（失败版，暂时找不到无法通过的原因）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void init_tmp(char tmp_num[]) &#123;</span><br><span class="line">for ( int i &#x3D; 0; i &lt; 4; i++ ) &#123;</span><br><span class="line">tmp_num[i] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">const int N &#x3D; 4000;</span><br><span class="line">char num_str[N];</span><br><span class="line">int A[N];</span><br><span class="line">char tmp_num[4];</span><br><span class="line">int j &#x3D; 0;</span><br><span class="line">int k &#x3D; 0;</span><br><span class="line"></span><br><span class="line">init_tmp(tmp_num);</span><br><span class="line">gets(num_str);</span><br><span class="line"></span><br><span class="line">for ( int i &#x3D; 0; i &lt; strlen(num_str); i++ ) &#123;</span><br><span class="line">if ( num_str[i] !&#x3D; &#39; &#39; ) &#123;</span><br><span class="line">tmp_num[j] &#x3D; num_str[i];</span><br><span class="line">j++;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">A[k] &#x3D; atoi(tmp_num);</span><br><span class="line">k++;</span><br><span class="line">init_tmp(tmp_num);</span><br><span class="line">j &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( A[0] &#x3D;&#x3D; 0 || A[1] &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">printf(&quot;0 0&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">for ( int i &#x3D; 0; i &lt; N; i +&#x3D; 2) &#123;</span><br><span class="line">if ( A[i+1] &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if ( i !&#x3D; 0 ) &#123;</span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d %d&quot;, A[i] * A[i+1], A[i+1] - 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 文本</title>
      <link href="2017/08/17/HTML%20%E6%96%87%E6%9C%AC/"/>
      <url>2017/08/17/HTML%20%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>HTML 文本</p><h3 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h3><h4 id="什么是HTML元素"><a href="#什么是HTML元素" class="headerlink" title="什么是HTML元素"></a>什么是HTML元素</h4><p>在第一章中在介绍标签的时候为了避免概念的混乱，我们简单介绍了下HTML元素，这里我们就详细开始介绍HTML元素。</p><p>HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。</p><p>HTML网页实际上就是由许许多多各种各样的HTML元素构成的文本文件，并且任何网页浏览器都可以直接运行HTML文件。所以可以这样说，HTML元素就是构成HTML文件的基本对象，HTML元素可以说是一个统称而已。HTML元素就是通过使用HTML标签进行定义的。</p><p>&lt;开始标签&gt; 元 素 内 容 &lt;结束标签&gt;</p><p>这就是一个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;shiyanlou&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h4 id="HTML元素语法"><a href="#HTML元素语法" class="headerlink" title="HTML元素语法"></a>HTML元素语法</h4><p>HTML元素语法特点：</p><ul><li>HTML 元素以开始标签起始</li><li>HTML 元素以结束标签终止</li><li>元素的内容是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有空内容（empty content）</li><li>空元素在开始标签中进行关闭（以开始标签的结束而结束）</li><li>大多数 HTML 元素可拥有属性(下面会讲)</li></ul><h4 id="HTML元素嵌套示例"><a href="#HTML元素嵌套示例" class="headerlink" title="HTML元素嵌套示例"></a>HTML元素嵌套示例</h4><p>再把前面的例子拿出来，大家先看看，下面这个例子中有几个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;let&#39;s go to shiyanlou&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>答案当然是三个 <code>&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code>，应该很好理解吧，这就是所谓的嵌套。</p><h4 id="HTML空元素"><a href="#HTML空元素" class="headerlink" title="HTML空元素"></a>HTML空元素</h4><p>HTML元素的内容是开始标签与结束标签之间的内容，而某些 HTML 元素具有空内容（empty content），这种元素被叫做空元素。比如说换行符<br>。</p><p>但<br>是不规范的写法，早先发布的html规范中<br>、<hr>、<img>等标记元素是无需“封闭自身”的，这就造成了html规范本身的不严谨，所以后来参考了更规范的XML语言的语法推出了xhtml。在xhtml中所有类似<br>这样的孤立标签都需要自行封闭，具体的做法就是在标签名字的后面跟个“/”，例如<br/>。从逻辑上讲<br />=<br>…</br>，这样做的目的是为了尽量减少网页的代码量，同时保持逻辑严谨。</p><p>扯了这么多就是想说，请保持规范的写法，以后换行请用<br/>。</p><p>前面我们从示例中看出，<p>标签结束以后也有一个换行的动作，那&lt; p&gt;标签和&lt; br/&gt;标签有什么异同呢？</p><ul><li>相同之处是<br>和<p>都是有换行的属性及作用</li><li>区别 <br/>是只需一个单独使用，而<p>和&lt; /p&gt;是一对使用</li><li><br/>标签是小换行提行（相当于我们平时文本中输入一个回车），<p>标签是大换行（分段，相当与两个回车）,各行作用。</li></ul><p>下面大家就一起动手看看两个标签的区别</p><p>先来个<br/>换行，</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid13labid119timestamp1482740945034.png/wm"></p><p>再来个<p>&lt; /p&gt;换行</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid18510labid119timestamp1484015200303.png/wm"></p><p>要想两个表现出一样的效果</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423199327851"></p><p>这下对两个标签有比较清楚的认识了吧。</p><h3 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h3><p>某些标签要想按照作者的意愿来实现在网页上，就得需要一定信息的补充，这信息就叫属性，HTML标签可以加上属性的描述。属性提供了有关 HTML 元素的更多的信息。</p><p>关于属性有以下语法规则：</p><ul><li>是在 HTML 元素的开始标签中定义。</li><li>总是以名称和值对应的形式出现，比如：name=”value”。</li><li>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。</li></ul><p>我们先举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.shiyanlou.com&quot;&gt;shiyanlou&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423199530914"></p><p>href=”<a href="http://www.shiyanlou.com&quot;,这一部分就叫做/">http://www.shiyanlou.com&quot;，这一部分就叫做</a>&lt; a&gt;标签的属性，是对&lt; a&gt;标签的补充说明，既指向的网页。这样的标签还有很多，下面我们就来动手做几个练习。</p><p>我们将就上面的&lt; a&gt;标签，再来换个属性，玩一个邮件编写，当你点击以后，你就可以登录你自己的邮箱，给指定的地址编写邮件来发送。</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423210714610"></p><p>还记得我们在以前的例子中使用过的&lt; h1&gt;标签吗，接下来我么就在桌面上编写一个test.html，这就是不自定义属性的内容和结果:</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423199591960"></p><p>你也许想过，作为网页文本的标题，当然应该在网页的正中间对齐。那么下面我么就通过在标签中加属性来实现这样的目的。</p><p>这是所加属性的内容和结果：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423199632258"></p><p>下面我们再来给网页增添背景颜色，也许你已经猜到，这个属性就是属于&lt; body&gt;标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body bgcolor&#x3D;&quot;#000000&quot;&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;rgb(0,0,0)&quot;&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;black&quot;&gt;</span><br></pre></td></tr></table></figure><p>这三种方式都可以设置背景颜色（上面为黑色），这个属性值可以是十六进制数、RGB 值或颜色名。</p><p>这里就简单的选择最直观的方式：（颜色名支持aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, yellow。）</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423199672591"></p><p>那么问题来了，既然大多数的标签都有各种各样的属性，那么我们需要全部背下来吗？</p><p>这个。。。在我看来，没有必要去特意的拿着所谓的HTML标签属性大全背，背完了说不定你也不会用或者一些属性根本就很难才用得到。在实践中积累才是好方法，在写的过程中你自然知道哪些属性是比较常用，是什么样的用法，多写才是硬道理。</p><h3 id="HTML文本格式化"><a href="#HTML文本格式化" class="headerlink" title="HTML文本格式化"></a>HTML文本格式化</h3><p>一般我们在网页中能看见有各种各样的字体、文本样式，这就是文本格式化标签的功劳。下面我们就来学习使用文本格式化标签（比较常用的）</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&lt; b&gt;</td><td>（bold）粗体</td></tr><tr><td>&lt; big&gt;</td><td>（big）大字体</td></tr><tr><td>&lt; em&gt;</td><td>（emphasized）强调字</td></tr><tr><td>&lt; i&gt;</td><td>（italic）斜体</td></tr><tr><td>&lt; small&gt;</td><td>（small）小字体</td></tr><tr><td>&lt; strong&gt;</td><td>(strong)加重语气</td></tr></tbody></table><p>这里我们来一个大汇总，接着刚刚我们的HTML文件（作为默认的比较）：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423205450894"></p><p>从图片我们就可以直观的看出字体的区别。</p><p>大家是不是觉得每写完一句要想换行每次都要加一个换行标签&lt; br/&gt;比较麻烦，下面我们就来介绍一下预格式文本（所谓预格式文本就是指代码叶和网页展示是一样的格式，不用额外添加换行符标签就能换行）</p><p>&lt; pre&gt;….&lt; /pre&gt;标签的使用</p><p>我们就在刚才的文件修改，把后面的换行符都删掉，将其内容丢到<pre>标签中，就可以得到与之前差不多的格式（但是看起来还是有区别的）。</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423208501063"></p><p>这个标签适用于代码的粘贴，你想过没有，要是没有这个标签，要想控制网页中显示的代码格式，是一件多么难的事。</p><h3 id="HTML样式"><a href="#HTML样式" class="headerlink" title="HTML样式"></a>HTML样式</h3><p>上面我们用了各种各样的标签来使HTML文本格式符合我们的意愿，其实有一个属性能帮助我们减少不少的麻烦。</p><p>style 提供了一种改变所有 HTML 元素的样式的通用方法。这里可以将，背景颜色，字体样式，字体尺寸，字体颜色，对齐方式一并定义好。下面我们就再来动手写一个HTML文件</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423216239851"></p><p>看了效果以后是不是有倍感亲切的感觉，以后就不用再单独使用这些标签了，在style中一气呵成。将大部分的文本格式全都处理掉了，想必你的印象会很深。</p>]]></content>
      
      
      <categories>
          
          <category> HTML基础入门（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1009 说反话 (20)</title>
      <link href="2017/08/17/PAT(Basic%20Level)%201009%20%E8%AF%B4%E5%8F%8D%E8%AF%9D%20(20)/"/>
      <url>2017/08/17/PAT(Basic%20Level)%201009%20%E8%AF%B4%E5%8F%8D%E8%AF%9D%20(20)/</url>
      
        <content type="html"><![CDATA[<p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>测试输入包含一个测试用例，在一行内给出总长度不超过80的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用1个空格分开，输入保证句子末尾没有多余的空格。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>每个测试用例的输出占一行，输出倒序后的句子。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>Hello World Here I Come</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>Come I Here World Hello</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">char str[80];</span><br><span class="line">char tmpstr[80];</span><br><span class="line"></span><br><span class="line">for ( int i &#x3D; 0; i &lt; 80; i++ ) &#123;</span><br><span class="line">str[i] &#x3D; 0;</span><br><span class="line">tmpstr[i] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">gets(str);</span><br><span class="line"></span><br><span class="line">int j &#x3D; 0;</span><br><span class="line">for ( int i &#x3D; strlen(str) - 1; i &gt;&#x3D; 0; i-- ) &#123;</span><br><span class="line">&#x2F;&#x2F; 倒序将单词存入临时数组</span><br><span class="line">if ( str[i] !&#x3D; &#39; &#39; ) &#123;</span><br><span class="line">tmpstr[j] &#x3D; str[i];</span><br><span class="line">str[i] &#x3D; 0;</span><br><span class="line">j++;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F; 碰到一个空格即倒序输出临时数组中的单词，并初始化临时数组</span><br><span class="line">for (int k &#x3D; strlen(tmpstr) - 1; k &gt;&#x3D; 0; k-- ) &#123;</span><br><span class="line">printf(&quot;%c&quot;, tmpstr[k]);</span><br><span class="line">tmpstr[k] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line">j &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 上述判断条件最后一个单词未输出，输出最后一个单词</span><br><span class="line">for (int k &#x3D; strlen(tmpstr) - 1; k &gt;&#x3D; 0; k-- ) &#123;</span><br><span class="line">printf(&quot;%c&quot;, tmpstr[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str &#x3D; input()</span><br><span class="line">str_lst &#x3D; str.split()</span><br><span class="line">str_lst.reverse()</span><br><span class="line">print(&#39; &#39;.join(str_lst))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 基础汇总实验</title>
      <link href="2017/08/16/HTML%20%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB%E5%AE%9E%E9%AA%8C/"/>
      <url>2017/08/16/HTML%20%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>HTML 基础汇总实验</p><p>实验中的代码可以通过命令下载在实验楼环境中下载运行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;shiyanlou&#x2F;finaltest</span><br></pre></td></tr></table></figure><h3 id="实验总体设计"><a href="#实验总体设计" class="headerlink" title="实验总体设计"></a>实验总体设计</h3><p>在开始之前我们对网页应该有大致的把握，也就是说，在开始之前我们就要清楚我们要实现的目标，对应的最基础的框架结构，并且通过使用我们学过的那些标签和属性来实现，对于这个实验。我们可以随便在网上找一个样式简单点的网页来实现，这可能要涉及到一小部分的css样式的内容（毕竟只用HTML很难写出相同的效果）。下面我们就先展示一下我们要完成的效果：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423963000281"></p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423963025537"></p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423963042099"></p><p>大家可以看出，这个页面实现起来难度应该不大，这里涉及到布局，图片的插入，背景颜色调整，链接实现页面内的跳转，表单实现文本输入和邮件发送，再加上最基础的文本格式，用我们前面讲过的知识，足以对付。</p><p>下面，我们就先来用一个结构图将这个页面的结构为大家剖析一下。让大家对这个实验结构有更好的理解：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423966474915"></p><h3 id="总体框架及布局"><a href="#总体框架及布局" class="headerlink" title="总体框架及布局"></a>总体框架及布局</h3><p>前面的章节中我们讲过两种实现布局的方式，一个是表格元素，一个是div元素，这里我们选择使用div元素来实现。这里涉及到一点css的东西，用了style。但是无关紧要，完全能理解。下面我们就来具体讲解下：</p><p>首先我们将整个页面横向分为五个块，整个页面我们先看作一个大的块，其他的块嵌套在其中。我们现在就为他们命名。</p><p>整个页面我们看作时一个块，我们将其命名为container，所有的块都嵌套在其中</p><p>下面就是标题，命名为header，这是整个页面的头部，一个标题加一个本页面链接，没什么多说的</p><p>下一个是我们第一个大的部分，占了第一篇页面的额绝大多部分，有一张工程师的插图，命名为paragraph。</p><p>接下来有四张插图的部分，我们将其算为一个大的块（其实有四个块，水平并列，每一个块插一张图）这四个小块分别命名为leftside、middle1、middle2、rightside。</p><p>再下来就是表单发送邮件的块，主要实现文本输入和邮件发送，将其命名为footer1.</p><p>最后就是一个美化的底边框，将其命名为footer2。</p><p>下面就是具体的代码，在这个style中，顺便设置了一些对这个块的总体设置（所占宽度，高度，对齐等）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#container &#123;</span><br><span class="line">    width: 1300px;</span><br><span class="line">    margin: 0 auto; &#x2F;* 使 #container 居中 *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">#header &#123;</span><br><span class="line">    background-color: darkslategray;</span><br><span class="line">    height: 130px;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line">#paragraph &#123;</span><br><span class="line">    background-color: lightseagreen;</span><br><span class="line">    height: 550px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">#leftside &#123;</span><br><span class="line">    height: 350px;</span><br><span class="line">    width:310px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">#middle1 &#123;</span><br><span class="line">    height: 350px;</span><br><span class="line">    width: 340px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">#middle2 &#123;</span><br><span class="line">    height: 350px;</span><br><span class="line">    width: 340px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">#rightside &#123;</span><br><span class="line">    height: 350px;</span><br><span class="line">    width: 310px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">#leftside img,</span><br><span class="line">#middle1 img,</span><br><span class="line">#middle2 img,</span><br><span class="line">#rightside img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">#footer1 &#123;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line">    height: 600px;</span><br><span class="line">    clear: both;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">#footer2 &#123;</span><br><span class="line">    background-color: lightslategrey;</span><br><span class="line">    height: 100px;</span><br><span class="line">    clear: both;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="具体模块实现"><a href="#具体模块实现" class="headerlink" title="具体模块实现"></a>具体模块实现</h3><p>上面介绍了总体的模块，这里我们就具体来看看如何实现每一块的实现：</p><p>header：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;header&quot; &gt;</span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line">    &lt;h1 style&#x3D;&quot;color: aliceblue;text-align: center&quot;&gt;Colorful Shi yan Lou&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#con&quot; style&#x3D;&quot;float: left;color: lightgray&quot;&gt;Contact us&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这是头块的具体内容，设置了字体颜色对其方式，还加入了一个页面间跳转的链接，链接的另一半在后面的footer1中，点击这里以后，页面会跳转到footer1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">paragraph：</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;paragraph&quot;&gt;</span><br><span class="line">      &lt;br&#x2F;&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;profile.png&quot;&gt;</span><br><span class="line">          &lt;br&#x2F;&gt;</span><br><span class="line">          &lt;h1 style&#x3D;&quot;color: aliceblue&quot;&gt;we are engineers&lt;&#x2F;h1&gt;</span><br><span class="line">          &lt;p style&#x3D;&quot;color: aliceblue&quot;&gt;we are young&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这个paragraph块插入了一张图，定义了字体颜色，而且在前面的总体声明中可以看出，还设置了这个模块的字体对齐方式及字体大小。</p><p>中间模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;leftside&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">      &lt;h1 style&#x3D;&quot;color: lightslategray&quot;&gt;Working&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;cabin.png&quot; height&#x3D;&quot;260&quot; width&#x3D;&quot;300&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;div id&#x3D;&quot;middle1&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">      &lt;h1 style&#x3D;&quot;color: lightslategray&quot;&gt;Eating&lt;&#x2F;h1&gt;</span><br><span class="line">     &lt;img src&#x3D;&quot;cake.png&quot; height&#x3D;&quot;260&quot; width&#x3D;&quot;300&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id&#x3D;&quot;middle2&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">      &lt;h1 style&#x3D;&quot;color: lightslategray&quot;&gt;Playing&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;game.png&quot; height&#x3D;&quot;260&quot; width&#x3D;&quot;300&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;div id&#x3D;&quot;rightside&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">      &lt;h1 style&#x3D;&quot;color: lightslategray&quot;&gt;Sleeping&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;circus.png&quot; height&#x3D;&quot;260&quot; width&#x3D;&quot;300&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这四个块就一起讲了，这里要实现的就是在每个块中插入图片，在图片上面有字体描述，由于定义的每个块的宽度是大于图片的大小，所以才能产生图片与图片之间白色边框的效果，不然，会挤在一起。要想实现几个块水平并列的放置，还可以采用列表的形式。这里我们就只是简单的通过定义大小来实现水平排列，这就是我们实现的效果</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423963173825"></p><p>这些都是很简单的实现方式，很容易理解，接下来我着重讲讲footer1块（表单实现文本输入和邮件发送）</p><h3 id="添加表单实现文本输入和邮件发送"><a href="#添加表单实现文本输入和邮件发送" class="headerlink" title="添加表单实现文本输入和邮件发送"></a>添加表单实现文本输入和邮件发送</h3><p>以前我们讲到过使用&lt; a&gt;标签实现邮件发送，就是在标签中加入mailto属性，其实表单实现邮件发送也是很相似的在form标签中action加入mailto。这里还有要注意的就是，表单输入到类型以前讲的很清楚，要是大家有疑惑可以回头看看。下面时具体的代码内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;footer1&quot; &gt;</span><br><span class="line"></span><br><span class="line">       &lt;br&#x2F;&gt;</span><br><span class="line">           &lt;a name&#x3D;&quot;con&quot;&gt;</span><br><span class="line">               &lt;h1 style&#x3D;&quot;color: lightslategray;&quot;&gt;let&#39;s learn with us</span><br><span class="line">       &lt;br&#x2F;&gt;good good study, day day up</span><br><span class="line">       &lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">       &lt;div style&#x3D;&quot;background-color: powderblue;width:450px;height: 400px;float: left&quot;&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">       &lt;div style&#x3D;&quot;background-color: orange;width: 400px;height: 400px;float:left&quot;&gt;</span><br><span class="line">           &lt;img src&#x3D;&quot;user.png&quot; style&#x3D;&quot;text-align: center&quot;&gt;</span><br><span class="line">           &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">           &lt;form action&#x3D;&quot;MAILTO:support@shiyanlou.com&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;text&#x2F;plain&quot;&gt;</span><br><span class="line"></span><br><span class="line">               &lt;h3&gt;Send emali to shiyanlou&lt;&#x2F;h3&gt;</span><br><span class="line">              your name:&lt;br&#x2F;&gt;</span><br><span class="line">               &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; value&#x3D;&quot;yourname&quot; size&#x3D;&quot;20&quot;&gt;</span><br><span class="line">               &lt;br &#x2F;&gt;</span><br><span class="line">               your email:&lt;br&#x2F;&gt;</span><br><span class="line">               &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;mail&quot; value&#x3D;&quot;yourmailaddress&quot; size&#x3D;&quot;20&quot;&gt;</span><br><span class="line">               &lt;br &#x2F;&gt;</span><br><span class="line">               what you wanna say:&lt;br&#x2F;&gt;</span><br><span class="line">               &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;comment&quot; value&#x3D;&quot;yourcomment&quot; size&#x3D;&quot;20&quot;&gt;</span><br><span class="line">               &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">               &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;send&quot;&gt;</span><br><span class="line">               &lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;rewrite&quot;&gt;</span><br><span class="line"></span><br><span class="line">           &lt;&#x2F;form&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>在上面这个模块中，首先开头的就是链接的跳转地址，触发地是在header里面定义的。接下来我们为了使发送表单的块居中，采用了最原始的方法，就是再前面加上一个与背景颜色一样的空块，使他们并列。再后面就是表单的应用，定义表单，并规定长度，实现文本和密码的输入。最后加上两个按钮，实现确认和重置。所有的写法都很基础，没有涉及到更高深的东西。</p><p>这就是footer模块的具体样子</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423963291336"></p>]]></content>
      
      
      <categories>
          
          <category> HTML基础入门（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 超文本（二）</title>
      <link href="2017/08/16/HTML%20%E8%B6%85%E6%96%87%E6%9C%AC%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2017/08/16/HTML%20%E8%B6%85%E6%96%87%E6%9C%AC%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>HTML 超文本（二）</p><h3 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h3><p>HTML列表标记主要有三种：有序列表、无序列表和定义列表。下面我们来一一的学习</p><p>(1).有序列表</p><p>有序列表始于 &lt; ol&gt; 标签。每个列表项始于 &lt; li&gt; 标签。列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;balabala&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><p>这就是一个比较简单的有序列表的最小元素，默认的排序方式就是以数字开头，下面我们来动手写写。</p><p>首先来一个最简单的列表，下面是是内容和效果：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423550151236"></p><p>在有序列表中我们还能定义其他的排序方式，上面是默认的数字排序，下面我们再加上字母排序和罗马数字排序</p><p>这里就只需要添加type属性就可以了，”a”表示以小写字母来排序;”A”就是使用大写字母来排序;”i”就是以小写罗马数字来排序;”I”就是以大写罗马数字来排序。</p><p>这里还可以添加start属性，决定起始地。</p><p>下面是范例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body style&#x3D;&quot;font-size:20px;background-color:gray&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;ol start&#x3D;&quot;2&quot;&gt;</span><br><span class="line">     &lt;li&gt;hadoop&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;linux&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;c &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ol&gt; </span><br><span class="line"></span><br><span class="line">    &lt;ol type&#x3D;&quot;a&quot;&gt;</span><br><span class="line">     &lt;li&gt;hadoop&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;linux&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;c &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ol&gt;     </span><br><span class="line"></span><br><span class="line">    &lt;ol type&#x3D;&quot;A&quot;&gt;</span><br><span class="line">     &lt;li&gt;hadoop&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;linux&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;c &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ol&gt;       </span><br><span class="line"></span><br><span class="line">    &lt;ol type&#x3D;&quot;i&quot;&gt;</span><br><span class="line">     &lt;li&gt;hadoop&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;linux&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;c &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ol&gt; </span><br><span class="line"></span><br><span class="line">     &lt;ol type&#x3D;&quot;I&quot;&gt;</span><br><span class="line">     &lt;li&gt;hadoop&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;linux&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li&gt;c &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ol&gt;     </span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423551306654"></p><p>看了效果图再回头对比下属性值</p><p>(2).无序列表</p><p>说完了有序列表，下面来讲讲无序列表。无序列表在HTML中还是很常用的。</p><p>无序列表始于 &lt; ul&gt; 标签。每个列表项始于 &lt; li&gt;（有序无序是一样的）。</p><p>无需列表排序的时候就是给每个列表项加各种小符号其中分为Disc（默认）实心黑点;Circle小圈;square方点，与有序列表的属性都是用的一样的，接下来我么就来动动手</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423552434597"></p><p>同样的，看了效果图再回头看看属性的设置</p><p>(3).定义性列表</p><p>定义列表通常用于术语的定义和解释。定义列表由&lt; dl&gt;开始，术语由&lt; dt&gt;开始，解释说明由&lt; dd&gt;开始，&lt; dd&gt;….&lt; /dd&gt;里的文字缩进显示。</p><p>下面我们就简单的操作下</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423553413734"></p><h3 id="HTML块"><a href="#HTML块" class="headerlink" title="HTML块"></a>HTML块</h3><p>首先 我们要知道，HTML元素被定义为块级元素或内联元素。那么什么是块级元素，什么是内联元素呢：</p><p>块级元素(block)特性：</p><p>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;</p><p>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;就像以前用到的 &lt; h1&gt;, &lt; p&gt;, &lt; ul&gt;, &lt; table&gt;标签。</p><p>内联元素(inline)特性：</p><p>和相邻的内联元素在同一行;宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变，就是里面文字或图片的大小;以前用到的&lt; b&gt;, &lt; td&gt;, &lt; a&gt;, &lt; img&gt;标签。</p><p>在这里我们先介绍两个标签&lt; div&gt;标签和&lt; span&gt;标签。</p><p>&lt; div&gt;用来定义文档中的分区或节（division/section），没有特定的含义。它是可用于组合其他 HTML 元素的容器</p><p>&lt; span&gt;用来组合文档中的行内元素，也没有特定的含义</p><p>下面我们来看看&lt; div&gt;标签的用法。</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423557651124"></p><h3 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h3><p>大多的网页布局要配合css来完成;css用于对元素进行定位或者为页面创建背景以及色彩丰富的外观。由于这里我们涉及到HTML的基础知识，我们就用我们现有的知识来进行布局。</p><p>网页布局可以通过&lt; table&gt;元素，或者&lt; div&gt;元素实现。</p><p>先来个简单的&lt; table&gt;布局网页</p><p>我们在上一章中学习了表格，那么下面我们就来将一个网页的一个板块用没有边框的表格来布局（添加背景颜色和布置文本内容）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;gray&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;table width&#x3D;&quot;1000&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td colspan&#x3D;&quot;2&quot; style&#x3D;&quot;background-color: royalblue&quot;&gt;</span><br><span class="line">            &lt;h1 align&#x3D;&quot;center&quot;&gt;shiyanlou book store&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr valign&#x3D;&quot;top&quot;&gt;</span><br><span class="line">        &lt;td style&#x3D;&quot;background-color: darkorange;width:300px&quot;&gt;</span><br><span class="line">          &lt;dl&gt;</span><br><span class="line">              &lt;dt&gt;list of book&lt;&#x2F;dt&gt;</span><br><span class="line">              &lt;dd&gt;</span><br><span class="line">                  &lt;ol&gt;</span><br><span class="line">                      &lt;li&gt;hadoop&lt;&#x2F;li&gt;</span><br><span class="line">                      &lt;li&gt;linux&lt;&#x2F;li&gt;</span><br><span class="line">                      &lt;li&gt;c&lt;&#x2F;li&gt;</span><br><span class="line">                  &lt;&#x2F;ol&gt;</span><br><span class="line">              &lt;&#x2F;dd&gt;</span><br><span class="line">          &lt;&#x2F;dl&gt;</span><br><span class="line">        &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td style&#x3D;&quot;background-color: forestgreen;height:500px;width:700px;&quot;&gt;</span><br><span class="line">            &lt;h1 style&#x3D;&quot;font-size: 20px;text-align: center&quot;&gt;the summary of the book&lt;&#x2F;h1&gt;</span><br><span class="line">        i will lead you to travel in the season of linux</span><br><span class="line">        &lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td colspan&#x3D;&quot;2&quot; style&#x3D;&quot;background-color: powderblue;text-align:center;height: 100px&quot;&gt;</span><br><span class="line">            good good study day day up&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423563987938"></p><p>大家可以看出，这个网页只是一个简单的表格，所用的都是我们学过的标签我而已，橙色中的还加入了我们上面刚学习的定义性列表嵌套有序列表。</p><p>下面我们再使用&lt; div&gt;元素进行布局（尽量达到上面的页面效果）：</p><p>一般的div元素结构就如下图（思路也是用table的思路）：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid120time1423624811796"></p><p>这里是具体实现内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div#container&#123;width:1000px&#125;</span><br><span class="line">        div#header &#123;background-color: royalblue ;height: 100px;text-align:center;font-size: 20px&#125;</span><br><span class="line">        div#sidebar&#123;background-color: darkorange;height:400px;width:300px;float:left;&#125;</span><br><span class="line">        div#mainbody &#123;background-color: forestgreen;height:400px;width:700px;float:left;&#125;</span><br><span class="line">        div#footer &#123;background-color: powderblue;height: 100px;clear:both;text-align:center;&#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;header&quot;&gt;</span><br><span class="line">        &lt;h1&gt;shiyanlou book store&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;sidebar&quot;&gt;</span><br><span class="line">       &lt;dl&gt;</span><br><span class="line">           &lt;dt&gt;list of book&lt;&#x2F;dt&gt;</span><br><span class="line">            &lt;dd&gt;</span><br><span class="line">                &lt;ol&gt;</span><br><span class="line">                    &lt;li&gt;hadoop&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li&gt;linux&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li&gt;c&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ol&gt;</span><br><span class="line">            &lt;&#x2F;dd&gt;</span><br><span class="line">       &lt;&#x2F;dl&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;mainbody&quot;&gt;</span><br><span class="line">        &lt;h1&gt;the summary of the book&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;i will lead you to travel in the season of linux&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;footer&quot;&gt;good good study day day up&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>只要将上面的style里的div定义和下面的div块对应就很好理解，这里的逻辑表达的很清晰，就不再赘述。直接来看看效果截图吧</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid120time1423630644273"></p><h3 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h3><p>学习表单首先我们要知道，表单标签是什么，表单标签就是用于网页中的数据提交，比如我们注册网页，在留言板中留言、评论等可以填写数据，提交处理地方都需要表单标签，form表单标签内有输入框input、单选、多选、select下拉列表菜单与跳转菜单、提交按钮等标签内容。下面我们就赶紧来动手试一试。</p><p>我们就直接在上面的代码中修改，首先我们尝试的，当然是搜集不同类型的用户输入，这里我们就只涉及文本和密码</p><p>只需要涉及到一个input type标签就能完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">username：</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">&lt;br &#x2F;&gt;</span><br><span class="line">password：</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>下面是页面截图：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid120time1423633532779"></p><p>当你输入时你会发现，username是可见的，password是被点替换了的，这就是这两个类型的区别。</p><p>下面我们再增增添两种选框，一种是多选，一种是单选。</p><p>当用户从若干给定的的选择中选取其一时，就会用到单选框。</p><p>单选框：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;male&quot; &#x2F;&gt; Male</span><br><span class="line">&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;female&quot; &#x2F;&gt; Female</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>多选框：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;married&quot; &#x2F;&gt;</span><br><span class="line">married</span><br><span class="line">&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;have a job&quot; &#x2F;&gt;</span><br><span class="line">have a job</span><br><span class="line">&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;chinese&quot; &#x2F;&gt;</span><br><span class="line">chinese</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid120time1423635240783"></p>]]></content>
      
      
      <categories>
          
          <category> HTML基础入门（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 超文本（一）</title>
      <link href="2017/08/16/HTML%20%E8%B6%85%E6%96%87%E6%9C%AC%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2017/08/16/HTML%20%E8%B6%85%E6%96%87%E6%9C%AC%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>HTML 超文本（一）</p><p>写在前面：因为这节要方便实现图片的调用，从这一章我们就可以使用环境中的开发软件Brackets（方便补全和查看），但是没有google chrome，不能实时预览，但至少，还有补全。</p><p>打开开发环境以后我们在桌面新建一个文件夹，以后我们工程的所有要用的东西就放在里面，方便调用。</p><h3 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h3><p>之所以你可以在浏览器屏幕上单击鼠标或在键盘上按下按键，从而选择并自动跳转到文档中自己感兴趣的那个主题，或跳转到世界上某处完全不同的集合中的某个文档。那是因为你点击的这就是超链接</p><p>相信大家对超链接不会陌生吧，天天都不知道点了多少个呢。超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，你可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。我们在前面的例子中只简单使用了&lt; a&gt;标签 ，用字符作为网业的超链接，还使用&lt; a&gt;实现了发送邮件的功能。下面我们要讲到的都是关于&lt; a&gt;标签的属性</p><p>我们这就详细来讲解HTML链接：</p><h4 id="给文字及图片添加超链接"><a href="#给文字及图片添加超链接" class="headerlink" title="给文字及图片添加超链接"></a>给文字及图片添加超链接</h4><p>首先我们还是回顾一下最简单的链接使用，直接给文字添加链接到网页和另外的HTML文件。</p><p>HTML内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt; html&gt;</span><br><span class="line">&lt; body&gt;</span><br><span class="line"></span><br><span class="line">    &lt; p&gt;let&#39;s have an example&lt; &#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt; p&gt;   </span><br><span class="line">        &lt; a href&#x3D;&quot;http:&#x2F;&#x2F;www.shiyanlou.com&quot;&gt;shiyanlou&lt; &#x2F;a&gt;</span><br><span class="line">    &lt; &#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt; &#x2F;body&gt;</span><br><span class="line">&lt; &#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这是自己在环境中的截图：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423297874394"></p><p>这是最简单的超链接,接下来我们就来让这个HTML文件链接到另一个HTML文件。（在相同的文件夹，再添加一个HTML文件），然后下面是HTML内容和结果</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423298769922"></p><p>点击进去以后（另一个HTML的内容就不再展示）：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423298798069"></p><p>说完了给文字添加超链接，下面我们就来说说给给图片添加超链接，点击图片，链接到另一个页面</p><p>这是内容与结果截图：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid120time1423450150809"></p><p>点击图片以后成功链接：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid120time1423450217924"></p><h4 id="超链接的打开方式"><a href="#超链接的打开方式" class="headerlink" title="超链接的打开方式"></a>超链接的打开方式</h4><p>打开方式分为在本页打开和在新的浏览器窗口打开，默认情况下，超级链接打开新页面的方式是自我覆盖（就是在本页打开）。根据浏览者的不同需要，读者可以指定超级链接的其他打开新窗口的方式。超级链接标签提供了target属性进行设置，取值分别为_self（自我覆盖，默认）、_blank（创建新窗口打开新页面）。下面我们就来动手区分下这两个属性的区别（由于我们已经写过默认的情况，这里我们就只添加_blank属性）</p><p>在前面的基础上我们在&lt; a&gt;标签加入target属性：target=”_blank”</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423447370274"></p><p>通过与第一张图的对比我们可以看出，_blank属性加上以后，链接到的网页是在新窗口中打开的，而默认的_self属性则是在本页面以覆盖的形式打开（第一张图）</p><h4 id="超链接添加提示文字"><a href="#超链接添加提示文字" class="headerlink" title="超链接添加提示文字"></a>超链接添加提示文字</h4><p>有些时候超链接文字不足以说明点击以后所要链接的内容，所以这个时候我们就需要给超链接添加提示文字，加以描述下一个链接的内容，当光标停留在超链接上时，提示语言就会显现，会让页面显现的很简介。设计到的属性就是title，下面我们再来动手实验一把</p><p>下面就是实验内容和效果</p><p>在前面的基础上，&lt; a&gt;标签加上title属性：title=”this word will link to the web of shiyanlou”</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423447370274"></p><h4 id="超链接实现书签"><a href="#超链接实现书签" class="headerlink" title="超链接实现书签"></a>超链接实现书签</h4><p>也许你在网页看过小说，当你在页首点击章节的题目，就会自动的跳转到相应的章节，这是怎样实现的呢？。要实现书签，你就要了解，什么是锚（anchor）。锚（anchor）是引自于船只上的锚，锚被抛下后，船只就不容易飘走、迷路。实际上锚就是用于在单个页面内不同位置的跳转，有的地方叫做书签。涉及到的标签当然还是&lt; a&gt;标签,超级链接标签的name属性用于定义锚的名称，一个页面可以定义多个锚，通过超级链接的href属性可以根据name跳转到对应的锚。</p><p>如下实现跳转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#跳转目的地名称&quot;&gt;跳转起始字符&lt;&#x2F;a&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;a name&#x3D;&quot;跳转目的地名称&quot;&gt;跳转目的地字符&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>下面我们就来具体的实现下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;title&gt;HTML&lt;&#x2F;title&gt;  </span><br><span class="line">    &lt;&#x2F;head&gt;  </span><br><span class="line">&lt;body style&#x3D;&quot;font-size:20px&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p style&#x3D;&quot;text-align:center&quot;&gt;HTML LEARNING&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#c1&quot;&gt;  HTML chushi&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#c2&quot;&gt;HTML wenben &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#c3&quot;&gt;HTML chaowenben 1 &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#c4&quot;&gt; HTML chaowenben 2 &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#c5&quot;&gt;HTML shiyan &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;&lt;a name&#x3D;&quot;c1&quot;&gt;&lt;&#x2F;a&gt;chapter 1 chushi HTML&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;&lt;a name&#x3D;&quot;c2&quot;&gt;&lt;&#x2F;a&gt;chapter 2 wenben HTML&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;&lt;a name&#x3D;&quot;c3&quot;&gt;&lt;&#x2F;a&gt;chapter 3 chaowenben 1 HTML&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;&lt;a name&#x3D;&quot;c4&quot;&gt;&lt;&#x2F;a&gt;chapter 4 chaowenben 2 HTML&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;&lt;a name&#x3D;&quot;c5&quot;&gt;&lt;&#x2F;a&gt;chapter 5 shiyan HTML&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;lalalaalalal&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423459809914"></p><p>点击实现跳转</p><h3 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h3><p>HTML 網頁設計不可或缺的元素就是表格（Table），通常表格用來做版面的排版，而表格的用法包含了幾個重要的标签，分別是 table、tr 與 td 這幾個重點，組合起來才是個完整的表格，表格由 &lt; table&gt; 标签来定义。每个表格均有若干行（由 &lt; tr&gt; 标签定义），每行被分割为若干单元格（由 &lt; td&gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。&lt; th&gt;标签用来定义表头。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><p>下面我们动手来写一个简单HTML文件来练习这几个标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;title &gt;TABLE&lt;&#x2F;title&gt;</span><br><span class="line">&lt;body style&#x3D;&quot;font-size:20px&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p style&#x3D;&quot;text-align:center&quot;&gt;table practice&lt;&#x2F;p&gt;  </span><br><span class="line"></span><br><span class="line">     &lt;table  align&#x3D;&quot;center&quot; border&#x3D;&quot;1&quot;&gt;  </span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;first row and first column&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;first row and second column&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;first row and third column&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">             &lt;td&gt;second row and first column&lt;&#x2F;td&gt;</span><br><span class="line">             &lt;td&gt;second row and second column&lt;&#x2F;td&gt;</span><br><span class="line">             &lt;td&gt;second row and third column&lt;&#x2F;td&gt;</span><br><span class="line">             &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">     &lt;&#x2F;table&gt;   </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这是实验截图：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423464099717"></p><p>border=”1”定义的是最外面边框粗细，为1，你也可以设置为0，就是不显示边框（默认就是没有边框）这里我们将其改成15试试：<br><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423464566699"></p><p>下面我们再介绍表格两个属性：</p><p>colspan：控制此单位所占列数</p><p>rowspan：控制此单位所占行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;title &gt;TABLE&lt;&#x2F;title&gt;</span><br><span class="line">&lt;body style&#x3D;&quot;font-size:30px&quot;&gt;</span><br><span class="line">    &lt;p style&#x3D;&quot;text-align:center&quot;&gt;table practice&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;table  align&#x3D;&quot;center&quot; border&#x3D;&quot;15&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">         &lt;td align&#x3D;&quot;center&quot; colspan&#x3D;&quot;2&quot;&gt;first row and first column&lt;&#x2F;td&gt;</span><br><span class="line">         &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">         &lt;td rowspan&#x3D;&quot;2&quot;&gt;second row and first column &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;second row and second column &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td &gt;second row and third column&lt;&#x2F;td&gt;</span><br><span class="line">         &lt;&#x2F;tr&gt;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;third row and first column &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;third row and second column &lt;&#x2F;td&gt;</span><br><span class="line">         &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;   </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>如果不是很理解，我们就来看看在网页上的表现，对比起来有助于我们理解。</p><p>让第一列第一行这个单位占两列，让第二行第一列这个单位占两行，就是这个效果。</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423466365267"></p><p>表格还有很多细节可以定义,我们早这里就简单叙述，大家需要动手练习：</p><ul><li><p>标签：&lt; th&gt;表头&lt; /th&gt;：设置表头</p></li><li><p>标签：&lt; caption&gt;标题&lt; /caption&gt;：设置表的标题</p></li><li><p>属性：cellpadding=”…”设置单元格边距</p></li><li><p>属性：bgcolor=”…”设置表格背景颜色</p></li><li><p>属性：background=”…” 以某张图片作为表格背景</p></li></ul><h3 id="HTML图像"><a href="#HTML图像" class="headerlink" title="HTML图像"></a>HTML图像</h3><p>上面我们简单提到过用图像作为链接使用，接下来我们来详细讲述下图像的应用。</p><p>一般我们用到的就是插入图片，将图片多为背景，再者将图片作为链接。涉及到的标签就是&lt; img&gt;&lt; /img&gt;</p><p>接下来我们就动手开始写一个HTML文件加深了解</p><p>首先我们用浏览器在网页上下载几张图片（放到和HTML文件一个文件夹中）供后面使用。</p><p>1.先设置一张图片为网页背景图片</p><p>在body 属性中加入background属性添加背景图片</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423473894835"></p><p>2.举例插入一张图片</p><p>写法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;路径加文件名&quot;&gt;</span><br></pre></td></tr></table></figure><p>擦入图片以后：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423474731446"></p><p>这时我们可以看出，字体和图片的低端是对其的，下面我们就来调整下对其方式</p><p>3.添加属性调整图片的对其方式</p><p>在&lt; img&gt;标签中加入align属性，调整对其。</p><p>相对习题的上下可以加的参数有 bottom、middle、top，默认就是我们刚看见的bottom</p><p>相对字体左右可加的参数有right，left默认为right</p><p>下面我们直接来比较下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;image test&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body background&#x3D;&quot;.&#x2F;qwe.gif&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;let&#39;s have an example&lt;img src&#x3D;&quot;.&#x2F;julizi.png&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt; align top&lt;img src&#x3D;&quot;.&#x2F;julizi.png&quot; align&#x3D;&quot;top&quot; &gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;align middle&lt;img src&#x3D;&quot;.&#x2F;julizi.png&quot; align&#x3D;&quot;middle&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;align left&lt;img src&#x3D;&quot;.&#x2F;julizi.png&quot; align&#x3D;&quot;left&quot; &gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423476154907"></p><p>4.调整插入图片尺寸</p><p>大多数的尺寸都没有那么合适，直接插入以后会破换整体页面的效果。所以在插入图片时，很有必要控制其尺寸，这是很容易办到的，就还需要在&lt; img&gt;标签中加入width height 两个属性。</p><p>那我们顺势就控制下上面的那几副图吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width&#x3D;&quot;80&quot; height&#x3D;&quot;80&quot;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid119time1423477212662"></p><p>（当然，我还调整了字体大小）</p><p>5.创建图像映射</p><p>在这之前我们动手试验过将图片作为链接来使用，触发链接的方式就是点击图片的任何地方都可以链接到跳转地址，有时我们需要实现，点击图片的不同地方跳转到不同的地方。意思就是，一张图片我们可以创建带有可供点击区域的图像地图，其中每个区域就是一个超链接。涉及到的标签就是&lt; map&gt;标签，用来指定图片,&lt; area&gt;用来指定超链接区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;xx.jpg&quot; usemap&#x3D;&quot;#mp&quot;&#x2F;&gt;  </span><br><span class="line">&lt;map name&#x3D;&quot;mp&quot; id&#x3D;&quot;mp&quot;&gt;  </span><br><span class="line">    &lt;area&gt;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    &lt;&#x2F;area&gt;  </span><br><span class="line">&lt;&#x2F;map&gt;</span><br></pre></td></tr></table></figure><p>这里以一张图片作为地图，</p><p>在&lt; area&gt;标签中我们会涉及到shape ，coords， href属性，分别用来指定超链接区域形状，超链接区域坐标，还有超链接跳转地。</p><p>这是具体实现内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;image test&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body background&#x3D;&quot;.&#x2F;qwe.gif&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;tap the li zi &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;julizi.png&quot; usemap&#x3D;&quot;#lizi&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;map name&#x3D;&quot;lizi&quot;&gt;</span><br><span class="line">     &lt;area shape&#x3D;&quot;rect&quot; coords&#x3D;&quot;50,10,100,60&quot; href&#x3D;&quot;img.html&quot; target&#x3D;&quot;_blank&quot;</span><br><span class="line">    &lt;&#x2F;map&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>然后，当我们点击小松鼠举起的栗子，你就会看见更多栗子</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid120time1423539023047"></p><p>shape属性的取值可以是：rect(矩形)、circle(圆形)、poly(多边形)和default(整个图像区域)。这里采用的是矩形。</p><p>coords属性对于矩形而言，coords有4个值，分别用逗号隔开，表示矩形区域左上角x坐标、左上角y坐标、右下角x坐标和右下角y坐标，这里获取坐标的方式，就用截图工具帮忙就好。</p><p>具体的代码与图片大家可以使用命令克隆一个到桌面上以验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git clone https:&#x2F;&#x2F;github.com&#x2F;shiyanlou&#x2F;HTML1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML基础入门（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1008 数组元素循环右移问题 (20)</title>
      <link href="2017/08/16/PAT(Basic%20Level)%201008%20%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB%E9%97%AE%E9%A2%98%20(20)/"/>
      <url>2017/08/16/PAT(Basic%20Level)%201008%20%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB%E9%97%AE%E9%A2%98%20(20)/</url>
      
        <content type="html"><![CDATA[<p>让我们定义 dn 为：dn = pn+1 - pn，其中 pi 是第i个素数。显然有 d1=1 且对于n&gt;1有 dn 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr></tbody></table><p>一个数组A中存有N（N&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（M&gt;=0）个位置，即将A中的数据由（A0 A1……AN-1）变换为（AN-M …… AN-1 A0 A1……AN-M-1）（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每个输入包含一个测试用例，第1行输入N ( 1&lt;=N&lt;=100)、M（M&gt;=0）；第2行输入N个整数，之间用空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 6 1 2 3 4</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;malloc.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    int move_bits;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;n, &amp;move_bits);</span><br><span class="line">    int* A &#x3D; (int*)malloc(n * sizeof(int));</span><br><span class="line">    </span><br><span class="line">    for ( int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ( move_bits &gt; n ) &#123;</span><br><span class="line">        move_bits -&#x3D; n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int flag &#x3D; n - move_bits - 1;</span><br><span class="line">    for ( flag; flag &gt;&#x3D; 0; flag-- ) &#123;</span><br><span class="line">        int tmp_flag &#x3D; flag;</span><br><span class="line">        for ( tmp_flag; tmp_flag - flag &lt; move_bits; tmp_flag++ ) &#123;</span><br><span class="line">            int t;</span><br><span class="line">            t &#x3D; A[tmp_flag];</span><br><span class="line">            A[tmp_flag] &#x3D; A[tmp_flag + 1];</span><br><span class="line">            A[tmp_flag + 1] &#x3D; t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    for ( int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">        if ( i &#x3D;&#x3D; n - 1 ) &#123;</span><br><span class="line">            printf(&quot;%d&quot;, A[i]);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            printf(&quot;%d &quot;, A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">move_str &#x3D; input().split()</span><br><span class="line">num_str &#x3D; input().split()</span><br><span class="line"></span><br><span class="line">move_num &#x3D; int(move_str[1])</span><br><span class="line">num_str_len &#x3D; len(num_str)</span><br><span class="line"></span><br><span class="line">if move_num &gt; num_str_len:</span><br><span class="line">    move_num -&#x3D; num_str_len</span><br><span class="line"></span><br><span class="line">if move_num &gt; 0:</span><br><span class="line">    output_str &#x3D; &#39; &#39;.join(num_str[0 - move_num:] + num_str[:num_str_len - move_num])</span><br><span class="line">else:</span><br><span class="line">    output_str &#x3D; &#39; &#39;.join(num_str)</span><br><span class="line"></span><br><span class="line">print(output_str)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1006 换个格式输出整数 (15)</title>
      <link href="2017/08/11/PAT(Basic%20Level)%201006%20%E6%8D%A2%E4%B8%AA%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E6%95%B4%E6%95%B0%20(15)/"/>
      <url>2017/08/11/PAT(Basic%20Level)%201006%20%E6%8D%A2%E4%B8%AA%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E6%95%B4%E6%95%B0%20(15)/</url>
      
        <content type="html"><![CDATA[<p>让我们用字母<code>B</code>来表示<code>“百”</code>、字母<code>S</code>表示<code>“十”</code>，用<code>“12...n”</code>来表示个位数字<code>n（&lt;10）</code>，换个格式来输出任一个不超过3位的正整数。例如<code>234</code>应该被输出为<code>BBSSS1234</code>，因为它有2个<code>“百”</code>、3个<code>“十”</code>、以及个位的4。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>让我们用字母B来表示“百”、字母S表示“十”，用“12…n”来表示个位数字n（&lt;10），换个格式来输出任一个不超过3位的正整数。例如234应该被输出为BBSSS1234，因为它有2个“百”、3个“十”、以及个位的4。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每个测试输入包含1个测试用例，给出正整数n（&lt;1000）。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>每个测试用例的输出占一行，用规定的格式输出n。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入样例1：</span><br><span class="line">234</span><br><span class="line">输出样例1：</span><br><span class="line">BBSSS1234</span><br><span class="line">输入样例2：</span><br><span class="line">23</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例2：</span><br><span class="line">SS123</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">num_str &#x3D; input()</span><br><span class="line"></span><br><span class="line">if int(num_str) &lt; 10:</span><br><span class="line">    for i in range(1, int(num_str) + 1):</span><br><span class="line">        print(i, end&#x3D;&#39;&#39;)</span><br><span class="line">elif int(num_str) &lt; 100:</span><br><span class="line">    print(&#39;S&#39; * int(num_str[0]), end&#x3D;&#39;&#39;)</span><br><span class="line">    for i in range(1, int(num_str[1]) + 1):</span><br><span class="line">        print(i, end&#x3D;&#39;&#39;)</span><br><span class="line">elif int(num_str) &lt; 1000:</span><br><span class="line">    print(&#39;B&#39; * int(num_str[0]), end&#x3D;&#39;&#39;)</span><br><span class="line">    print(&#39;S&#39; * int(num_str[1]), end&#x3D;&#39;&#39;)</span><br><span class="line">    for i in range(1, int(num_str[2]) + 1):</span><br><span class="line">        print(i, end&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1007 素数对猜想 (20)</title>
      <link href="2017/08/11/PAT(Basic%20Level)%201007%20%E7%B4%A0%E6%95%B0%E5%AF%B9%E7%8C%9C%E6%83%B3%20(20)/"/>
      <url>2017/08/11/PAT(Basic%20Level)%201007%20%E7%B4%A0%E6%95%B0%E5%AF%B9%E7%8C%9C%E6%83%B3%20(20)/</url>
      
        <content type="html"><![CDATA[<p>让我们定义 dn 为：dn = pn+1 - pn，其中 pi 是第i个素数。显然有 d1=1 且对于n&gt;1有 dn 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>让我们定义 dn 为：dn = pn+1 - pn，其中 pi 是第i个素数。显然有 d1=1 且对于n&gt;1有 dn 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数N (&lt; 105)，请计算不超过N的满足猜想的素数对的个数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每个测试输入包含1个测试用例，给出正整数N。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>每个测试用例的输出占一行，不超过N的满足猜想的素数对的个数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>20</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>4</code></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># python 最后一个示例运行超时。</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check_prime(n):</span><br><span class="line">    is_prime &#x3D; 1</span><br><span class="line">    for i in range(2, int(math.sqrt(n)) + 1):</span><br><span class="line">        if n % i &#x3D;&#x3D; 0:</span><br><span class="line">            is_prime &#x3D; 0</span><br><span class="line">            break</span><br><span class="line">    return is_prime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cnt_prime_pairs(n):</span><br><span class="line">    cnt &#x3D; 0</span><br><span class="line">    pn &#x3D; 1</span><br><span class="line">    for i in range(2, n + 1):</span><br><span class="line">        if check_prime(i):</span><br><span class="line">            dn &#x3D; i - pn</span><br><span class="line">            pn &#x3D; i</span><br><span class="line">            if dn &#x3D;&#x3D; 2:</span><br><span class="line">                cnt +&#x3D; 1</span><br><span class="line">    return cnt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    num &#x3D; int(input())</span><br><span class="line">    print(cnt_prime_pairs(num))</span><br></pre></td></tr></table></figure><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int check_prime(int n) &#123;</span><br><span class="line">int is_prime &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;直接使用&quot;%d&quot; sqrt(n) 为一个特别大的数，因此强制转换为 int 型 (int)sqrt(n)</span><br><span class="line">for ( int i &#x3D; 2; i &lt; (int)sqrt(n) + 1; i++ ) &#123;</span><br><span class="line">if ( n % i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">is_prime &#x3D; 0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return is_prime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int num;</span><br><span class="line">int cnt &#x3D; 0;</span><br><span class="line">int pn &#x3D; 1;</span><br><span class="line">int dn;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line">for ( int i &#x3D; 2; i &lt; num + 1; i++ ) &#123;</span><br><span class="line">if ( check_prime(i) ) &#123;</span><br><span class="line">dn &#x3D; i - pn;</span><br><span class="line">pn &#x3D; i;</span><br><span class="line">if ( dn &#x3D;&#x3D; 2 ) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;, cnt);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1005 继续(3n+1)猜想 (25)</title>
      <link href="2017/08/11/PAT(Basic%20Level)%201005%20%E7%BB%A7%E7%BB%AD(3n+1)%E7%8C%9C%E6%83%B3%20(25)/"/>
      <url>2017/08/11/PAT(Basic%20Level)%201005%20%E7%BB%A7%E7%BB%AD(3n+1)%E7%8C%9C%E6%83%B3%20(25)/</url>
      
        <content type="html"><![CDATA[<p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每个测试输入包含1个测试用例，第1行给出一个正整数K(&lt;100)，第2行给出K个互不相同的待验证的正整数n(1&lt;n&lt;=100)的值，数字间用空格隔开。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>7 6</code></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">#-*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">计算所有数字能覆盖的所有数字 -&gt; 判断列表中的数字哪个没有被覆盖并记录 -&gt; 输出</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">def getCallatzList(n):</span><br><span class="line">    CallatzList &#x3D; []</span><br><span class="line">    while n &gt; 1:</span><br><span class="line">        if n % 2 &#x3D;&#x3D; 0:</span><br><span class="line">            n &#x2F;&#x2F;&#x3D; 2</span><br><span class="line">        else:</span><br><span class="line">            n &#x3D; (3 * n + 1) &#x2F;&#x2F; 2</span><br><span class="line">        CallatzList.append(n)</span><br><span class="line">    return CallatzList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getKeyNumList(lst):</span><br><span class="line">    CallatzLists &#x3D; []</span><br><span class="line">    for n in lst:</span><br><span class="line">        CallatzLists +&#x3D; getCallatzList(n)</span><br><span class="line">    KeyNumList &#x3D; lst[:] # 必须复制一个新列表，在原列表操作因为原列表改变，而循环按照下标进行，导致元素被跳过。</span><br><span class="line">    for e in lst:</span><br><span class="line">        if e in CallatzLists:</span><br><span class="line">            KeyNumList.remove(e)</span><br><span class="line">    return KeyNumList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    drop &#x3D; input()</span><br><span class="line">    lst &#x3D; [int(n) for n in input().split()]</span><br><span class="line">    KeyNumList &#x3D; getKeyNumList(lst)</span><br><span class="line">    KeyNumList.sort()</span><br><span class="line">    KeyNumList.reverse()</span><br><span class="line">    print(&#39; &#39;.join([str(n) for n in KeyNumList]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 初识 HTML</title>
      <link href="2017/08/05/HTML%20%E5%88%9D%E8%AF%86%20HTML/"/>
      <url>2017/08/05/HTML%20%E5%88%9D%E8%AF%86%20HTML/</url>
      
        <content type="html"><![CDATA[<p>HTML 初识 HTML</p><h3 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h3><p>在这门课中我们会学习到HTML的基础运用，下面我用一张图来描述下我们整门课程的学习路径</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20406labid453time1423106716270"></p><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><ul><li><p>首先，HTML是一种语言，是用来描述网页的语言</p></li><li><p>HTML 指的是超文本标记语言 (Hyper Text Markup Language)</p></li><li><p>所谓的超文本就是指页面内可以包含图片、链接、甚至音乐，等非文字元素</p></li><li><p>HTML 不是一种编程语言，而是一种标记语言 (markup language)所以就算你什么编程语言都不懂，没关系，完全可以上手HTML。</p></li><li><p>标记语言：一套标记标签 (markup tag)（也就是一些特定的符号，后面我们会讲到）</p></li><li><p>HTML 就是使用标记标签来描述网页</p></li><li><p>HTML文件后缀名就是(.html),你可以使用一般的文本编辑器就能编辑（在我们环境中可以使用Brackets，gedit，vim），之后再使用浏览器打开，就能看见所你所编辑的网页</p></li></ul><p>下面我们就来看看别人写好的HTML文件</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20406labid366time1423042838041"></p><p>这张图是网上找的简单的html截图，我们也可以直接打开环境里的浏览器，右键，view page source。</p><p>实际的HTML文件和网页的展示就像下面的截图（实验楼的主页）：</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423279400999"></p><p>只是想让大家看看：html文件写出来就是长这个样的。但千万不要以为好麻烦的样子，很多HTML文件只是篇幅大而已，请相信，上手肯定不难的。下面我们一一解剖它。</p><h3 id="HTML文件结构"><a href="#HTML文件结构" class="headerlink" title="HTML文件结构"></a>HTML文件结构</h3><p>这里先看一张HTML的文件的结构图</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20407labid118time1423123992674"></p><p>在这张图中，展示的是html文件简单的结构图（各个部分我们会一一讲解），我们可以对比看，一般的html文件结构就是下面这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">            &lt;title&gt;.....&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">            &lt;p&gt;.....&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>前面说过，HTML是一种标记语言，这些&lt;..&gt;就叫做标签，而HTML就是使用这些标签来描述网页的。了解大体结构以后，后面我们会学习HTML的标签。</p><h3 id="HTML文档"><a href="#HTML文档" class="headerlink" title="HTML文档"></a>HTML文档</h3><p>HTML 文档也被称为网页</p><p>HTML 文档包含 HTML 标签和纯文本</p><p>Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML标签（相当于是隐藏的格式描述），而是使用标签来解释页面的内容：</p><p>下面我们具体来看一看对应的解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;First Heading&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">         &lt;p&gt;first paragraph&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>&lt; html&gt; 与 &lt; /html&gt; 之间的文本描述网页</p><p>&lt; body&gt; 与 &lt; /body&gt; 之间的文本是可见的页面内容</p><p>&lt; h1&gt; 与 &lt; /h1&gt; 之间的文本被显示为标题</p><p>&lt; p&gt; 与 &lt; /p&gt; 之间的文本被显示为段落</p><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><ul><li><p>什么是标签<br>标签就是上面这些&lt; head&gt;、&lt; body&gt;、&lt; table&gt; 等被尖括号“&lt;”和“&gt;”包起来的对象，绝大部分的标签都是成对出现的，如&lt; table&gt;&lt; /talbe&gt;、&lt; form&gt;&lt; /form&gt;。标签对中的第一个标签是开始标签，第二个标签是结束标签，开始和结束标签也被称为开放标签和闭合标签;当然还有少部分不是成对出现的，如&lt; br&gt;、&lt; hr&gt;等。标签就是用来标记HTML元素的。位于起始标签和结束标签之间的文本就是HTML元素的内容。</p></li><li><p>提前介绍什么是元素（对比）<br>很多人可能都没有把哪个叫标签，哪个叫元素这个概念搞清楚，学了一直都是混淆着。 为了避免这样的悲剧再发生，我在这里就提前区别，事实上两者之间的概念还是很清楚的</p></li></ul><p>HTML网页实际上就是由许许多多各种各样的HTML元素构成的文本文件，并且任何网页浏览器都可以直接运行HTML文件。所以可以这样说，HTML元素就是构成HTML文件的基本对象，HTML元素可以说是一个统称而已。HTML元素就是通过使用HTML标签进行定义的。</p><p>比如&lt; p&gt;这就是一个标签；&lt; p&gt;内容&lt; /p&gt;这就是一个元素，也就是说元素由一个开始的标签和结束的标签组成，用来包含某些内容;这里有一个值得注意的例外，即&lt; br/&gt;本身既是开始标签也是结束标签，但不包含任何内容，所以这只是个标签。</p><p>我们后面会有具体的章节来讲述元素，这里是为了避免概念与标签混乱先简单提一下。</p><ul><li><p>常用的标签<br>我们知道，网页能实现各种各样的定制，实现各种各样的功能，反过来可以说明我们的标签种类是很多的，这样才能实现各种各样的功能及定义。而这里我们先讲四个最基本的标签</p></li><li><p>HTML标题</p></li></ul><p>Heading 是通过 &lt; h1&gt; - &lt; h6&gt; 等标签进行定义的。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;This is first heading&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;This is second heading&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;This is third heading&lt;&#x2F;h3&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>HTML段落</li></ul><p>paragraph 是通过 &lt; p&gt; 标签进行定义的。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;This is another paragraph.&lt;&#x2F;p&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>HTML链接</li></ul><p>链接 是通过 &lt; a&gt; 标签进行定义的。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;shiyanlou.com&quot;&gt;This is a link&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><ul><li>HTML图像</li></ul><p>image是通过 &lt; img&gt; 标签进行定义的。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;shiyanlou.jpg&quot; width&#x3D;&quot;100&quot; height&#x3D;&quot;142&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>这里只是简单的展示四个常用的标签，至于具体使用方法及其他标签，我们会在后面章节具体讲述。这里还要补充的一点就是：HTML 标签对大小写不敏感：&lt; P&gt; 等同于 &lt; p&gt;。许多网站都使用大写的 HTML 标签。</p><p>W3School 使用的是小写标签，因为万维网联盟（W3C）在 HTML 4 中推荐使用小写，而在未来 (X)HTML 版本中强制使用小写。所以在之后的标签，还有属性的书写中我们一律采取小写。</p><h3 id="感受HTML"><a href="#感受HTML" class="headerlink" title="感受HTML"></a>感受HTML</h3><p>尽管现在我们还没有入门，尽管我们只知道了一丢丢，抛开一切，尝尝味道先。用上面刚学到的一两个标签，写一个简单的例子吧，体验一把编辑的乐趣。</p><p>我们就先写一个最简单的”hello shiyanlou “</p><p>这是自己在环境里面使用vim编辑器编辑的简单的test.html</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20406labid453time1423102515656"></p><p>保存之后用浏览器打开就是这样的</p><p><img src="https://dn-anything-about-doc.qbox.me/userid20406labid453time1423102528699"></p><p>大家可以对比结果与HTML内容看看</p>]]></content>
      
      
      <categories>
          
          <category> HTML基础入门（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 搜索和Readmore与RSS和分页</title>
      <link href="2017/08/05/Django%20%E6%90%9C%E7%B4%A2%E5%92%8CReadmore%E4%B8%8ERSS%E5%92%8C%E5%88%86%E9%A1%B5/"/>
      <url>2017/08/05/Django%20%E6%90%9C%E7%B4%A2%E5%92%8CReadmore%E4%B8%8ERSS%E5%92%8C%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>Django 搜索和Readmore与RSS和分页</p><h3 id="搜索和ReadMore"><a href="#搜索和ReadMore" class="headerlink" title="搜索和ReadMore"></a>搜索和ReadMore</h3><h4 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h4><p>搜索功能的实现设计:</p><ul><li>前端界面输入搜索关键字, 传送到对应view中</li><li>在对应的view中进行数据库关键字搜索</li></ul><p>这里搜索可以只对文章名搜索或者全文搜索，首先在my_blog/templates下添加所有输入框,在base.html中，对侧边栏的代码进行如下的修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;sidebar pure-u-1 pure-u-md-1-4&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">            &lt;h1 class&#x3D;&quot;brand-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;home&quot; %&#125;&quot;&gt;Andrew Liu Blog&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;h2 class&#x3D;&quot;brand-tagline&quot;&gt;Snow Memory&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;nav class&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">                &lt;ul class&#x3D;&quot;nav-list&quot;&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#123;% url &quot;archives&quot; %&#125;&quot;&gt;Archives&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;Andrew-liu&#x2F;my_blog_tutorial&quot;&gt;Github&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-error pure-button&quot; href&#x3D;&quot;http:&#x2F;&#x2F;weibo.com&#x2F;dinosaurliu&quot;&gt;Weibo&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#x2F;&quot;&gt;Pages&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#123;% url &quot;about_me&quot; %&#125;&quot;&gt;About Me&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                    &lt;form class&#x3D;&quot;pure-form&quot; action&#x3D;&quot;&#x2F;search&#x2F;&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">                    &lt;input class&#x3D;&quot;pure-input-3-3&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;s&quot; placeholder&#x3D;&quot;search&quot;&gt;</span><br><span class="line">                    &lt;&#x2F;form&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>在my_blog/article/views.py中添加查询逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def blog_search(request):</span><br><span class="line">    if &#39;s&#39; in request.GET:</span><br><span class="line">        s &#x3D; request.GET[&#39;s&#39;]</span><br><span class="line">        if not s:</span><br><span class="line">            return render(request,&#39;home.html&#39;)</span><br><span class="line">        else:</span><br><span class="line">            post_list &#x3D; Article.objects.filter(title__icontains &#x3D; s)</span><br><span class="line">            if len(post_list) &#x3D;&#x3D; 0 :</span><br><span class="line">                return render(request,&#39;archives.html&#39;, &#123;&#39;post_list&#39; : post_list,</span><br><span class="line">                                                    &#39;error&#39; : True&#125;)</span><br><span class="line">            else :</span><br><span class="line">                return render(request,&#39;archives.html&#39;, &#123;&#39;post_list&#39; : post_list,</span><br><span class="line">                                                    &#39;error&#39; : False&#125;)</span><br><span class="line">    return redirect(&#39;&#x2F;&#39;)</span><br></pre></td></tr></table></figure><p>这里为了简单起见, 直接对archives.html进行修改, 使其符合查询逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% if error %&#125;</span><br><span class="line">        &lt;h2 class&#x3D;&quot;post-title&quot;&gt;NOT Found&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time |date:&quot;Y &#x2F;m &#x2F;d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;&#123;% url &quot;search_tag&quot; tag&#x3D;post.category %&#125;&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>添加了if判断逻辑, 然后还需要修改views中的archives</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def archives(request) :</span><br><span class="line">    try:</span><br><span class="line">        post_list &#x3D; Article.objects.all()</span><br><span class="line">    except Article.DoesNotExist :</span><br><span class="line">        raise Http404</span><br><span class="line">    return render(request, &#39;archives.html&#39;, &#123;&#39;post_list&#39; : post_list, </span><br><span class="line">                                            &#39;error&#39; : False&#125;)</span><br></pre></td></tr></table></figure><p>最后添加my_blog/my_blog/urls.py设置url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # Examples:</span><br><span class="line">    # url(r&#39;^$&#39;, &#39;my_blog.views.home&#39;, name&#x3D;&#39;home&#39;),</span><br><span class="line">    # url(r&#39;^blog&#x2F;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, views.home, name &#x3D; &#39;home&#39;),</span><br><span class="line">    url(r&#39;^(?P&lt;id&gt;\d+)&#x2F;$&#39;, views.detail, name&#x3D;&#39;detail&#39;),</span><br><span class="line">    url(r&#39;^archives&#x2F;$&#39;, views.archives, name &#x3D; &#39;archives&#39;),</span><br><span class="line">    url(r&#39;^aboutme&#x2F;$&#39;, views.about_me, name &#x3D; &#39;about_me&#39;),</span><br><span class="line">    url(r&#39;^tag(?P&lt;tag&gt;\w+)&#x2F;$&#39;, views.search_tag, name &#x3D; &#39;search_tag&#39;),</span><br><span class="line">    url(r&#39;^search&#x2F;$&#39;,views.blog_search, name &#x3D; &#39;search&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最终效果。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1660timestamp1486456276218.png/wm"></p><h4 id="ReadMore功能"><a href="#ReadMore功能" class="headerlink" title="ReadMore功能"></a>ReadMore功能</h4><p>对于ReadMore的前段按钮界面设置早已经添加过了, 所以这里只需要进行简单的设置就好了</p><p>通过使用Django中内建的filter就可以速度实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|truncatewords:2 &#125;&#125; #这里2表示要显示的单词数, 以后的会被截断, 不在显示</span><br><span class="line">这里只需要修改my_blog&#x2F;templates&#x2F;home.html界面中的变量的过滤器</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将正文截断设置为10</span><br><span class="line"> &#123;&#123; post.content|custom_markdown|truncatewords_html:20 &#125;&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中输入<a href="http://localhost:9000/%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C(%E6%9C%80%E5%A5%BD%E6%8A%8A%E5%8D%9A%E6%96%87%E8%AE%BE%E7%BD%AE%E7%9A%84%E9%95%BF%E4%B8%80%E4%BA%9B)">http://localhost:9000/可以看到效果(最好把博文设置的长一些)</a></p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1660timestamp1486456859480.png/wm"></p><h3 id="RSS和分页"><a href="#RSS和分页" class="headerlink" title="RSS和分页"></a>RSS和分页</h3><h4 id="RSS功能"><a href="#RSS功能" class="headerlink" title="RSS功能"></a>RSS功能</h4><p>Django是一个全面型框架, 很多功能都可以直接找到, 对于RSS功能, 可以从其中的高层框架的聚合Feed框架中找到(The syndication feed framework)</p><p>上层Feed生成框架可以直接应用Feed类, 我们可以直接继承Feed在其中定义自己的方法</p><p>在my_blog/article/views.py中定义类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.syndication.views import Feed  #注意加入import语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RSSFeed(Feed) :</span><br><span class="line">    title &#x3D; &quot;RSS feed - article&quot;</span><br><span class="line">    link &#x3D; &quot;feeds&#x2F;posts&#x2F;&quot;</span><br><span class="line">    description &#x3D; &quot;RSS feed - blog posts&quot;</span><br><span class="line"></span><br><span class="line">    def items(self):</span><br><span class="line">        return Article.objects.order_by(&#39;-date_time&#39;)</span><br><span class="line"></span><br><span class="line">    def item_title(self, item):</span><br><span class="line">        return item.title</span><br><span class="line"></span><br><span class="line">    def item_pubdate(self, item):</span><br><span class="line">        return item.date_time</span><br><span class="line"></span><br><span class="line">    def item_description(self, item):</span><br><span class="line">        return item.content</span><br></pre></td></tr></table></figure><p>然后在my_blog/article/models.py中重写get_absolute_url方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.core.urlresolvers import reverse</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">class Article(models.Model) :</span><br><span class="line">    title &#x3D; models.CharField(max_length &#x3D; 100)  #博客题目</span><br><span class="line">    category &#x3D; models.CharField(max_length &#x3D; 50, blank &#x3D; True)  #博客标签</span><br><span class="line">    date_time &#x3D; models.DateTimeField(auto_now_add &#x3D; True)  #博客日期</span><br><span class="line">    content &#x3D; models.TextField(blank &#x3D; True, null &#x3D; True)  #博客文章正文</span><br><span class="line"></span><br><span class="line"> #获取URL并转换成url的表示格式</span><br><span class="line">    def get_absolute_url(self):</span><br><span class="line">        path &#x3D; reverse(&#39;detail&#39;, kwargs&#x3D;&#123;&#39;id&#39;:self.id&#125;)</span><br><span class="line">        return &quot;http:&#x2F;&#x2F;127.0.0.1:8000%s&quot; % path</span><br><span class="line"></span><br><span class="line">    def __str__(self) :</span><br><span class="line">        return self.title</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        ordering &#x3D; [&#39;-date_time&#39;]</span><br></pre></td></tr></table></figure><p>之后在my_blog/my_blog/urls.py中设置对应的url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views</span><br><span class="line">from article.views import RSSFeed</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # Examples:</span><br><span class="line">    # url(r&#39;^$&#39;, &#39;my_blog.views.home&#39;, name&#x3D;&#39;home&#39;),</span><br><span class="line">    # url(r&#39;^blog&#x2F;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^$&#39;, views.home&#39;, name &#x3D; &#39;home&#39;),</span><br><span class="line">    url(r&#39;^(?P&lt;id&gt;\d+)&#x2F;$&#39;, views.detail&#39;, name&#x3D;&#39;detail&#39;),</span><br><span class="line">    url(r&#39;^archives&#x2F;$&#39;, views.archives&#39;, name &#x3D; &#39;archives&#39;),</span><br><span class="line">    url(r&#39;^aboutme&#x2F;$&#39;, views.about_me&#39;, name &#x3D; &#39;about_me&#39;),</span><br><span class="line">    url(r&#39;^tag(?P&lt;tag&gt;\w+)&#x2F;$&#39;, views.search_tag&#39;, name &#x3D; &#39;search_tag&#39;),</span><br><span class="line">    url(r&#39;^search&#x2F;$&#39;,views.blog_search&#39;, name &#x3D; &#39;search&#39;),</span><br><span class="line">    url(r&#39;^feed&#x2F;$&#39;, RSSFeed(), name &#x3D; &quot;RSS&quot;),  #新添加的urlconf, 并将name设置为RSS, 方便在模板中使用url</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下面修改my_blog/templates/base.html, 在其中添加RSS按钮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;A layout example that shows off a blog page with a list of posts.&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;&#123;% block title %&#125; Andrew Liu Blog &#123;% endblock %&#125;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;pure-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;grids-responsive-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;blog.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;picturebag.qiniudn.com&#x2F;monokai.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;layout&quot; class&#x3D;&quot;pure-g&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;sidebar pure-u-1 pure-u-md-1-4&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">            &lt;h1 class&#x3D;&quot;brand-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;home&quot; %&#125;&quot;&gt;Andrew Liu Blog&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;h2 class&#x3D;&quot;brand-tagline&quot;&gt;Snow Memory&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;nav class&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">                &lt;ul class&#x3D;&quot;nav-list&quot;&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#123;% url &quot;archives&quot; %&#125;&quot;&gt;Archives&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;Andrew-liu&#x2F;my_blog_tutorial&quot;&gt;Github&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-error pure-button&quot; href&#x3D;&quot;http:&#x2F;&#x2F;weibo.com&#x2F;dinosaurliu&quot;&gt;Weibo&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#x2F;&quot;&gt;Pages&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                    &lt;form class&#x3D;&quot;pure-form&quot; action&#x3D;&quot;&#x2F;search&#x2F;&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">                    &lt;input class&#x3D;&quot;pure-input-3-3&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;s&quot; placeholder&#x3D;&quot;search&quot;&gt;</span><br><span class="line">                    &lt;&#x2F;form&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#123;% url &quot;about_me&quot; %&#125;&quot;&gt;About Me&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#123;% url &quot;RSS&quot; %&#125;&quot;&gt;RSS&lt;&#x2F;a&gt;  </span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;content pure-u-1 pure-u-md-3-4&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;pure-menu pure-menu-horizontal pure-menu-open&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;andrewliu.tk&#x2F;about&#x2F;&quot;&gt;About Me&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;twitter.com&#x2F;yuilibrary&#x2F;&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;github.com&#x2F;yahoo&#x2F;pure&#x2F;&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>保存后, 在浏览器中输入<a href="http://localhost:9000/%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%96%B0%E5%A2%9E%E7%9A%84RSS%E6%8C%89%E9%92%AE">http://localhost:9000/可以看到新增的RSS按钮</a>, 点击看以看到对应的效果。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1660timestamp1486460339485.png/wm"></p><p>更多功能可以查看The syndication feed framework官方文档</p><h4 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h4><p>当博客文章较多的时候, 我们并不希望以此在主页上显示全部的博客文章, 而是希望能够每页显示固定的文章数目, 这样既能提高性能, 也能提高美观度, 何乐而不为呢?</p><blockquote><p>现在这一章节来看看怎么实现分页功能</p><ul><li>首先添加包</li><li>重写home方法</li><li>修改模板</li></ul></blockquote><p>修改my_blog/article/views.py中的home函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger  #添加包</span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    posts &#x3D; Article.objects.all()  #获取全部的Article对象</span><br><span class="line">    paginator &#x3D; Paginator(posts, 2) #每页显示两个</span><br><span class="line">    page &#x3D; request.GET.get(&#39;page&#39;)</span><br><span class="line">    try :</span><br><span class="line">        post_list &#x3D; paginator.page(page)</span><br><span class="line">    except PageNotAnInteger :</span><br><span class="line">        post_list &#x3D; paginator.page(1)</span><br><span class="line">    except EmptyPage :</span><br><span class="line">        post_list &#x3D; paginator.paginator(paginator.num_pages)</span><br><span class="line">    return render(request, &#39;home.html&#39;, &#123;&#39;post_list&#39; : post_list&#125;)</span><br></pre></td></tr></table></figure><p>修改my_blog/templates下的home.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% load custom_markdown %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time |date:&quot;Y M d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;&#123;% url &quot;search_tag&quot; tag&#x3D;post.category %&#125;&quot;&gt;&#123;&#123; post.category|title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content|custom_markdown|truncatewords:10 &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;Read More &gt;&gt;&gt; &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if post_list.object_list and post_list.paginator.num_pages &gt; 1 %&#125;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;ul class&#x3D;&quot;pager&quot;&gt;</span><br><span class="line">      &#123;% if post_list.has_previous %&#125;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;?page&#x3D;&#123;&#123; post_list.previous_page_number &#125;&#125;&quot;&gt;Pre Page&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;% if post_list.has_next %&#125;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;?page&#x3D;&#123;&#123; post_list.next_page_number &#125;&#125;&quot;&gt;Next Page&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>我设置的是每页显示两篇博文, 可以修改成其他数值</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1660timestamp1486461201052.png/wm"><br><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1660timestamp1486461202147.png/wm"></p><p>更多细节可以查看pagination官方文档</p><p>保存后, 在浏览器中输入<a href="http://localhost:9000/%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%8B%E4%B8%80%E9%A1%B5%E6%8C%89%E9%92%AE(%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E8%A6%81%E5%A4%9A%E5%8A%A0%E5%87%A0%E7%AF%87)">http://localhost:9000/可以看到新增的下一页按钮(博客文章要多加几篇)</a>, 点击看以看到对应的效果</p><blockquote><p>到目前为止, 博客的基本功能都实现了, 下一篇我们将讲到怎么在云端进行部署</p></blockquote><p>最后我们把整个blog更新到github仓库中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$  git add .  #添加全部更新到暂存区</span><br><span class="line">$  git commit -m &quot;rss and paginator&quot;  #提交到git</span><br><span class="line">[master b53356b] rss and paginator</span><br><span class="line"> 2 files changed, 24 insertions(+), 1 deletion(-)</span><br><span class="line">$  git push  #提交到github中</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django 搭建简易博客（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 归档, AboutMe和标签分类</title>
      <link href="2017/08/05/Django%20%E5%BD%92%E6%A1%A3,%20AboutMe%E5%92%8C%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB/"/>
      <url>2017/08/05/Django%20%E5%BD%92%E6%A1%A3,%20AboutMe%E5%92%8C%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>Django 归档, AboutMe和标签分类</p><h3 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h3><p>归档就是列出当前博客中所有的文章, 并且能够显示时间, 很容易的可以写出对应的view和模板来</p><p>在my_blog/article/views.py添加如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def archives(request) :</span><br><span class="line">    try:</span><br><span class="line">        post_list &#x3D; Article.objects.all()</span><br><span class="line">    except Article.DoesNotExist :</span><br><span class="line">        raise Http404</span><br><span class="line">    return render(request, &#39;archives.html&#39;, &#123;&#39;post_list&#39; : post_list, </span><br><span class="line">                                            &#39;error&#39; : False&#125;)</span><br></pre></td></tr></table></figure><p>在my_blog/templates新建模板archives.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time |date:&quot;Y &#x2F;m &#x2F;d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>并在<code>my_blog/my_blog/urls.py</code>中添加对应url配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # Examples:</span><br><span class="line">    # url(r&#39;^$&#39;, &#39;my_blog.views.home&#39;, name&#x3D;&#39;home&#39;),</span><br><span class="line">    # url(r&#39;^blog&#x2F;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, views.home, name &#x3D; &#39;home&#39;),</span><br><span class="line">    url(r&#39;^(?P&lt;id&gt;\d+)&#x2F;$&#39;, views.detail, name&#x3D;&#39;detail&#39;),</span><br><span class="line">    url(r&#39;^archives&#x2F;$&#39;, views.archives, name &#x3D; &#39;archives&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最终的效果如图。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1659timestamp1486448266154.png/wm"></p><h3 id="AboutMe"><a href="#AboutMe" class="headerlink" title="AboutMe"></a>AboutMe</h3><p>这个就不多说了</p><p>在my_blog/my_blog/view.py下添加新的逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def about_me(request) :</span><br><span class="line">    return render(request, &#39;aboutme.html&#39;)</span><br><span class="line">在my_blog&#x2F;template下新建模板aboutme.html, 内容如下, 大家可以自定义自己喜欢的简介</span><br><span class="line"></span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% load custom_markdown %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">        &lt;p&gt; About Me ... &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>并在my_blog/my_blog/usls.py中添加对应url配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; patterns(&#39;&#39;,</span><br><span class="line">    # Examples:</span><br><span class="line">    # url(r&#39;^$&#39;, &#39;my_blog.views.home&#39;, name&#x3D;&#39;home&#39;),</span><br><span class="line">    # url(r&#39;^blog&#x2F;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, &#39;article.views.home&#39;, name &#x3D; &#39;home&#39;),</span><br><span class="line">    url(r&#39;^(?P&lt;id&gt;\d+)&#x2F;$&#39;, views.detail, name&#x3D;&#39;detail&#39;),</span><br><span class="line">    url(r&#39;^archives&#x2F;$&#39;, views.archives, name &#x3D; &#39;archives&#39;),</span><br><span class="line">    url(r&#39;^aboutme&#x2F;$&#39;, views.about_me, name &#x3D; &#39;about_me&#39;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>最终效果</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1659timestamp1486448628689.png/wm"></p><h3 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h3><p>实现功能: 点击对应的标签按钮, 会跳转到一个新的页面, 这个页面是所有相关标签的文章的罗列</p><p>只需要在在my_blog/atricle/views.py下添加新的逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def search_tag(request, tag) :</span><br><span class="line">    try:</span><br><span class="line">        post_list &#x3D; Article.objects.filter(category &#x3D; tag) #contains</span><br><span class="line">    except Article.DoesNotExist :</span><br><span class="line">        raise Http404</span><br><span class="line">    return render(request, &#39;tag.html&#39;, &#123;&#39;post_list&#39; : post_list&#125;)</span><br></pre></td></tr></table></figure><p>可以看成是对tag的查询操作, 通过传入对应点击的tag, 然后对tag进行查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在home.html,post.html,archive.html 文件中将tag对应的超链接代码修改为：&quot;&#123;% url &quot;search_tag&quot; tag&#x3D;post.category %&#125;&quot;</span><br></pre></td></tr></table></figure><p>在template文件夹中创建新的tag.html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% load custom_markdown %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time |date:&quot;Y M d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;&#123;% url &quot;search_tag&quot; tag&#x3D;post.category %&#125;&quot;&gt;&#123;&#123; post.category|title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content|custom_markdown &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;Read More &gt;&gt;&gt; &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仔细看这一句&lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;&#123;% url &quot;search_tag&quot; tag&#x3D;post.category %&#125;&quot;&gt;&#123;&#123; post.category|title &#125;&#125;&lt;&#x2F;a&gt;. 其中标签对超链接已经发生改变, &#96;&#96;&#96;</span><br></pre></td></tr></table></figure><p>这是在对标签就行点击时, 会将标签作为参数, 传入到对应的view中执行逻辑, 然后进行网页跳转…</p><p>并在my_blog/my_blog/usls.py中添加对应url配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; patterns(&#39;&#39;,</span><br><span class="line">    # Examples:</span><br><span class="line">    # url(r&#39;^$&#39;, &#39;my_blog.views.home&#39;, name&#x3D;&#39;home&#39;),</span><br><span class="line">    # url(r&#39;^blog&#x2F;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, views.home, name &#x3D; &#39;home&#39;),</span><br><span class="line">    url(r&#39;^(?P&lt;id&gt;\d+)&#x2F;$&#39;, views.detail, name&#x3D;&#39;detail&#39;),</span><br><span class="line">    url(r&#39;^archives&#x2F;$&#39;, views.archives, name &#x3D; &#39;archives&#39;),</span><br><span class="line">    url(r&#39;^aboutme&#x2F;$&#39;, views.about_me, name &#x3D; &#39;about_me&#39;),</span><br><span class="line">    url(r&#39;^tag(?P&lt;tag&gt;\w+)&#x2F;$&#39;, views.search_tag, name &#x3D; &#39;search_tag&#39;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>现在在浏览器中输入<a href="http://localhost:9000/">http://localhost:9000/</a>, 点击对应的归档或者ABOUT ME 或者标签按钮可以看到对应的效果。</p><p>我们在admin中添加了一个新的Article对象，并且这个Article对象的 category 是 C。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1659timestamp1486452523684.png/wm"></p><p>我们点击 红色的 Python 的 tag。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1659timestamp1486452637084.png/wm"></p><p>我们看到 URL 发生了变化，并且页面上只显示了 tag 是 Python 的 Article 对象。</p>]]></content>
      
      
      <categories>
          
          <category> Django 搭建简易博客（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Markdown和代码高亮</title>
      <link href="2017/08/05/Django%20Markdown%E5%92%8C%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/"/>
      <url>2017/08/05/Django%20Markdown%E5%92%8C%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<p>Django Markdown和代码高亮</p><h3 id="Markdown-你的博文"><a href="#Markdown-你的博文" class="headerlink" title="Markdown 你的博文"></a>Markdown 你的博文</h3><p>markdown越来越流行, 越来越多的写博客的博主都喜欢上了makrdown这种标记性语言的易用性和美观性. 像简书, 作业部落, Mou都是比较出名的markdown在线或者离线形式</p><p>现在我们就来markdown自己的博客, 首先是安装markdown库, 使用下面命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#首先是安装markdown</span><br><span class="line">$ sudo pip install markdown  #记得激活虚拟环境</span><br></pre></td></tr></table></figure><p>现在说说怎么markdown你的博文, 在article下建立新文件夹templatetags,然后我们来定义的自己的 template filter, 然后在templatetags中建立<strong>init</strong>.py, 让文件夹可以被看做一个包, 然后在文件夹中新建custom_markdown.py文件, 添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import markdown</span><br><span class="line"></span><br><span class="line">from django import template</span><br><span class="line">from django.template.defaultfilters import stringfilter</span><br><span class="line">from django.utils.encoding import force_text</span><br><span class="line">from django.utils.safestring import mark_safe</span><br><span class="line"></span><br><span class="line">register &#x3D; template.Library()  #自定义filter时必须加上</span><br><span class="line"></span><br><span class="line"># @符号开始的代码不是注释</span><br><span class="line">@register.filter(is_safe&#x3D;True)  #注册template filter</span><br><span class="line">@stringfilter  #希望字符串作为参数</span><br><span class="line">def custom_markdown(value):</span><br><span class="line">    return mark_safe(markdown.markdown(value,</span><br><span class="line">        extensions &#x3D; [&#39;markdown.extensions.fenced_code&#39;, &#39;markdown.extensions.codehilite&#39;],</span><br><span class="line">                                       safe_mode&#x3D;True,</span><br><span class="line">                                       enable_attributes&#x3D;False))</span><br></pre></td></tr></table></figure><p>在setting.py 的 INSTALLED_APPS 列表最后添加 article.templatetags.custom_markdown。</p><p>然后只需要对需要进行markdown化的地方进行简单的修改。我们回到templates文件夹中，修改post.html文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;--! post.html--&gt;</span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% load custom_markdown %&#125; # 新添加的代码</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time|date:&quot;Y &#x2F;m &#x2F;d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content|custom_markdown &#125;&#125; # 新添加的代码</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load custom_markdown %&#125;添加自定义的filter, 然后使用filter的方式为&#123;&#123; post.content|custom_markdown &#125;&#125;.</span><br></pre></td></tr></table></figure><p>现在我们进入admin界面，对Article对象的内容 content 使用 markdown 语句进行修改。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1658timestamp1486442878299.png/wm"></p><p>现在我们再看一下每一篇博文的效果：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1658timestamp1486442986973.png/wm"></p><p>我们的主页 home.html 也要做相应的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--home.html--&gt;</span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% load custom_markdown %&#125; # 新添加的代码</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time |date:&quot;Y &#x2F;m &#x2F;d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content|custom_markdown &#125;&#125; # 新添加的代码</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;Read More &gt;&gt;&gt; &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>现在启动web服务器, 在浏览器中输入<a href="http://localhost:9000/">http://localhost:9000/</a>, 可以看到全新的的markdown效果</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1658timestamp1486443595708.png/wm"></p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>这里代码高亮使用一个CSS文件导入到网页中就可以实现了, 因为在上面写markdown的filter中已经添加了扩展高亮的功能, 所以现在只要下载CSS文件就好了.</p><p>在pygments找到你想要的代码主题, 我比较喜欢monokai, 然后在pygments-css下载你喜欢的CSS主题, 然后加入当前博客目录的static目录下, 或者最简单的使用</p><p>修改base.html的头部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;A layout example that shows off a blog page with a list of posts.&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;&#123;% block title %&#125; Andrew Liu Blog &#123;% endblock %&#125;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;pure-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;grids-responsive-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;blog.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;monokai.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><p>添加CSS样式到base.html就可以了.</p><p>现在启动web服务器, 添加一个带有markdown样式的代码的文章, 就能看到效果了, 在浏览器中输入<a href="http://localhost:9000/">http://localhost:9000/</a></p>]]></content>
      
      
      <categories>
          
          <category> Django 搭建简易博客（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Template和动态URL</title>
      <link href="2017/08/05/Django%20Template%E5%92%8C%E5%8A%A8%E6%80%81URL/"/>
      <url>2017/08/05/Django%20Template%E5%92%8C%E5%8A%A8%E6%80%81URL/</url>
      
        <content type="html"><![CDATA[<p>Django Template和动态URL</p><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><h4 id="Template初探"><a href="#Template初探" class="headerlink" title="Template初探"></a>Template初探</h4><p>到目前为止我们只是简单的将后端数据显示到页面上, 没有涉及到HTML代码, 而优雅的网站总算通过CSS+HTML, 甚至还有强大的JS的支持.</p><p>在这个教程中要打造一个Blog, 所以我们设置一个Blog界面, 原本打算使用Bootstrap作为前段的工具, 不过经过@游逸的建议, 使用了更加轻量级的Pure, 同样是响应式页面设置, 这也将是未来的主流吧..</p><p>在my_blog下添加文件名, 文件夹名为templates</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir templates</span><br><span class="line"></span><br><span class="line">#看到当前文件构成</span><br><span class="line">my_blog</span><br><span class="line">├── article</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   ├── __init__.cpython-34.pyc</span><br><span class="line">│   │   ├── admin.cpython-34.pyc</span><br><span class="line">│   │   ├── models.cpython-34.pyc</span><br><span class="line">│   │   └── views.cpython-34.pyc</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   ├── 0001_initial.py</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── __pycache__</span><br><span class="line">│   │       ├── 0001_initial.cpython-34.pyc</span><br><span class="line">│   │       └── __init__.cpython-34.pyc</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── my_blog</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   ├── __init__.cpython-34.pyc</span><br><span class="line">│   │   ├── settings.cpython-34.pyc</span><br><span class="line">│   │   ├── urls.cpython-34.pyc</span><br><span class="line">│   │   └── wsgi.cpython-34.pyc</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── templates</span><br></pre></td></tr></table></figure><p>1.7/1.8版本Django已经修改的template添加形式</p><p>在<code>my_blog/my_blog/settings.py</code>下设置templates的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#尝试这种写法</span><br><span class="line">TEMPLATE_PATH &#x3D; os.path.join(BASE_DIR, &#39;templates&#39;)</span><br><span class="line">TEMPLATES &#x3D; (</span><br><span class="line">    ...</span><br><span class="line">    DIRS: [TEMPLATE_PATH],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>意思是告知项目templates文件夹在项目根目录下</p><h4 id="第一个template"><a href="#第一个template" class="headerlink" title="第一个template"></a>第一个template</h4><p>templates/test.html 简单第一个 template html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在test.html文件下添加--&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Just test template&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            body &#123;</span><br><span class="line">               background-color: red;</span><br><span class="line">            &#125;</span><br><span class="line">            em &#123;</span><br><span class="line">                color: LightSeaGreen;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Hello World!&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;strong&gt;&#123;&#123; current_time &#125;&#125;&lt;&#x2F;strong&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; current_time &#125;&#125;</span><br></pre></td></tr></table></figure><p>是Django Template中变量的表示方式</p><p>在article/views.py中添加一个函数逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from article.models import Article</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home(request):</span><br><span class="line">    return HttpResponse(&quot;Hello World, Django&quot;)</span><br><span class="line"></span><br><span class="line">def detail(request, my_args):</span><br><span class="line">    post &#x3D; Article.objects.all()[int(my_args)]</span><br><span class="line">    str &#x3D; (&quot;title &#x3D; %s, category &#x3D; %s, date_time &#x3D; %s, content &#x3D; %s&quot; </span><br><span class="line">        % (post.title, post.category, post.date_time, post.content))</span><br><span class="line">    return HttpResponse(str)</span><br><span class="line"></span><br><span class="line">def test(request) :</span><br><span class="line">    return render(request, &#39;test.html&#39;, &#123;&#39;current_time&#39;: datetime.now()&#125;)</span><br></pre></td></tr></table></figure><p>render()函数中第一个参数是request 对象, 第二个参数是一个模板名称，第三个是一个字典类型的可选参数. 它将返回一个包含有给定模板根据给定的上下文渲染结果的 HttpResponse对象。</p><p>然后设置对应的url在my_blog/my_blog/urls.py下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&#39;^test&#x2F;$&#39;, views.test),</span><br></pre></td></tr></table></figure><p>重新启动服务器python manage.py runserver localhost:9000, 然后在浏览器中输入<a href="http://localhost:9000/test/">http://localhost:9000/test/</a>, 可以看到</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid13labid1657timestamp1453878935617.png/wm"></p><h4 id="正式编写template"><a href="#正式编写template" class="headerlink" title="正式编写template"></a>正式编写template</h4><p>在template文件夹下增加base.html, 并在其中增加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;A layout example that shows off a blog page with a list of posts.&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;Andrew Liu Blog&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;pure-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;grids-responsive-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;blog.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;layout&quot; class&#x3D;&quot;pure-g&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;sidebar pure-u-1 pure-u-md-1-4&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">            &lt;h1 class&#x3D;&quot;brand-title&quot;&gt;Andrew Liu Blog&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;h2 class&#x3D;&quot;brand-tagline&quot;&gt;Snow Memory&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;nav class&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">                &lt;ul class&#x3D;&quot;nav-list&quot;&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;Andrew-liu&quot;&gt;Github&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;http:&#x2F;&#x2F;weibo.com&#x2F;dinosaurliu&quot;&gt;Weibo&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;content pure-u-1 pure-u-md-3-4&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;pure-menu pure-menu-horizontal pure-menu-open&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;andrewliu.tk&#x2F;about&#x2F;&quot;&gt;About Me&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;twitter.com&#x2F;yuilibrary&#x2F;&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;github.com&#x2F;yahoo&#x2F;pure&#x2F;&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>上面这段html编写的页面是一个模板, 其中]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>字段用来被其他继承这个基类模板进行重写</p><p>我们继续在templates文件夹下添加home.html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time &#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- &#123;% for &lt;element&gt; in &lt;list&gt; %&#125;与&#123;% endfor %&#125;成对存在, 这是template中提供的for循环tag</span><br><span class="line">- &#123;% if &lt;elemtnt&gt; %&#125; &#123;% else %&#125; &#123;% endif %&#125;是template中提供的if语句tag</span><br><span class="line">- template中还提供了一些过滤器</span><br></pre></td></tr></table></figure><p>然后修改my_blog/article/views.py, 并删除test.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from article.models import Article</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home(request):</span><br><span class="line">    post_list &#x3D; Article.objects.all()  #获取全部的Article对象</span><br><span class="line">    return render(request, &#39;home.html&#39;, &#123;&#39;post_list&#39; : post_list&#125;)</span><br><span class="line">修改my_blog&#x2F;my_blog&#x2F;urls.py：</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^$&#39;, views.home),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在重新打开<a href="http://localhost:9000/">http://localhost:9000/</a>, 发现Blog的整理框架已经基本完成, 到现在我们已经了解了一些Django的基本知识, 搭建了简单地Blog框架, 剩下的就是给Blog添加功能</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid13labid1657timestamp1453879474437.png/wm"></p><p>查看当前整个程序的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">my_blog</span><br><span class="line">├── article</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   ├── __init__.cpython-34.pyc</span><br><span class="line">│   │   ├── admin.cpython-34.pyc</span><br><span class="line">│   │   ├── models.cpython-34.pyc</span><br><span class="line">│   │   └── views.cpython-34.pyc</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   ├── 0001_initial.py</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── __pycache__</span><br><span class="line">│   │       ├── 0001_initial.cpython-34.pyc</span><br><span class="line">│   │       └── __init__.cpython-34.pyc</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── my_blog</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   ├── __init__.cpython-34.pyc</span><br><span class="line">│   │   ├── settings.cpython-34.pyc</span><br><span class="line">│   │   ├── urls.cpython-34.pyc</span><br><span class="line">│   │   └── wsgi.cpython-34.pyc</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── templates</span><br><span class="line">    ├── base.html</span><br><span class="line">    └── home.html</span><br></pre></td></tr></table></figure><h4 id="将代码上传到Github"><a href="#将代码上传到Github" class="headerlink" title="将代码上传到Github"></a>将代码上传到Github</h4><p>也可以选择保存代码到实验楼的内置代码库。</p><p>在github中新建仓库my_blog_tutorial, 填写简单的描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#查看当前目录位置</span><br><span class="line">$ pwd</span><br><span class="line">&#x2F;Users&#x2F;andrew_liu&#x2F;Python&#x2F;Django&#x2F;my_blog</span><br><span class="line"></span><br><span class="line">#在项目的根目录下初始化git</span><br><span class="line">git init</span><br><span class="line">Initialized empty Git repository in&#x2F;Users&#x2F;andrew_liu&#x2F;Python&#x2F;Django&#x2F;my_blog&#x2F;.git&#x2F;</span><br><span class="line"></span><br><span class="line">#添加远程github</span><br><span class="line">$ git remote add blog git@github.com:Andrew-liu&#x2F;my_blog_tutorial.git</span><br><span class="line">在根目录下增加&#96;.gitignore&#39;和&#39;LICENSE&#39;和&#39;README.md&#39;文件</span><br><span class="line"></span><br><span class="line">#添加所有文件</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">#查看当前状态</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">#commit操作</span><br><span class="line">$ git commit -m &quot;django tutorial init&quot;</span><br><span class="line"></span><br><span class="line">#上传github</span><br><span class="line">$ git push -u blog master</span><br><span class="line">Counting objects: 23, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (22&#x2F;22), done.</span><br><span class="line">Writing objects: 100% (23&#x2F;23), 19.56 KiB | 0 bytes&#x2F;s, done.</span><br><span class="line">Total 23 (delta 1), reused 0 (delta 0)</span><br><span class="line">To git@github.com:Andrew-liu&#x2F;my_blog_tutorial.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from blog</span><br></pre></td></tr></table></figure><h3 id="动态URL"><a href="#动态URL" class="headerlink" title="动态URL"></a>动态URL</h3><h4 id="动态URL-1"><a href="#动态URL-1" class="headerlink" title="动态URL"></a>动态URL</h4><p>运行已经做好的博客框架, 会发现一个问题, 只有一个主页的空盒子, 而大部分时候我们希望能够让每篇博客文章都有一个独立的页面.</p><p>我第一个想到的方法是给每篇博客文章加一个view函数逻辑, 然后设置一个独立的url(我不知道语言比如PHP, 或者web框架rail等是如果解决的, 我是第一次仔细的学习web框架, 也没有前端开发经验), 但是这种方法耦合性太强, 而且用户不友好, 缺点非常多</p><p>Django给我们提供了一个方便的解决方法, 就是动态URL<br>现在修改my_blog/article/views.py代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from article.models import Article</span><br><span class="line">from datetime import datetime</span><br><span class="line">from django.http import Http404</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home(request):</span><br><span class="line">    post_list &#x3D; Article.objects.all()  #获取全部的Article对象</span><br><span class="line">    return render(request, &#39;home.html&#39;, &#123;&#39;post_list&#39; : post_list&#125;)</span><br><span class="line"></span><br><span class="line">def detail(request, id):</span><br><span class="line">    try:</span><br><span class="line">        post &#x3D; Article.objects.get(id&#x3D;str(id))</span><br><span class="line">    except Article.DoesNotExist:</span><br><span class="line">        raise Http404</span><br><span class="line">    return render(request, &#39;post.html&#39;, &#123;&#39;post&#39; : post&#125;)</span><br></pre></td></tr></table></figure><p>因为id是每个博文的唯一标识, 所以这里使用id对数据库中的博文进行查找</p><p>在my_blog/my_blog/urls.py中修改url设置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # Examples:</span><br><span class="line">    # url(r&#39;^$&#39;, &#39;my_blog.views.home&#39;, name&#x3D;&#39;home&#39;),</span><br><span class="line">    # url(r&#39;^blog&#x2F;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, views.home, name &#x3D; &#39;home&#39;),</span><br><span class="line">    url(r&#39;^(?P&lt;id&gt;\d+)&#x2F;$&#39;, views.detail, name&#x3D;&#39;detail&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在templates下建立一个用于显示单页博文的界面 post.html:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#post.html</span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time|date:&quot;Y &#x2F;m &#x2F;d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>可以发现只需要对home.html进行简单的修改, 去掉循环就可以了.</p><p>修改home.html和base.html, 加入动态链接和主页, 归档, 专题和About Me按钮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--home.html--&gt;</span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time |date:&quot;Y &#x2F;m &#x2F;d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;&quot;&gt;Read More &gt;&gt;&gt; &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>base.html:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--base.html--&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;A layout example that shows off a blog page with a list of posts.&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;Andrew Liu Blog&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;pure-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;grids-responsive-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;487&#x2F;blog.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;layout&quot; class&#x3D;&quot;pure-g&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;sidebar pure-u-1 pure-u-md-1-4&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">            &lt;h1 class&#x3D;&quot;brand-title&quot;&gt;&lt;a href&#x3D;&quot;&#123;% url &quot;home&quot; %&#125;&quot;&gt;Andrew Liu Blog&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;h2 class&#x3D;&quot;brand-tagline&quot;&gt;Snow Memory&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;nav class&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">                &lt;ul class&#x3D;&quot;nav-list&quot;&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#x2F;&quot;&gt;Archive&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;Andrew-liu&#x2F;my_blog_tutorial&quot;&gt;Github&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-error pure-button&quot; href&#x3D;&quot;http:&#x2F;&#x2F;weibo.com&#x2F;dinosaurliu&quot;&gt;Weibo&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#x2F;&quot;&gt;Pages&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;button-success pure-button&quot; href&#x3D;&quot;&#x2F;&quot;&gt;About Me&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;content pure-u-1 pure-u-md-3-4&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;pure-menu pure-menu-horizontal pure-menu-open&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;andrewliu.tk&#x2F;about&#x2F;&quot;&gt;About Me&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;twitter.com&#x2F;yuilibrary&#x2F;&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;github.com&#x2F;yahoo&#x2F;pure&#x2F;&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>其中主要改动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> - 添加了几个导航按钮, 方便以后添加功能(暂时不添加登陆功能)</span><br><span class="line"> - 添加read more按钮</span><br><span class="line"> - 在博客文章的增加一个链接, 链接的href属性为&#123;% url &quot;detail&quot; id&#x3D;post.id %&#125;, 当点击这个文章题目时, 会将对应的数据库对象的id传入的url中, 类似于url传参, 不记得的同学可以重新回到前几页翻一下.</span><br><span class="line"></span><br><span class="line">这里将数据库对象唯一的id传送给url设置, url取出这个id给对应的view中的函数逻辑当做参数. 这样这个id就传入对应的参数中被使用</span><br><span class="line"> </span><br><span class="line">比如: 点击到的博客文章标题的对象对应的id&#x3D;2, 这个id被传送到name&#x3D;detail的url中, &#39;^(?P\d+)&#x2F;$&#39;正则表达式匹配后取出id, 然后将id传送到article.views.detail作为函数参数, 然后通过get方法获取对应的数据库对象, 然后对对应的模板进行渲染, 发送到浏览器中..</span><br></pre></td></tr></table></figure><p>此时重新运行服务器, 然后在浏览器中输入<a href="http://localhost:9000/%E7%82%B9%E5%87%BB%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E9%A2%98%E7%9B%AE">http://localhost:9000/点击对应的博客文章题目</a>, 可以成功的跳转到一个独立的页面中</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid13labid1657timestamp1453880032574.png/wm"></p>]]></content>
      
      
      <categories>
          
          <category> Django 搭建简易博客（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo unexpected token 错误解决方法</title>
      <link href="2017/08/05/Hexo%20unexpected%20token%20%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2017/08/05/Hexo%20unexpected%20token%20%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Hexo unexpected token 错误解决方法</p><h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Template render error: (unknown path) [Line 21, Column 16]</span><br><span class="line">  unexpected token: &lt;</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这类异常一般是文章中使用了大括号 <code>&#123; &#125;</code> 这个特殊字符,且没有转义导致编译不通过</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>将包含大括号的部分当作代码放到 ``` 之间即可。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Models和Admin以及Views和URL</title>
      <link href="2017/08/04/Django%20Models%E5%92%8CAdmin%E4%BB%A5%E5%8F%8AViews%E5%92%8CURL/"/>
      <url>2017/08/04/Django%20Models%E5%92%8CAdmin%E4%BB%A5%E5%8F%8AViews%E5%92%8CURL/</url>
      
        <content type="html"><![CDATA[<p>Django Models和Admin以及Views和URL</p><h3 id="Django-Shell"><a href="#Django-Shell" class="headerlink" title="Django Shell"></a>Django Shell</h3><p>现在我们进入Django中的交互式shell来进行数据库的增删改查等操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py shell</span><br><span class="line">Python 3.4.2 (v3.4.2:ab2c023a9432, Oct  5 2014, 20:42:22)</span><br><span class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>这里进入Django的shell和python内置的shell是非常类似的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from article.models import Article</span><br><span class="line">&gt;&gt;&gt; #create数据库增加操作</span><br><span class="line">&gt;&gt;&gt; Article.objects.create(title &#x3D; &#39;Hello World&#39;, category &#x3D; &#39;Python&#39;, content &#x3D; &#39;Let us add a database item&#39;)</span><br><span class="line">&lt;Article: Article object&gt;</span><br><span class="line">&gt;&gt;&gt; Article.objects.create(title &#x3D; &#39;Django Blog Study&#39;, category &#x3D; &#39;Python&#39;, content &#x3D; &#39;Django Blog Tutorial&#39;)</span><br><span class="line">&lt;Article: Article object&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; #all和get的数据库查看操作</span><br><span class="line">&gt;&gt;&gt; Article.objects.all()  #查看全部对象, 返回一个列表, 无对象返回空list</span><br><span class="line">[&lt;Article: Article object&gt;, &lt;Article: Article object&gt;]</span><br><span class="line">&gt;&gt;&gt; Article.objects.get(id &#x3D; 1)  #返回符合条件的对象</span><br><span class="line">&lt;Article: Article object&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; #update数据库修改操作</span><br><span class="line">&gt;&gt;&gt; first &#x3D; Article.objects.get(id &#x3D; 1)  #获取id &#x3D; 1的对象</span><br><span class="line">&gt;&gt;&gt; first.title</span><br><span class="line">&#39;Hello World&#39;</span><br><span class="line">&gt;&gt;&gt; first.date_time</span><br><span class="line">datetime.datetime(2014, 12, 26, 13, 56, 48, 727425, tzinfo&#x3D;&lt;UTC&gt;)</span><br><span class="line">&gt;&gt;&gt; first.content</span><br><span class="line">&#39;Let us add a database item&#39;</span><br><span class="line">&gt;&gt;&gt; first.category</span><br><span class="line">&#39;Python&#39;</span><br><span class="line">&gt;&gt;&gt; first.content &#x3D; &#39;Hello World, How are you&#39;</span><br><span class="line">&gt;&gt;&gt; first.content  #再次查看是否修改成功, 修改操作就是点语法</span><br><span class="line">&#39;Hello World, How are you&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; #delete数据库删除操作</span><br><span class="line">&gt;&gt;&gt; first.delete()</span><br><span class="line">&gt;&gt;&gt; Article.objects.all()  #此时可以看到只有一个对象了, 另一个对象已经被成功删除</span><br><span class="line">[&lt;Article: Article object&gt;]  </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;Article.objects.filter(title&#x3D;&#39;Django Blog Study&#39;)  # 使用 filter() 按题目过滤</span><br><span class="line">&lt;QuerySet [&lt;Article: Django Blog Study&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;Article.objects.filter(title&#x3D;&#39;Django Blog Study&#39;, id&#x3D;&quot;1&quot;) # 也可以多个条件</span><br><span class="line">&lt;QuerySet [&lt;Article: Django Blog Study&gt;]&gt;</span><br><span class="line">#上面是精确匹配 也可以包含性查询</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;Article.objects.filter(title__contains&#x3D;&#39;Django&#39;)</span><br><span class="line">&lt;QuerySet [&lt;Article: Django Blog Study&gt;]&gt;</span><br><span class="line"></span><br><span class="line">#数据排序</span><br><span class="line">Article.objects.order_by(&quot;title&quot;)</span><br><span class="line">Article.objects.order_by(&quot;-titile&quot;)  # 倒序</span><br><span class="line"></span><br><span class="line">#如果需要以多个字段为标准进行排序（第二个字段会在第一个字段的值相同的情况下被使用到），使用多个参数就可以了</span><br><span class="line">Article.objects.order_by(&quot;title&quot;, &quot;id&quot;)</span><br><span class="line"></span><br><span class="line">#连锁查询</span><br><span class="line">Article.objects.filter(title__contains&#x3D;&#39;Django&#39;).order_by(&quot;-id&quot;)</span><br><span class="line"></span><br><span class="line">#限制返回的数据数量</span><br><span class="line">Article.objects.filter(title__contains&#x3D;&#39;Django&#39;)[0]</span><br><span class="line">Article.objects.filter(title__contains&#x3D;&#39;Django&#39;)[0:3]  #可以进行类似于列表的操作</span><br></pre></td></tr></table></figure><h3 id="使用第三方插件"><a href="#使用第三方插件" class="headerlink" title="使用第三方插件"></a>使用第三方插件</h3><p>Django现在已经相对成熟, 已经有许多不错的可以使用的第三方插件可以使用, 这些插件各种各样, 现在我们使用一个第三方插件使后台管理界面更加美观, 目前大部分第三方插件可以在Django Packages 中查看,</p><p>尝试使用django-admin-bootstrap美化后台管理界面</p><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install bootstrap-admin</span><br></pre></td></tr></table></figure><p>配置</p><p>然后在my_blog/my_blog/settings.py中修改INSTALLED_APPS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    &#39;bootstrap_admin&#39;,  #一定要放在&#96;django.contrib.admin&#96;前面</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;article&#39;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">from django.conf import global_settings</span><br><span class="line">BOOTSTRAP_ADMIN_SIDEBAR_MENU &#x3D; True</span><br></pre></td></tr></table></figure><p>保存后, 再次刷新页面, localhost:9000/admin</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid13labid1622timestamp1453877675428.png/wm"></p><p>界面是不是美腻了许多…</p><h3 id="简单Django-Views和URL"><a href="#简单Django-Views和URL" class="headerlink" title="简单Django Views和URL"></a>简单Django Views和URL</h3><p>Django中views里面的代码就是一个一个函数逻辑, 处理客户端(浏览器)发送的HTTPRequest, 然后返回HTTPResponse,</p><p>那么开始在my_blog/article/views.py中编写简单的逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#现在你的views.py应该是这样</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home(request):</span><br><span class="line">    return HttpResponse(&quot;Hello World, Django&quot;)</span><br></pre></td></tr></table></figure><p>那么如何使这个逻辑在http请求进入时, 被调用呢, 这里需要在my_blog/my_blog/urls.py中进行url设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^$&#39;, views.home),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>url()函数有四个参数, 两个是必须的:regex和view, 两个可选的:kwargs和name</p><ul><li><p>regex是regular expression的简写,这是字符串中的模式匹配的一种语法, Django 将请求的URL从上至下依次匹配列表中的正则表达式，直到匹配到一个为止。</p><ul><li>更多正则表达式的使用可以查看Python正则表达式</li></ul></li><li><p>view当 Django匹配了一个正则表达式就会调用指定的view逻辑, 上面代码中会调用article/views.py中的home函数</p></li><li><p>kwargs任意关键字参数可传一个字典至目标view</p></li><li><p>name命名你的 URL, 使url在 Django 的其他地方使用, 特别是在模板中</p></li></ul><p>现在在浏览器中输入localhost:9000应该可以看到下面的界面</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid13labid1622timestamp1453877933084.png/wm"></p><h3 id="Django-Views和URL更近一步"><a href="#Django-Views和URL更近一步" class="headerlink" title="Django Views和URL更近一步"></a>Django Views和URL更近一步</h3><p>很多时候我们希望给view中的函数逻辑传入参数, 从而呈现我们想要的结果</p><p>现在我们这样做, 在my_blog/article/views.py加入如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def detail(request, my_args):</span><br><span class="line">    return HttpResponse(&quot;You&#39;re looking at my_args %s.&quot; % my_args)</span><br></pre></td></tr></table></figure><p>在my_blog/my_blog/urls.py中设置对应的url,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line"></span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^$&#39;, views.home),</span><br><span class="line">    url(r&#39;^(?P&lt;my_args&gt;\d+)&#x2F;$&#39;, views.detail, name&#x3D;&#39;detail&#39;),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p><code>^(?P&lt;my_args&gt;\d+)/$</code>这个正则表达式的意思是将传入的一位或者多位数字作为参数传递到views中的detail作为参数, 其中<code>?P&lt;my_args&gt;</code>定义名称用于标识匹配的内容</p><p>我们尝试如下的URL</p><p><a href="http://localhost:9000/1000/">http://localhost:9000/1000/</a></p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid1622timestamp1486361696800.png/wm"></p><p>尝试传参访问数据库</p><p>修改在my_blog/article/views.py代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from article.models import Article</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home(request):</span><br><span class="line">    return HttpResponse(&quot;Hello World, Django&quot;)</span><br><span class="line"></span><br><span class="line">def detail(request, my_args):</span><br><span class="line">    post &#x3D; Article.objects.all()[int(my_args)]</span><br><span class="line">    str &#x3D; (&quot;title &#x3D; %s, category &#x3D; %s, date_time &#x3D; %s, content &#x3D; %s&quot; </span><br><span class="line">        % (post.title, post.category, post.date_time, post.content))</span><br><span class="line">    return HttpResponse(str)</span><br></pre></td></tr></table></figure><p>这里最好在admin后台管理界面增加几个Article对象, 防止查询对象为空, 出现异常<br>现在可以访问 <a href="http://localhost:9000/1/">http://localhost:9000/1/</a></p><p>显示如下数据表示数据库访问正确(这些数据都是自己添加的), 并且注意Article.objects.all()返回的是一个列表</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid13labid1622timestamp1453878203088.png/wm"></p>]]></content>
      
      
      <categories>
          
          <category> Django 搭建简易博客（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 开发环境以及项目与App</title>
      <link href="2017/08/04/Django%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%8EApp/"/>
      <url>2017/08/04/Django%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E9%A1%B9%E7%9B%AE%E4%B8%8EApp/</url>
      
        <content type="html"><![CDATA[<p>Django 开发环境以及项目与App</p><h3 id="添加-django-admin-py-到环境变量"><a href="#添加-django-admin-py-到环境变量" class="headerlink" title="添加 django-admin.py 到环境变量"></a>添加 django-admin.py 到环境变量</h3><p>django-admin.py 的位置位于/usr/local/lib/python2.7/dist-packages/django/bin 当中。在命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;environment</span><br></pre></td></tr></table></figure><p>在PATH =之后加上’<code>:/usr/local/lib/python2.7/dist-packages/django/bin</code>‘</p><h3 id="命令总结"><a href="#命令总结" class="headerlink" title="命令总结"></a>命令总结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python manage.py &lt;command&gt; [options]  #Django Command</span><br><span class="line">python manange.py -h帮助文档</span><br><span class="line">django-admin.py startproject my_blog  #创建项目</span><br><span class="line">python manage.py startapp article  #创建app</span><br><span class="line">python manage.py runserver localhost:9000  #启动Django中的开发服务器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django 搭建简易博客（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 搭建简易博客之三 - 使用动态URL</title>
      <link href="2017/08/04/Django%20%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%89%20-%20%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81URL/"/>
      <url>2017/08/04/Django%20%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%89%20-%20%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81URL/</url>
      
        <content type="html"><![CDATA[<p>Django 搭建简易博客之三 - 使用动态URL</p><h3 id="动态-URL-技术"><a href="#动态-URL-技术" class="headerlink" title="动态 URL 技术"></a>动态 URL 技术</h3><p>运行已经做好的博客，会发现只有主页一个空盒子。所以接下来我们要为每一篇文章增加一个独立的页面来展示其详细内容。</p><p>如果我们给每一篇文章增加一个 view 层函数逻辑，然后设置一个独立的 url，那样的话工作太过于繁琐，并且项目的耦合性着实太强，复用性很低。Django 为我们提供了一个很优雅的解决方法，即 动态URL。</p><p>我们来修改一下 my_blog/article/views.py 的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from article.models import Article</span><br><span class="line">from datetime import datetime</span><br><span class="line">from django.http import Http404</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home(request):</span><br><span class="line">    post_list &#x3D; Article.objects.all()  </span><br><span class="line">    return render(request, &#39;home.html&#39;, &#123;&#39;post_list&#39; : post_list&#125;)</span><br><span class="line"></span><br><span class="line">def detail(request, my_args):</span><br><span class="line">    print(my_args)</span><br><span class="line">    post &#x3D; Article.objects.get(id&#x3D;int(my_args))</span><br><span class="line">    return render(request, &#39;post.html&#39;, &#123;&#39;post&#39;: post&#125;)</span><br></pre></td></tr></table></figure><p>从代码中可以看出，我们需要为 my_args 传入一个 post 的 id。这里我们在 home.html 中实现动态 URL 即可完成我们的需求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time &#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                    &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;&#x2F;&#123;&#123; post.id &#125;&#125;&quot;&gt;</span><br><span class="line">                        Read More &gt;&gt;&gt;</span><br><span class="line">                    &lt;&#x2F;a&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>然后我们来制作每一篇文章的详情页面。其实和主页的思路很像，我们只需要将对于文章的遍历删除即可完成单篇文章的详情页构建。建立 post.html。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">   &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">       &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">          &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">          &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">              Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time|date:&quot;Y &#x2F;m &#x2F;d&quot;&#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">          &lt;&#x2F;p&gt;</span><br><span class="line">       &lt;&#x2F;header&gt;</span><br><span class="line">           &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">               &lt;p&gt;</span><br><span class="line">                   &#123;&#123; post.content &#125;&#125;</span><br><span class="line">               &lt;&#x2F;p&gt;</span><br><span class="line">           &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;section&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>为了看出文章列表的效果，我打开 admin 界面再添加一个文章。这时候 <a href="http://127.0.0.1:1103/">http://127.0.0.1:1103/</a> 查看效果。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2847timestamp1492672147987.png/wm"></p><p>返回点击一篇文章的 Read More&gt;&gt; 查看详情按钮，则会看到文章详情页的展示：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2847timestamp1492672159329.png/wm"><br>我们注意到上方的 URL 部分已经自动将文章的 id 获取出来并实现动态 URL 跳转。</p>]]></content>
      
      
      <categories>
          
          <category> Django 进阶教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 搭建简易博客之二 - 完成前端渲染</title>
      <link href="2017/08/03/Django%20%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%BA%8C%20-%20%E5%AE%8C%E6%88%90%E5%89%8D%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
      <url>2017/08/03/Django%20%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%BA%8C%20-%20%E5%AE%8C%E6%88%90%E5%89%8D%E7%AB%AF%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>Django 搭建简易博客之二 - 完成前端渲染</p><h3 id="Views-和路由设置"><a href="#Views-和路由设置" class="headerlink" title="Views 和路由设置"></a>Views 和路由设置</h3><p>由之前的教程，我们得知网页的逻辑如下：</p><p><code>request 进来 -&gt; 从服务器获取数据 -&gt; 处理数据 -&gt; 把网页呈现出来</code></p><p>url 设置相当于从客户端先个服务器发出 request 请求的入口，并用来知名要调用的程序逻辑。<br>views 用来处理程序逻辑，然后传递数据到 template。<br>template 一般为 html + css 的形式，主要是呈现给用户的表现形式。<br>我们已经完成了底层数据（文章列表）的基础。所以由内向外，开始构建数据处理。下面我们来编辑 views.py 的逻辑并规划路由。</p><p>编辑 my_blog/article/views.py 中编写简单的逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from article.models import Article</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home(request):</span><br><span class="line">    return HttpResponse(&quot;Hello World, Django&quot;)</span><br><span class="line"></span><br><span class="line">def detail(request, my_args):</span><br><span class="line">    post &#x3D; Article.objects.all()[int(my_args)]</span><br><span class="line">    str &#x3D; (&quot;title &#x3D; %s, category &#x3D; %s, date_time &#x3D; %s, content &#x3D; %s&quot; </span><br><span class="line">        % (post.title, post.category, post.date_time, post.content))</span><br><span class="line">    return HttpResponse(str)</span><br></pre></td></tr></table></figure><p>我们在 views.py 中增加了一些包。其中有 HttpResponse 用于处理以字符串形式的 response 。另外我们还需要将之前创建的 Article 这个 model 引入进来。因为我们需要描述文章，用这个 model 再适合不过。</p><p>在 home 方法中，直接返回一个字符串形式的 response，用于测试使用。而在 detail 方法中，我们通过与数据和的交互，来将文章列表返回给用户。</p><p>也许你会问，这里的 my_args 我们应该如何获取呢？其实该参数可以直接从路由的正则表达式中可以直接拿出，下面我们编辑路由。编辑 my_blog/my_blog/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import include, url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from article import views as article_views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, article_views.home, name &#x3D; &#39;home&#39;),</span><br><span class="line">    url(r&#39;^(?P&lt;my_args&gt;\d+)&#x2F;$&#39;, article_views.detail, name &#x3D; &#39;detail&#39;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><code>^(?P&lt;my_args&gt;\d+)/$</code> 这个正则表达式的意识是将传入的一位或者多为数字作为参数传递到 views 中的 detail 方法作为参数。其中 <code>?P&lt;my_args&gt;</code> 定义名称用于标识匹配的内容。</p><p>由于此时我们数据库中只有之前创建的一条记录，所以当 my_args = 0 时才能获取成功。以下是效果图：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2846timestamp1492672068684.png/wm"></p><h3 id="编写-Template，优化视觉体验"><a href="#编写-Template，优化视觉体验" class="headerlink" title="编写 Template，优化视觉体验"></a>编写 Template，优化视觉体验</h3><p>到目前为止，我们完成了后端数据显示到页面上的流程，下面我们开始涉及到 HTML 代码，使得博客通过 HTML + CSS 的渲染后，漂亮的显示到浏览器上。</p><p>我们使用 Pure 这个轻量级前端响应式框架来展现我们的 blog。</p><p>我们在 article 目录下创建 templates 目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir article&#x2F;templates</span><br></pre></td></tr></table></figure><p>然后在该目录下建立模板基础文件 base.html：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;A layout example that shows off a blog page with a list of posts.&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;Shiyanlou Blog&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;803&#x2F;blog.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;803&#x2F;grids-responsive-min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;803&#x2F;pure-min.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;layout&quot; class&#x3D;&quot;pure-g&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;sidebar pure-u-1 pure-u-md-1-4&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">            &lt;h1 class&#x3D;&quot;brand-title&quot;&gt;Shiyanlou Blog&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;nav class&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">                &lt;ul class&#x3D;&quot;nav-list&quot;&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;#&quot;&gt;Github&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;pure-button&quot; href&#x3D;&quot;#&quot;&gt;Weibo&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;content pure-u-1 pure-u-md-3-4&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;pure-menu pure-menu-horizontal pure-menu-open&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;About Me&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在这个文件中，首先我们导入 pure-min.css、grids-responsive-min.css、blog.css 这三个 css 样式集。这个是为大家预先准备好的三个文件，用于控制我们的博客样式。在文章集合显示的部分，我们发现了如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>这两个字段是 Django 中模板未见自带的关键字，它的作用是 用来被其他继承此基类模板进行重写。所以我们接下来要编辑所继承的那个超集模板。</p><p>我们在 templates 目录下继续添加 home.html 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;posts&quot;&gt;</span><br><span class="line">    &#123;% for post in post_list %&#125;</span><br><span class="line">        &lt;section class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">                &lt;h2 class&#x3D;&quot;post-title&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">                        Time:  &lt;a class&#x3D;&quot;post-author&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.date_time &#125;&#125;&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;post-category post-category-js&quot; href&#x3D;&quot;#&quot;&gt;&#123;&#123; post.category &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;post-description&quot;&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &#123;&#123; post.content &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;p&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.blog-post --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>我们来解释一下这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &#96;&#123;% for &lt;element&gt; in &lt;list&gt; %&#125;&#96; 与 &#96;&#123;% endfor %&#125;&#96; 成对存在, 这是template 中提供的 for 循环 tag</span><br><span class="line"># &#96;&#123;% if &lt;elemtnt&gt; %&#125; &#123;% else %&#125; &#123;% endif %&#125;&#96; 是 template 中提供的 if 语句 tag</span><br></pre></td></tr></table></figure><p>所以我们要往其中加入 post 的数据。继续编辑 views.py，修改 home 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def home(request):</span><br><span class="line">    post_list &#x3D; Article.objects.all()  #获取全部的Article对象</span><br><span class="line">    return render(request, &#39;home.html&#39;, &#123;&#39;post_list&#39; : post_list&#125;)</span><br></pre></td></tr></table></figure><p>大功告成。我们重新访问 <a href="http://127.0.0.1:1103/">http://127.0.0.1:1103/</a> 可以看见在开篇实现的效果：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2846timestamp1492672092402.png/wm"></p><blockquote><p>环境中所使用的 firefox 浏览器似乎对渲染响应式布局有些问题，在尺寸过宽的情况下无法显示 pure 的布局效果。但是在窄屏（适用于移动端）模式下却显示正常。(╯‵□′)╯︵┻━┻；上图为窄屏模式下的效果图。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django 进阶教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 搭建博客之一 - 基础数据构建</title>
      <link href="2017/08/03/Django%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%80%20-%20%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E6%9E%84%E5%BB%BA/"/>
      <url>2017/08/03/Django%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%80%20-%20%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Django 搭建博客之一 - 基础数据构建</p><h3 id="构建基础工程"><a href="#构建基础工程" class="headerlink" title="构建基础工程"></a>构建基础工程</h3><p>从本章节开始，我们通过之前学到的知识来构建一个简易的博客项目。希望从中，各位学员可以继续巩固 Django 知识，并完成第一个 Django 小项目。</p><p>话不多说，正式开始。我们在 /home/shiyanlou/ 目录下创建一个名为 my_blog 的 Django 项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin.py startproject my_blog</span><br></pre></td></tr></table></figure><p>进入 my_blog 目录中建立一个 article app:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp article</span><br></pre></td></tr></table></figure><p>之后我们需要在 settings.py 中添加这个 app：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;article&#39;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="创建-Models-对博客文章进行描述"><a href="#创建-Models-对博客文章进行描述" class="headerlink" title="创建 Models 对博客文章进行描述"></a>创建 Models 对博客文章进行描述</h3><p>在 Django 项目建成后，默认设置了使用 SQLite 数据库，在 settings.py 中可以查看和修改数据库设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,</span><br><span class="line">        &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们编写 my_blog/article/models.py 来创建 models。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">class Article(models.Model) :</span><br><span class="line">    title &#x3D; models.CharField(max_length &#x3D; 100)  </span><br><span class="line">    category &#x3D; models.CharField(max_length &#x3D; 50, blank &#x3D; True)  # blank &#x3D; True 允许字段为空，默认不允许</span><br><span class="line">    date_time &#x3D; models.DateTimeField(auto_now_add &#x3D; True)  </span><br><span class="line">    content &#x3D; models.TextField(blank &#x3D; True, null &#x3D; True)  # null &#x3D; True 空值储存为 Null</span><br><span class="line">    def __str__(self) :</span><br><span class="line">        return self.title</span><br><span class="line"></span><br><span class="line">    class Meta: </span><br><span class="line">        ordering &#x3D; [&#39;-date_time&#39;]</span><br></pre></td></tr></table></figure><p>这里，title 、category、date_time、content 分别对应一篇博文的题目、标签、日期和正文内容。</p><p>而定义 <strong>str</strong> 方法是为了告诉数据库 Article 对象如何表示自己，系统默认的使用 <code>&lt;Article: Article object&gt;</code> 来表示对象。另外，指定 Meta 是为了按照时间降序排列。</p><ul><li>CharField 用于存储字符串, max_length设置最大长度</li><li>TextField 用于存储大量文本</li><li>DateTimeField 用于存储时间, auto_now_add设置True表示自动设置对象增加时间</li></ul><p>修改 admin.py 配置后台，进入 article 目录，修改 admin.py 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Article</span><br><span class="line"></span><br><span class="line">admin.site.register(Article)</span><br></pre></td></tr></table></figure><h3 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><p>当出现 OK 字样代表数据库同步成功。</p><p>在my_blog的根目录下执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><p>进入 Django 的交互式 shell 来进行数据库的增加基础数据操作。同时该过程还可以验证数据库表的创建成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from article.models import Article</span><br><span class="line">&gt;&gt;&gt; Article.objects.create(title &#x3D; &#39;Hello World&#39;, category &#x3D; &#39;Python&#39;, content &#x3D; &#39;This is a sample.&#39;)</span><br><span class="line">&lt;Article: Article object&gt;</span><br></pre></td></tr></table></figure><p>这里我们增加一篇文章，其标题是 Hello World，所属的标签为 Python，其中的主要内容为 This is a sample.。当我们看见 <code>&lt;Article: Article object&gt; </code>字样，说明我们的创建已经生效。下图是在实验楼环境下使用 Django 的交互式 shell 的测试结果（由于在作者的环境中已经安装 iPython 工具，则 shell 或自动使用该工具习惯进行启动）。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2845timestamp1492673207120.png/wm"></p><h3 id="建立后台管理"><a href="#建立后台管理" class="headerlink" title="建立后台管理"></a>建立后台管理</h3><p>在这个教程中我们讲过 Django 的一个有些特性，内置 Django admin 后台管理界面，方便管理者进行添加和删除网站数据库中的内容。由于 blog 有大量的文章需要我们来管理，所以这里我们引入这个工具。</p><p>新建的项目系统已经为我们设置好了后台管理功能，在 my_blog/my_blog/settings.py 中可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    &#39;django.contrib.admin&#39;,  #默认添加后台管理功能</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;article&#39;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>同时也已经添加了进入后台管理的 url，可以在 my_blog/my_blog/urls.py 中查看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import patterns, include, url</span><br><span class="line">from django.contrib import admin</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; patterns(&#39;&#39;,</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后我们来创建超级管理员。使用改一下命令创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py createsuperuser</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manege.py runserver 1103</span><br></pre></td></tr></table></figure><p>根据他的提示，输入用户名、邮箱、密码之后创建成功。我们在 <a href="http://127.0.0.1:1103/admin/">http://127.0.0.1:1103/admin/</a> 输入刚刚创建的超级管理员用户名和密码进行后台登录：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2845timestamp1492673258836.png/wm"></p><p>从这里我们可以看到刚刚使用 shell 创建的一个 Article 条目：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2845timestamp1492673289005.png/wm">描述</p>]]></content>
      
      
      <categories>
          
          <category> Django 进阶教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 服务安装及命令使用（进阶篇）</title>
      <link href="2017/07/27/MySQL%20%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E5%8F%8A%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%EF%BC%88%E8%BF%9B%E9%98%B6%E7%AF%87%EF%BC%89/"/>
      <url>2017/07/27/MySQL%20%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E5%8F%8A%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%EF%BC%88%E8%BF%9B%E9%98%B6%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MySQL 服务安装及命令使用（进阶篇）</p><h3 id="MySQL介绍"><a href="#MySQL介绍" class="headerlink" title="MySQL介绍"></a>MySQL介绍</h3><blockquote><p>MySQL是一个关系型数据库管理系统，由瑞典MySQLAB公司开发，目前属于Oracle公司。MySQL是最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。<br>MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<br>MySQL所使用的SQL语言是用于访问数据库的最常用标准化语言。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择MySQL作为网站数据库。由于其社区版的性能卓越，搭配PHP和Apache可组成良好的开发环境。</p></blockquote><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>实验楼环境已经为大家安装好了 MySQL，无需大家再次安装，以下安装仅用于大家学习使用</p><h4 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h4><p>可以从官网下载MySQL安装软件包。在Windows中安装MySQL时，新用户可以使用MySQL安装帮助和MySQL Configuration Wizard（配置向导）。</p><p>在Windows中安装MySQL时，有3种MySQL 5.1安装软件包可供选择：</p><ul><li><p>基本安装：该安装软件包的文件名类似于mysql-essential-5.1.2-alpha-win32.msi，包含在Windows中安装MySQL所需要的最少的文件，包括配置向导。该安装软件包不包括可选组件，例如嵌入式服务器和基准套件。</p></li><li><p>完全安装：该安装软件包的文件名类似于mysql-5.1.2-alpha-win32.zip，包含在Windows中安装MySQL所需要的全部文件，包括配置向导。该安装软件包包括可选组件，例如嵌入式服务器和基准套件。</p></li><li><p>非自动安装文件：该安装软件包的文件名类似于mysql-noinstall-5.1.2-alpha-win32.zip，包含完整安装包中的全部文件，只是不包括配置向导。该安装软件包不包括自动安装器，必须手动安装和配置。</p></li></ul><p>对于大多数用户，建议选择基本安装。</p><p>如果你下载的安装软件包在Zip文件中，你需要先解压文件。如果有setup.exe文件，双击启动安装过程。如果有.msi文件，双击启动安装过程。</p><h4 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h4><p>建议在Linux中使用RPM（RedHat系列）或者DEB（Debian/Ubuntu系列）包来安装MySQL，在大多数情况，你只需要通过命令行的方式apt-get安装MySQL-server和MySQL-client软件包来安装MySQL。在标准安装中不需要其它的包。如果你想要运行含更多功能的MySQL-Max服务器，还应当安装MySQL-Max RPM。必须先安装M MySQL-server RPM再安装该模块。</p><h3 id="启动mysql服务器"><a href="#启动mysql服务器" class="headerlink" title="启动mysql服务器"></a>启动mysql服务器</h3><p>实验楼配置的环境中，默认mysql是没有启动的，我们首先在命令行启动mysql服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mysql start</span><br></pre></td></tr></table></figure><h3 id="连接与断开服务器"><a href="#连接与断开服务器" class="headerlink" title="连接与断开服务器"></a>连接与断开服务器</h3><p>为了连接服务器，当调用mysql时，通常需要提供一个MySQL用户名并且很可能需要一个密码。在这里我们使用root用户连接服务器（密码环境设置为空，无需我们输入密码）,输入以下命令连接服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root</span><br></pre></td></tr></table></figure><p>如果有效，你应该看见一些介绍信息：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid73259labid1238timestamp1438157354404.png?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10"></p><p>mysql&gt;提示符告诉你mysql准备为你输入命令。</p><p>成功地连接后，可以在mysql&gt;提示下输入QUIT (或\q)随时退出：</p><h3 id="输入查询"><a href="#输入查询" class="headerlink" title="输入查询"></a>输入查询</h3><p>这是一个简单的命令，要求服务器告诉MySQL的版本号和当前日期。在mysql&gt;提示输入如下命令并按回车键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT VERSION(), CURRENT_DATE;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/document-uid73259labid1238timestamp1438158105657.png?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10"></p><p>能够以大小写输入关键词（建议关键词大写，以后你会感谢我的~）。下列查询是等价的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT VERSION(), CURRENT_DATE;</span><br><span class="line">mysql&gt; select version(), current_date;</span><br><span class="line">mysql&gt; SeLeCt vErSiOn(), current_DATE;</span><br></pre></td></tr></table></figure><p>这是另外一个查询，它说明你能将mysql用作一个简单的计算器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SIN(PI()&#x2F;4), (4+1)*5;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/document-uid73259labid1238timestamp1438158281502.png?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10"></p><p>至此显示的命令是相当短的单行语句。你可以在一行上输入多条语句，只需要以一个分号间隔开各语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT VERSION(); SELECT NOW();</span><br></pre></td></tr></table></figure><p>不必全在一个行内给出一个命令，较长命令可以输入到多个行中。mysql通过寻找终止分号而不是输入行的结束来决定语句在哪儿结束。（换句话说，mysql接受自由格式的输入：它收集输入行但直到看见分号才执行。）</p><p>这里是一个简单的多行语句的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT</span><br><span class="line">    -&gt; USER()</span><br><span class="line">    -&gt; ,</span><br><span class="line">    -&gt; CURRENT_DATE;</span><br></pre></td></tr></table></figure><p>在这个例子中，在输入多行查询的第一行后，要注意提示符如何从mysql&gt;变为-&gt;，这正是mysql如何指出它没见到完整的语句并且正在等待剩余的部分。提示符是你的朋友，因为它提供有价值的反馈，如果使用该反馈，将总是知道mysql正在等待什么。</p><p>如果你决定不想执行正在输入过程中的一个命令，输入\c取消它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT</span><br><span class="line">    -&gt; USER()</span><br><span class="line">    -&gt; \c</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>这里也要注意提示符，在你输入\c以后，它切换回到mysql&gt;，提供反馈以表明mysql准备接受一个新命令。</p><p>下表显示出可以看见的各个提示符并简述它们所表示的mysql的状态：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid73259labid1238timestamp1438157731203.png?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10"></p><p>当你打算在一个单行上发出一个命令时，通常会“偶然”出现多行语句，但是没有终止分号。在这种情况中，mysql等待进一步输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT USER()</span><br><span class="line">    -&gt;</span><br></pre></td></tr></table></figure><p>如果出现这种情况（你认为输完了语句，但是只有一个-&gt;提示符响应），很可能mysql正在等待分号。如果你没有注意到提示符的提示，在意识到你需要做什么之前，你可能会呆坐一会儿。输入一个分号完成语句，mysql将执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT USER()</span><br><span class="line">    -&gt; ;</span><br></pre></td></tr></table></figure><p>在字符串收集期间将出现 ‘&gt; 和”&gt; 提示符（提示MySQL正等待字符串的结束）。在MySQL中，可以写由’或”字符括起来的字符串 (例如，’hello’或”goodbye”)，并且mysql允许输入跨越多行的字符串。当看到一个 ‘&gt;或 “&gt; 提示符时，这意味着已经输入了包含以’或”括号字符开始的字符串的一行，但是还没有输入终止字符串的匹配引号。这显示你粗心地省掉了一个引号字符。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM my_table WHERE name &#x3D; &#39;Smith AND age &lt; 30;</span><br><span class="line">    &#39;&gt;</span><br></pre></td></tr></table></figure><p>如果你输入SELECT语句，然后按Enter（回车）键并等待结果，什么都没有出现。不要惊讶，“为什么该查询这么长呢？”，注意”&gt;提示符提供的线索。它告诉你mysql期望见到一个未终止字符串的余下部分。（你看见语句中的错误吗？字符串Smith丢掉了第二个引号。）</p><p>走到这一步，你该做什么？最简单的是取消命令。然而，在这种情况下，你不能只是输入\c，因为mysql作为它正在收集的字符串的一部分来解释它！相反，应输入关闭的引号字符(这样mysql知道你完成了字符串)，然后输入\c：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM my_table WHERE name &#x3D; &#39;Smith AND age &lt; 30;</span><br><span class="line">    &#39;&gt; &#39;\c</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>提示符回到mysql&gt;，显示mysql准备好接受一个新命令了。</p><p>知道’&gt;和”&gt;提示符的含义很重要，因为如果你错误地输入一个未终止的字符串，任何后面输入的行将要被mysql忽略——包括包含QUIT的行！这可能令人相当困惑，特别是如果取消当前命令前还不知道你需要提供终止引号。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础课程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 其他基本操作（基础篇）</title>
      <link href="2017/07/24/MySQL%20%E5%85%B6%E4%BB%96%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
      <url>2017/07/24/MySQL%20%E5%85%B6%E4%BB%96%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MySQL 其他基本操作（基础篇）</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是一种与表有关的结构，它的作用相当于书的目录，可以根据目录中的页码快速找到所需的内容。</p><p>当表中有大量记录时，若要对表进行查询，没有索引的情况是全表搜索：将所有记录一一取出，和查询条件进行一一对比，然后返回满足条件的记录。这样做会消耗大量数据库系统时间，并造成大量磁盘 I/O 操作。</p><p>而如果在表中已建立索引，在索引中找到符合查询条件的索引值，通过索引值就可以快速找到表中的数据，可以大大加快查询速度。</p><p>对一张表中的某个列建立索引，有以下两种语句格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 ADD INDEX 索引名 (列名);</span><br><span class="line"></span><br><span class="line">CREATE INDEX 索引名 ON 表名字 (列名);</span><br></pre></td></tr></table></figure><p>我们用这两种语句分别建立索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee ADD INDEX idx_id (id);  #在employee表的id列上建立名为idx_id的索引</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_name ON employee (name);   #在employee表的name列上建立名为idx_name的索引</span><br></pre></td></tr></table></figure><p>索引的效果是加快查询速度，当表中数据不够多的时候是感受不出它的效果的。这里我们使用命令 SHOW INDEX FROM 表名字; 查看刚才新建的索引：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-01.png"></p><p>在使用SELECT语句查询的时候，语句中WHERE里面的条件，会自动判断有没有可用的索引。</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是从一个或多个表中导出来的表，是一种虚拟存在的表。它就像一个窗口，通过这个窗口可以看到系统专门提供的数据，这样，用户可以不用看到整个数据库中的数据，而只关心对自己有用的数据。</p><p>注意理解视图是虚拟的表：</p><ul><li>数据库中只存放了视图的定义，而没有存放视图中的数据，这些数据存放在原来的表中；</li><li>使用视图查询数据时，数据库系统会从原来的表中取出对应的数据；</li><li>视图中的数据依赖于原来表中的数据，一旦表中数据发生改变，显示在视图中的数据也会发生改变；</li><li>在使用视图的时候，可以把它当作一张表。</li></ul><p>创建视图的语句格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名(列a,列b,列c) AS SELECT 列1,列2,列3 FROM 表名字;</span><br></pre></td></tr></table></figure><p>可见创建视图的语句，后半句是一个SELECT查询语句，所以视图也可以建立在多张表上，只需在SELECT语句中使用子查询或连接查询，这些在之前的实验已经进行过。</p><p>现在我们创建一个简单的视图，名为 v_emp，包含v_name，v_age，v_phone三个列：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-02.png/logoblackfont"></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>导入操作，可以把一个文件里的数据保存进一张表。导入语句格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA INFILE &#39;文件路径&#39; INTO TABLE 表名字;</span><br></pre></td></tr></table></figure><p>现在 SQL6 目录下有一个名为 in.txt 的文件，我们尝试把这个文件中的数据导入数据库 mysql_shiyan 的 employee 表中。</p><p>先按住 Ctrl+Z 退出 MySQL，下面的几个步骤需要在 Xfce 终端执行。</p><p>打开 Xfce 终端，输入命令拷贝 SQL6 文件夹到 /tmp 目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a &#x2F;home&#x2F;shiyanlou&#x2F;Desktop&#x2F;SQL6 &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure><p>再使用命令 gedit /tmp/SQL6/in.txt 查看 in.txt 文件中的内容：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-03.png"></p><p>再使用以下命令以 root 用户登录数据库，再连接 mysql_shiyan 数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在Xfce 终端输入命令</span><br><span class="line">mysql -u root</span><br><span class="line"></span><br><span class="line"># 在 MySQL 控制台中输入命令</span><br><span class="line">use mysql_shiyan</span><br></pre></td></tr></table></figure><p>查看一下没有导入数据之前，employee表中的数据：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-04.png"></p><p>现在执行导入语句，文件中的数据成功导入employee表：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-05.png/logoblackfont"></p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>导出与导入是相反的过程，是把数据库某个表中的数据保存到一个文件之中。导出语句基本格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列1，列2 INTO OUTFILE &#39;文件路径和文件名&#39; FROM 表名字;</span><br></pre></td></tr></table></figure><p>注意：语句中 “文件路径” 之下不能已经有同名文件。</p><p>现在我们把整个employee表的数据导出到 /tmp 目录下，导出文件命名为 out.txt 具体语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * INTO OUTFILE &#39;&#x2F;tmp&#x2F;out.txt&#39; FROM employee;</span><br></pre></td></tr></table></figure><p>用 gedit 可以查看导出文件 /tmp/out.txt 的内容：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-06.png/logoblackfont"></p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>数据库中的数据或许十分重要，出于安全性考虑，在数据库的使用中，应该注意使用备份功能。</p><blockquote><p>备份与导出的区别：导出的文件只是保存数据库中的数据；而备份，则是把数据库的结构，包括数据、约束、索引、视图等全部另存为一个文件。</p></blockquote><p>mysqldump 是 MySQL 用于备份数据库的实用程序。它主要产生一个 SQL 脚本文件，其中包含从头重新创建数据库所必需的命令CREATE TABLE INSERT 等。</p><p>使用 mysqldump 备份的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root 数据库名&gt;备份文件名;   #备份整个数据库</span><br><span class="line"></span><br><span class="line">mysqldump -u root 数据库名 表名字&gt;备份文件名;  #备份整个表</span><br></pre></td></tr></table></figure><p>我们尝试备份整个数据库 mysql_shiyan，将备份文件命名为 bak.sql，先 Ctrl+Z 退出 MySQL 控制台，再打开 Xfce 终端，在终端中输入命令：</p><p>mysqldump -u root mysql_shiyan &gt; bak.sql;<br>使用命令 “ls” 可见已经生成备份文件 bak.sql：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-07.png/logoblackfont"></p><p>你可以用gedit查看备份文件的内容，可以看见里面不仅保存了数据，还有所备份的数据库的其他信息。</p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>用备份文件恢复数据库，其实我们早就使用过了。在本次实验的开始，我们使用过这样一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;tmp&#x2F;SQL6&#x2F;MySQL-06.sql</span><br></pre></td></tr></table></figure><p>这就是一条恢复语句，它把 MySQL-06.sql 文件中保存的mysql_shiyan 数据库恢复。</p><p>还有另一种方式恢复数据库，但是在这之前我们先使用命令新建一个空的数据库 test：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root          #因为在上一步已经退出了MySQL，现在需要重新登录</span><br><span class="line"></span><br><span class="line">CREATE DATABASE test;  #新建一个名为test的数据库</span><br></pre></td></tr></table></figure><p>再次 Ctrl+Z 退出MySQL，然后输入语句进行恢复，把刚才备份的 bak.sql 恢复到 test 数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root test &lt; bak.sql</span><br></pre></td></tr></table></figure><p>我们输入命令查看 test 数据库的表，便可验证是否恢复成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root          #因为在上一步已经退出了MySQL，现在需要重新登录</span><br><span class="line"></span><br><span class="line">use test               #连接数据库test</span><br><span class="line"></span><br><span class="line">SHOW TABLES;           #查看test数据库的表</span><br></pre></td></tr></table></figure><p>可以看见原数据库的4张表和1个视图，现在已经恢复到test数据库中：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-08.png/logoblackfont"></p><p>再查看 employee 表的恢复情况：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-06-09.png/logoblackfont"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础课程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据库及表的修改和删除（基础篇）</title>
      <link href="2017/07/22/MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E8%A1%A8%E7%9A%84%E4%BF%AE%E6%94%B9%E5%92%8C%E5%88%A0%E9%99%A4%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
      <url>2017/07/22/MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E8%A1%A8%E7%9A%84%E4%BF%AE%E6%94%B9%E5%92%8C%E5%88%A0%E9%99%A4%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MySQL 数据库及表的修改和删除（基础篇）</p><h3 id="对数据库的修改"><a href="#对数据库的修改" class="headerlink" title="对数据库的修改"></a>对数据库的修改</h3><p>使用命令 SHOW DATABASES; 可以看到刚才运行MySQL-05.sql 文件生成的两个数据库：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-01.png/logoblackfont"></p><p>现在我们运行命令删除名为 test_01 的数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE test_01;</span><br></pre></td></tr></table></figure><p>现在再次使用命令 SHOW DATABASES; 可以发现，test_01 数据库已经被成功删除：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-02.png/logoblackfont"></p><h3 id="对一张表的修改"><a href="#对一张表的修改" class="headerlink" title="对一张表的修改"></a>对一张表的修改</h3><h4 id="重命名一张表"><a href="#重命名一张表" class="headerlink" title="重命名一张表"></a>重命名一张表</h4><p>重命名一张表的语句有多种形式，以下 3 种格式效果是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE 原名 TO 新名字;</span><br><span class="line"></span><br><span class="line">ALTER TABLE 原名 RENAME 新名;</span><br><span class="line"></span><br><span class="line">ALTER TABLE 原名 RENAME TO 新名;</span><br></pre></td></tr></table></figure><p>使用命令尝试修改 table_1 的名字为 table_2 ：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-03.png/logoblackfont"></p><h4 id="删除一张表"><a href="#删除一张表" class="headerlink" title="删除一张表"></a>删除一张表</h4><p>删除一张表的语句，类似于刚才用过的删除数据库的语句，格式是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE 表名字;</span><br></pre></td></tr></table></figure><p>比如我们把 table_2 表删除：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-04.png/logoblackfont"></p><h3 id="对一列的修改-即对表结构的修改"><a href="#对一列的修改-即对表结构的修改" class="headerlink" title="对一列的修改(即对表结构的修改)"></a>对一列的修改(即对表结构的修改)</h3><p>对表结构的修改，是本节实验的难点，有时候一些小的错误会造成不可挽回的后果，所以请细心操作。另外需要注意，不是必需尽量避免更改表结构。</p><h4 id="增加一列"><a href="#增加一列" class="headerlink" title="增加一列"></a>增加一列</h4><p>在表中增加一列的语句格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 ADD COLUMN 列名字 数据类型 约束;</span><br><span class="line"></span><br><span class="line">或： ALTER TABLE 表名字 ADD 列名字 数据类型 约束;</span><br></pre></td></tr></table></figure><p>现在 employee 表中有 id、name、age、salary、phone、in_dpt 这6个列，我们尝试加入 height (身高)一个列并指定DEFAULT 约束：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-05.png/logoblackfont"></p><p>可以发现：新增加的列，被默认放置在这张表的最右边。如果要把增加的列插入在指定位置，则需要在语句的最后使用AFTER关键词(“AFTER 列1” 表示新增的列被放置在 “列1” 的后面)。</p><p>比如我们新增一列 weight (体重)放置在 age (年龄)的后面：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-06.png/logoblackfont"></p><p>上面的效果是把新增的列加在某位置的后面，如果想放在第一列的位置，则使用 FIRST 关键词，如语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee ADD test INT(10) DEFAULT 11 FIRST;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-07.png/logoblackfont"></p><h4 id="删除一列"><a href="#删除一列" class="headerlink" title="删除一列"></a>删除一列</h4><p>删除表中的一列和刚才使用的新增一列的语句格式十分相似，只是把关键词 ADD 改为 DROP ，语句后面不需要有数据类型、约束或位置信息。具体语句格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 DROP COLUMN 列名字;</span><br><span class="line"></span><br><span class="line">或： ALTER TABLE 表名字 DROP 列名字;</span><br></pre></td></tr></table></figure><p>我们把刚才新增的 test 删除：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-08.png/logoblackfont"></p><h4 id="重命名一列"><a href="#重命名一列" class="headerlink" title="重命名一列"></a>重命名一列</h4><p>这条语句其实不只可用于重命名一列，准确地说，它是对一个列做修改(CHANGE) ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 CHANGE 原列名 新列名 数据类型 约束;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这条重命名语句后面的 “数据类型” 不能省略，否则重命名失败。</p></blockquote><p>当原列名和新列名相同的时候，指定新的数据类型或约束，就可以用于修改数据类型或约束。需要注意的是，修改数据类型可能会导致数据丢失，所以要慎重使用。</p><p>我们用这条语句将 “height” 一列重命名为汉语拼音 “shengao” ，效果如下：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-09.png/logoblackfont"></p><h4 id="改变数据类型"><a href="#改变数据类型" class="headerlink" title="改变数据类型"></a>改变数据类型</h4><p>要修改一列的数据类型，除了使用刚才的CHANGE语句外，还可以用这样的MODIFY语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 MODIFY 列名字 新数据类型;</span><br></pre></td></tr></table></figure><p>再次提醒，修改数据类型必须小心，因为这可能会导致数据丢失。在尝试修改数据类型之前，请慎重考虑。</p><h3 id="对表的内容修改"><a href="#对表的内容修改" class="headerlink" title="对表的内容修改"></a>对表的内容修改</h3><h4 id="修改表中某个值"><a href="#修改表中某个值" class="headerlink" title="修改表中某个值"></a>修改表中某个值</h4><p>大多数时候我们需要做修改的不会是整个数据库或整张表，而是表中的某一个或几个数据，这就需要我们用下面这条命令达到精确的修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名字 SET 列1&#x3D;值1,列2&#x3D;值2 WHERE 条件;</span><br></pre></td></tr></table></figure><p>比如，我们要把 Tom 的 age 改为 21，salary 改为 3000：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-10.png/logoblackfont"></p><p>注意：一定要有WHERE条件，否则会出现你不想看到的后果</p><h4 id="删除一行记录"><a href="#删除一行记录" class="headerlink" title="删除一行记录"></a>删除一行记录</h4><p>删除表中的一行数据，也必须加上WHERE条件，否则整列的数据都会被删除。删除语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名字 WHERE 条件;</span><br></pre></td></tr></table></figure><p>我们尝试把Tom的数据删除：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-05-11.png/logoblackfont"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础课程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL SELECT 语句详解（基础篇）</title>
      <link href="2017/07/22/MySQL%20SELECT%20%E8%AF%AD%E5%8F%A5%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
      <url>2017/07/22/MySQL%20SELECT%20%E8%AF%AD%E5%8F%A5%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MySQL SELECT 语句详解（基础篇）</p><p>在数据库操作语句中，使用最频繁，也被认为最重要的是 SELECT 查询语句。之前的实验中，我们已经在不少地方用到了 SELECT * FROM table_name; 这条语句用于查看一张表中的所有内容。</p><p>而 SELECT 与各种限制条件关键词搭配使用，具有各种丰富的功能，这次实验就进行详细介绍。</p><h3 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h3><p>SELECT 语句的基本格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 要查询的列名 FROM 表名字 WHERE 限制条件;</span><br></pre></td></tr></table></figure><p>如果要查询表的所有内容，则把 要查询的列名 用一个星号 * 号表示(实验2、3中都已经使用过)，代表要查询表中所有的列。</p><p>而大多数情况，我们只需要查看某个表的指定的列，比如要查看employee 表的 name 和 age：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age FROM employee;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-01.png/logoblackfont"></p><h3 id="数学符号条件"><a href="#数学符号条件" class="headerlink" title="数学符号条件"></a>数学符号条件</h3><p>SELECT 语句常常会有 WHERE 限制条件，用于达到更加精确的查询。WHERE限制条件可以有数学符号 (=,&lt;,&gt;,&gt;=,&lt;=) ，刚才我们查询了 name 和 age，现在稍作修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age FROM employee WHERE age&gt;25;</span><br></pre></td></tr></table></figure><p>筛选出 age 大于 25 的结果：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-02.png/logoblackfont"></p><p>或者查找一个名字为 Mary 的员工的 name,age 和 phone：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,phone FROM employee WHERE name&#x3D;&#39;Mary&#39;;</span><br></pre></td></tr></table></figure><p>结果当然是：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-03.png/logoblackfont"></p><h3 id="“AND”与“OR”"><a href="#“AND”与“OR”" class="headerlink" title="“AND”与“OR”"></a>“AND”与“OR”</h3><p>从这两个单词就能够理解它们的作用。WHERE 后面可以有不止一条限制，而根据条件之间的逻辑关系，可以用 OR(或) 和 AND(且) 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#筛选出 age 小于 25，或 age 大于 30</span><br><span class="line">SELECT name,age FROM employee WHERE age&lt;25 OR age&gt;30;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-04.png/logoblackfont"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#筛选出 age 大于 25，且 age 小于 30</span><br><span class="line">SELECT name,age FROM employee WHERE age&gt;25 AND age&lt;30;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-05.png/logoblackfont"></p><p>而刚才的限制条件 age&gt;25 AND age&lt;30 ，如果需要包含25和30这两个数字的话，可以替换为 age BETWEEN 25 AND 30 ：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-06.png/logoblackfont"></p><h3 id="IN-和-NOT-IN"><a href="#IN-和-NOT-IN" class="headerlink" title="IN 和 NOT IN"></a>IN 和 NOT IN</h3><p>关键词IN和NOT IN的作用和它们的名字一样明显，用于筛选“在”或“不在”某个范围内的结果，比如说我们要查询在dpt3或dpt4的人:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt IN (&#39;dpt3&#39;,&#39;dpt4&#39;);</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-07.png/logoblackfont"></p><p>而NOT IN的效果则是，如下面这条命令，查询出了不在dpt1也不在dpt3的人：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt NOT IN (&#39;dpt1&#39;,&#39;dpt3&#39;);</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-08.png/logoblackfont"></p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>关键字 LIKE 在SQL语句中和通配符一起使用，通配符代表未知字符。SQL中的通配符是 _ 和 % 。其中 _ 代表一个未指定字符，% 代表不定个未指定字符。</p><p>比如，要只记得电话号码前四位数为1101，而后两位忘记了，则可以用两个 _ 通配符代替：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,phone FROM employee WHERE phone LIKE &#39;1101__&#39;;</span><br></pre></td></tr></table></figure><p>这样就查找出了1101开头的6位数电话号码：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-09.png/logoblackfont"></p><p>另一种情况，比如只记名字的首字母，又不知道名字长度，则用 % 通配符代替不定个字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,phone FROM employee WHERE name LIKE &#39;J%&#39;;</span><br></pre></td></tr></table></figure><p>这样就查找出了首字母为 J 的人：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-10.png/logoblackfont"></p><h3 id="对结果排序"><a href="#对结果排序" class="headerlink" title="对结果排序"></a>对结果排序</h3><p>为了使查询结果看起来更顺眼，我们可能需要对结果按某一列来排序，这就要用到 ORDER BY 排序关键词。默认情况下，ORDER BY的结果是升序排列，而使用关键词ASC和DESC可指定升序或降序排序。</p><p>比如，我们按salary降序排列，SQL语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,salary,phone FROM employee ORDER BY salary DESC;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-11.png/logoblackfont"></p><h3 id="SQL-内置函数和计算"><a href="#SQL-内置函数和计算" class="headerlink" title="SQL 内置函数和计算"></a>SQL 内置函数和计算</h3><p>SQL 允许对表中的数据进行计算。对此，SQL 有 5 个内置函数，这些函数都对 SELECT 的结果做操作：</p><table><thead><tr><th>函数名：</th><th>COUNT</th><th>SUM</th><th>AVG</th><th>MAX</th><th>MIN</th></tr></thead><tbody><tr><td>作用：</td><td>计数</td><td>求和</td><td>求平均值</td><td>最大值</td><td>最小值</td></tr></tbody></table><p>其中 COUNT 函数可用于任何数据类型(因为它只是计数)，而 SUM 、AVG 函数都只能对数字类数据类型做计算，MAX 和 MIN 可用于数值、字符串或是日期时间数据类型。<br>具体举例，比如计算出salary的最大、最小值，用这样的一条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary) AS max_salary,MIN(salary) FROM employee;</span><br></pre></td></tr></table></figure><p>有一个细节你或许注意到了，使用AS关键词可以给值重命名，比如最大值被命名为了max_salary：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-12.png/logoblackfont"></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>上面讨论的 SELECT 语句都仅涉及一个表中的数据，然而有时必须处理多个表才能获得所需的信息。例如：想要知道名为 “Tom” 的员工所在部门做了几个工程。员工信息储存在 employee 表中，但工程信息储存在project 表中。</p><p>对于这样的情况，我们可以用子查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT of_dpt,COUNT(proj_name) AS count_project FROM project</span><br><span class="line">WHERE of_dpt IN</span><br><span class="line">(SELECT in_dpt FROM employee WHERE name&#x3D;&#39;Tom&#39;);</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-13.png/logoblackfont"></p><p>子查询还可以扩展到3层、4层或更多层。</p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>在处理多个表时，子查询只有在结果来自一个表时才有用。但如果需要显示两个表或多个表中的数据，这时就必须使用连接 (join) 操作。</p><p>连接的基本思想是把两个或多个表当作一个新的表来操作，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.in_dpt &#x3D; department.dpt_name</span><br><span class="line">ORDER BY id;</span><br></pre></td></tr></table></figure><p>这条语句查询出的是，各员工所在部门的人数，其中员工的 id 和 name 来自 employee 表，people_num 来自 department 表：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-04-14.png/logoblackfont"></p><p>另一个连接语句格式是使用 JOIN ON 语法，刚才的语句等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee JOIN department</span><br><span class="line">ON employee.in_dpt &#x3D; department.dpt_name</span><br><span class="line">ORDER BY id;</span><br></pre></td></tr></table></figure><p>结果也与刚才的语句相同。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础课程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 挑战：搭建一个简易的成绩管理系统的数据库</title>
      <link href="2017/07/22/MySQL%20%E6%8C%91%E6%88%98%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2017/07/22/MySQL%20%E6%8C%91%E6%88%98%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>MySQL 挑战：搭建一个简易的成绩管理系统的数据库</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>现需要构建一个简易的成绩管理系统的数据库，来记录几门课程的学生成绩。数据库中有三张表分别用于记录学生信息、课程信息和成绩信息。</p><p>数据库表的数据如下：</p><p>学生表(student)：学生 id 、学生姓名和性别</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370051labid48timestamp1490234173345.png/wm"></p><p>课程表：课程 id 和课程名</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370051labid48timestamp1490234378903.png/wm"></p><p>成绩表：成绩 id 、学生 id 、课程 id 和分数</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370051labid48timestamp1490234181565.png/wm"></p><p>服务器中的 MySQL 还没有启动，请注意 MySQL 的 root 账户默认密码为空。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>1.MySQL 服务处于运行状态</p><p>2.新建数据库的名称为 gradesystem</p><p>3.gradesystem 包含三个表：student、course、mark；</p><ul><li>student 表包含3列：sid(主键)、sname、gender；</li><li>course 表包含2列：cid(主键)、cname；</li><li>mark 表包含4列：mid(主键)、sid、cid、score ，注意与其他两个表主键之间的关系。</li></ul><p>4.将上述表中的数据分别插入到各个表中</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li>建立表时注意 id 自增和键约束</li><li>每个表插入语句可通过一条语句完成</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>脚本内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;home&#x2F;shiyanlou&#x2F;sql.sql</span><br><span class="line">CREATE DATABASE gradesystem;</span><br><span class="line"></span><br><span class="line">use gradesystem;</span><br><span class="line"></span><br><span class="line">CREATE TABLE student</span><br><span class="line">(</span><br><span class="line">sid int(10) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">sname char(20),</span><br><span class="line">gender char(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE course</span><br><span class="line">(</span><br><span class="line">cid int(10) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">cname char(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE mark</span><br><span class="line">(</span><br><span class="line">mid int(10) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">sid int(10),</span><br><span class="line">cid int(10),</span><br><span class="line">score int(10),</span><br><span class="line">CONSTRAINT emp_fk FOREIGN KEY(sid) REFERENCES student(sid),</span><br><span class="line">CONSTRAINT emp_fk_2 FOREIGN KEY(cid) REFERENCES course(cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO student VALUES</span><br><span class="line">(1, &#39;Tom&#39;, &#39;male&#39;),</span><br><span class="line">(2, &#39;Jack&#39;, &#39;male&#39;),</span><br><span class="line">(3, &#39;Rose&#39;, &#39;female&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO course VALUES</span><br><span class="line">(1, &#39;math&#39;),</span><br><span class="line">(2, &#39;physics&#39;),</span><br><span class="line">(3, &#39;chemistry&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO mark VALUES</span><br><span class="line">(1, 1, 1, 80),</span><br><span class="line">(2, 2, 1, 85),</span><br><span class="line">(3, 3, 1, 90),</span><br><span class="line">(4, 1, 2, 60),</span><br><span class="line">(5, 2, 2, 90),</span><br><span class="line">(6, 3, 2, 75),</span><br><span class="line">(7, 1, 3, 95),</span><br><span class="line">(8, 2, 3, 75),</span><br><span class="line">(9, 3, 3, 85);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br><span class="line">mysql -u root</span><br><span class="line">source &#x2F;home&#x2F;shiyanlou&#x2F;sql.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础课程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL SQL 的约束（基础篇）</title>
      <link href="2017/07/21/MySQL%20SQL%20%E7%9A%84%E7%BA%A6%E6%9D%9F%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
      <url>2017/07/21/MySQL%20SQL%20%E7%9A%84%E7%BA%A6%E6%9D%9F%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MySQL SQL 的约束（基础篇）</p><h3 id="约束分类"><a href="#约束分类" class="headerlink" title="约束分类"></a>约束分类</h3><p>听名字就知道，约束是一种限制，它通过对表的行或列的数据做出限制，来确保表的数据的完整性、唯一性。</p><p>在MySQL中，通常有这几种约束：</p><table><thead><tr><th>约束类型：</th><th>主键</th><th>默认值</th><th>唯一</th><th>外键</th><th>非空</th></tr></thead><tbody><tr><td>关键字：</td><td>PRIMARY KEY</td><td>DEFAULT</td><td>UNIQUE</td><td>FOREIGN KEY</td><td>NOT NULL</td></tr></tbody></table><h3 id="建立含约束的表"><a href="#建立含约束的表" class="headerlink" title="建立含约束的表"></a>建立含约束的表</h3><p>为了方便介绍这几种约束，我们先建立一个数据库。</p><blockquote><p>注：如果你是从上一节直接进入本节进行学习的，请先删除上一节建立的数据库mysql_shiyan，删除语句为DROP DATABASE mysql_shiyan;。</p></blockquote><p>当然不用你一行一行地输入命令搭建这个数据库，实验楼已经为你准备好了。首先打开 Xfce 终端，输入命令进入 /home/shiyanlou/Desktop 目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Desktop</span><br></pre></td></tr></table></figure><p>使用 git 命令将需要的数据文件下载到本地文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;shiyanlou&#x2F;SQL3</span><br></pre></td></tr></table></figure><p>下载完成后，输入命令开启 MySQL 服务并使用 root 用户登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#打开 MySQL 服务</span><br><span class="line">sudo service mysql start        </span><br><span class="line"></span><br><span class="line">#使用 root 用户登录</span><br><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><p>刚才下载的 SQL3 目录下，有个文件 MySQL-03-01.sql，其中包含的代码可以新建一个数据库 mysql_shiyan,然后在其中创建三张表 department，employee，project，它们包含了各种约束。</p><p>（SQL3 目录在桌面上，你可以用Gedit查看里面的 MySQL-03-01.sql 文件。）</p><p>加载文件中的数据，需要在 MySQL 控制台中输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;home&#x2F;shiyanlou&#x2F;Desktop&#x2F;sql3&#x2F;MySQL-03-01.sql;</span><br></pre></td></tr></table></figure><p>查看一下这个数据库，输入命令 show tables;，可见：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-00.png/logoblackfont"></p><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>主键 (PRIMARY KEY)是用于约束表中的一行，作为这一行的唯一标识符，在一张表中通过主键就能准确定位到一行，因此主键十分重要。主键不能有重复且不能为空。</p><p>在 MySQL-03-01.sql 中，这里有主键：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-07.png/logoblackfont"></p><p>也可以这样定义主键：</p><p><img src="https://dn-anything-about-doc.qbox.me/1sql-03-08-.png"></p><p>还有一种特殊的主键——复合主键。主键不仅可以是表中的一列，也可以由表中的两列或多列来共同标识，比如：</p><p><img src="https://dn-anything-about-doc.qbox.me/1sql-03-09-.png"></p><h3 id="默认值约束"><a href="#默认值约束" class="headerlink" title="默认值约束"></a>默认值约束</h3><p>默认值约束 (DEFAULT) 规定，当有 DEFAULT 约束的列，插入数据为空时，将使用默认值。</p><p>在 MySQL-03-01.sql 中，这段代码包含了 DEFAULT 约束：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-10.png"></p><p>DEFAULT 约束只会在使用 INSERT 语句（上一实验介绍过）时体现出来，INSERT语句中，如果被 DEFAULT 约束的位置没有值，那么这个位置将会被 DEFAULT 的值填充，如语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 正常插入数据</span><br><span class="line">INSERT INTO department(dpt_name,people_num) VALUES(&#39;dpt1&#39;,11);</span><br><span class="line"></span><br><span class="line">#插入新的数据，people_num 为空，使用默认值</span><br><span class="line">INSERT INTO department(dpt_name) VALUES(&#39;dpt2&#39;);</span><br></pre></td></tr></table></figure><p>输入命令 SELECT * FROM department;，可见表中第二行的people_num 被 DEFAULT 的值 (10) 填充：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-01.png"></p><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>唯一约束 (UNIQUE) 比较简单，它规定一张表中指定的一列的值必须不能有重复值，即这一列每个值都是唯一的。</p><p>在 MySQL-03-01.sql 中，也有 UNIQUE 约束：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-11.png"></p><p>当 INSERT 语句新插入的数据和已有数据重复的时候，如果有 UNIQUE约束，则 INSERT 失败，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employee VALUES(01,&#39;Tom&#39;,25,3000,110110,&#39;dpt1&#39;);</span><br><span class="line">INSERT INTO employee VALUES(02,&#39;Jack&#39;,30,3500,110110,&#39;dpt2&#39;);</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-02.png/logoblackfont"></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键 (FOREIGN KEY) 既能确保数据完整性，也能表现表之间的关系。</p><p>一个表可以有多个外键，每个外键必须 REFERENCES (参考) 另一个表的主键，被外键约束的列，取值必须在它参考的列中有对应值。</p><p><img src="https://dn-anything-about-doc.qbox.me/1sql-03-12-.png"></p><p>在 INSERT 时，如果被外键约束的值没有在参考列中有对应，比如以下命令，参考列 (department 表的 dpt_name) 中没有dpt3，则INSERT 失败：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employee VALUES(02,&#39;Jack&#39;,30,3500,114114,&#39;dpt3&#39;);</span><br></pre></td></tr></table></figure><p>可见之后将 dpt3 改为 dpt2（department 表中有 dpt2），则插入成功：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-03.png/logoblackfont"></p><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>非空约束 (NOT NULL),听名字就能理解，被非空约束的列，在插入值时必须非空。</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-13.png"></p><p>在MySQL中违反非空约束，不会报错，只会有警告，比如以下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#INSERT 成功 age 为空，因为没有非空约束，表中显示 NULL</span><br><span class="line">INSERT INTO employee(id,name,salary,phone,in_dpt) VALUES(03,&#39;Jim&#39;,3400,119119,&#39;dpt2&#39;); </span><br><span class="line"></span><br><span class="line">#警告 salary 被非空约束，值为空，表中显示0</span><br><span class="line">INSERT INTO employee(id,name,age,phone,in_dpt) VALUES(04,&#39;Bob&#39;,23,123456,&#39;dpt1&#39;);</span><br></pre></td></tr></table></figure><p>结果如图，出现警告，但还是插入数据成功，实验楼的环境是 5.5.50，5.6 版本以上的 MySQL 会报错，禁止插入不符合非空约束的数据：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-04.png"></p><p>此时 employee 表的内容为：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-03-05.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础课程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 创建数据库并插入数据（基础篇）</title>
      <link href="2017/07/21/MySQL%20%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
      <url>2017/07/21/MySQL%20%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MySQL 创建数据库并插入数据（基础篇）</p><p>在使用实验楼 Linux 环境进行本次实验之前，先用以下两条命令打开MySQL 服务并使用 root 登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 打开 MySQL 服务</span><br><span class="line">sudo service mysql start        </span><br><span class="line"></span><br><span class="line">#使用 root 用户登录，密码为空</span><br><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><p>后续的实验都在 MySQL 的控制台输入命令进行操作。</p><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><p>首先，我们创建一个数据库，给它一个名字，比如 mysql_shiyan，以后的几次实验也是对 mysql_shiyan 这个数据库进行操作。</p><p>语句格式为 CREATE DATABASE &lt;数据库名字&gt;;，（注意不要漏掉分号 ;），前面的 CREATE DATABASE 也可以使用小写，具体命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mysql_shiyan;</span><br></pre></td></tr></table></figure><p>创建成功后输入命令 show databases; （注意不要漏掉;）检查一下：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-02-01.png/logoblackfont"></p><p>在大多数系统中，SQL 语句都是不区分大小写的，因此以下语句都是合法的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE name1;</span><br><span class="line">create database name2;</span><br><span class="line">CREATE database name3;</span><br><span class="line">create DAtabaSE name4;</span><br></pre></td></tr></table></figure><p>但是出于严谨，而且便于区分保留字（保留字(reserved word)：指在高级语言中已经定义过的字，使用者不能再将这些字作为变量名或过程名使用。）和变量名，我们把保留字大写，把变量和数据小写。</p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>接下来的操作，就在刚才创建的 mysql_shiyan 中进行，首先要连接数据库，使用语句 use &lt;数据库名字&gt;：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql_shiyan</span><br></pre></td></tr></table></figure><p>如图显示，则连接成功：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-02-02.png/logoblackfont"></p><p>输入命令 show tables; 可以查看当前数据库里有几张表，现在mysql_shiyan 里还是空的：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-02-03.png/logoblackfont"></p><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>数据表（table）简称表，它是数据库最重要的组成部分之一。数据库只是一个框架，表才是实质内容。</p><p>而一个数据库中一般会有多张表，这些各自独立的表通过建立关系被联接起来，才成为可以交叉查阅、一目了然的数据库。如下便是一张表：</p><table><thead><tr><th>ID</th><th>name</th><th>phone</th></tr></thead><tbody><tr><td>01</td><td>Tom</td><td>110110110</td></tr><tr><td>02</td><td>Jack</td><td>119119119</td></tr><tr><td>03</td><td>Rose</td><td>114114114</td></tr></tbody></table><h3 id="新建数据表"><a href="#新建数据表" class="headerlink" title="新建数据表"></a>新建数据表</h3><p>在数据库中新建一张表的语句格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表的名字</span><br><span class="line">(</span><br><span class="line">列名a 数据类型(数据长度),</span><br><span class="line">列名b 数据类型(数据长度)，</span><br><span class="line">列名c 数据类型(数据长度)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们尝试在 mysql_shiyan 中新建一张表 employee，包含姓名，ID 和电话信息，所以语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employee (id int(10),name char(20),phone int(12));</span><br></pre></td></tr></table></figure><p>然后再创建一张表 department，包含名称和电话信息，想让命令看起来更整洁，你可以这样输入命令：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-02-04.png/logoblackfont"></p><p>这时候再 show tables; 一下，可以看到刚才添加的两张表：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-02-05.png/logoblackfont"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>在刚才新建表的过程中，我们提到了数据类型，MySQL 的数据类型和其他编程语言大同小异，下表是一些 MySQL 常用数据类型：</p><table><thead><tr><th>数据类型</th><th>大小(字节)</th><th>用途</th><th>格式</th></tr></thead><tbody><tr><td>INT</td><td>4</td><td>整数</td><td></td></tr><tr><td>FLOAT</td><td>4</td><td>单精度浮点数</td><td></td></tr><tr><td>DOUBLE</td><td>8</td><td>双精度浮点数</td><td></td></tr><tr><td>ENUM</td><td></td><td>单选,比如性别</td><td>ENUM(‘a’,’b’,’c’)</td></tr><tr><td>SET</td><td></td><td>多选</td><td>SET(‘1’,’2’,’3’)</td></tr><tr><td>DATE</td><td>3</td><td>日期</td><td>YYYY-MM-DD</td></tr><tr><td>TIME</td><td>3</td><td>时间点或持续时间</td><td>HH:MM:SS</td></tr><tr><td>YEAR</td><td>1</td><td>年份值</td><td>YYYY</td></tr><tr><td>CHAR</td><td>0~255</td><td>定长字符串</td><td></td></tr><tr><td>VARCHAR</td><td>0~255</td><td>变长字符串</td><td></td></tr><tr><td>TEXT</td><td>0~65535</td><td>长文本数据</td><td></td></tr></tbody></table><p>整数除了 INT 外，还有 TINYINT、SMALLINT、MEDIUMINT、BIGINT。</p><p><strong>CHAR 和 VARCHAR 的区别:</strong> CHAR 的长度是固定的，而 VARCHAR 的长度是可以变化的，比如，存储字符串 “abc”，对于 CHAR(10)，表示存储的字符将占 10 个字节(包括 7 个空字符)，而同样的 VARCHAR(12) 则只占用4个字节的长度，增加一个额外字节来存储字符串本身的长度，12 只是最大值，当你存储的字符小于 12 时，按实际长度存储。</p><p><strong>ENUM和SET的区别:</strong> ENUM 类型的数据的值，必须是定义时枚举的值的其中之一，即单选，而 SET 类型的值则可以多选。</p><p>想要了解更多关于 MySQL 数据类型的信息，可以参考下面两篇博客。</p><ul><li>MySQL 中的数据类型介绍</li><li>MySQL 数据类型</li></ul><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>刚才我们新建了两张表，使用语句 SELECT * FROM employee; 查看表中的内容，可以看到 employee 表中现在还是空的：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-02-06.png/logoblackfont"></p><p><em>刚才使用的SELECT语句将在下一节实验中详细介绍</em></p><p>我们通过 INSERT 语句向表中插入数据，语句格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表的名字(列名a,列名b,列名c) VALUES(值1,值2,值3);</span><br></pre></td></tr></table></figure><p>我们尝试向 employee 中加入 Tom、Jack 和 Rose：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employee(id,name,phone) VALUES(01,&#39;Tom&#39;,110110110);</span><br><span class="line"></span><br><span class="line">INSERT INTO employee VALUES(02,&#39;Jack&#39;,119119119);</span><br><span class="line"></span><br><span class="line">INSERT INTO employee(id,name) VALUES(03,&#39;Rose&#39;);</span><br></pre></td></tr></table></figure><p>你已经注意到了，有的数据需要用单引号括起来，比如 Tom、Jack、Rose 的名字，这是由于它们的数据类型是 CHAR 型。此外 VARCHAR,TEXT,DATE,TIME,ENUM 等类型的数据也需要单引号修饰，而 INT,FLOAT,DOUBLE 等则不需要。</p><p>第一条语句比第二条语句多了一部分：(id,name,phone) 这个括号里列出的，是将要添加的数据 (01,’Tom’,110110110) 其中每个值在表中对应的列。而第三条语句只添加了 (id,name) 两列的数据，所以在表中Rose的phone为NULL。</p><p>现在我们再次使用语句 SELECT * FROM employee; 查看 employee 表，可见 Tom 和 Jack 的相关数据已经保存在其中了：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-02-07.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础课程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL SQL 介绍及 MySQL 安装（基础篇）</title>
      <link href="2017/07/21/MySQL%20SQL%20%E4%BB%8B%E7%BB%8D%E5%8F%8A%20MySQL%20%E5%AE%89%E8%A3%85%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
      <url>2017/07/21/MySQL%20SQL%20%E4%BB%8B%E7%BB%8D%E5%8F%8A%20MySQL%20%E5%AE%89%E8%A3%85%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MySQL SQL 介绍及 MySQL 安装（基础篇）</p><h3 id="数据库和-SQL-概念"><a href="#数据库和-SQL-概念" class="headerlink" title="数据库和 SQL 概念"></a>数据库和 SQL 概念</h3><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，它的产生距今已有六十多年。随着信息技术和市场的发展，数据库变得无处不在：它在电子商务、银行系统等众多领域都被广泛使用，且成为其系统的重要组成部分。</p><p>数据库用于记录数据，使用数据库记录数据可以表现出各种数据间的联系，也可以很方便地对所记录的数据进行增、删、改、查等操作。</p><p>结构化查询语言(Structured Query Language)简称 SQL，是上世纪 70 年代由 IBM 公司开发，用于对数据库进行操作的语言。更详细地说，SQL 是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</p><h3 id="MySQL-介绍"><a href="#MySQL-介绍" class="headerlink" title="MySQL 介绍"></a>MySQL 介绍</h3><p>MySQL 是一个 DBMS（数据库管理系统），由瑞典 MySQLAB 公司开发，目前属于 Oracle 公司，MySQL 是最流行的关系型数据库管理系统（关系数据库，是建立在关系数据库模型基础上的数据库，借助于集合代数等概念和方法来处理数据库中的数据）。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发者都选择 MySQL 作为网站数据库。MySQL 使用 SQL 语言进行操作。</p><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><p>注意：实验楼环境中已经安装好了 MySQL，可以直接使用，无需再次安装，以下安装仅用于大家学习使用。</p><h4 id="安装之前的检查"><a href="#安装之前的检查" class="headerlink" title="安装之前的检查"></a>安装之前的检查</h4><p>先要检查Linux系统中是否已经安装了MySQL，输入命令尝试打开MySQL服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><p>输入密码后，如果出现以下提示，则说明系统中已经安装有 MySQL：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-01-01-.png/logoblackfont"></p><p>如果提示是这样的，则说明系统中没有 MySQL，需要继续安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql: unrecognized service</span><br></pre></td></tr></table></figure><h4 id="Ubuntu-Linux-安装配置-MySQL"><a href="#Ubuntu-Linux-安装配置-MySQL" class="headerlink" title="Ubuntu Linux 安装配置 MySQL"></a>Ubuntu Linux 安装配置 MySQL</h4><p>在Ubuntu上安装MySQL，最简单的方式是在线安装。只需要几行简单的命令（ # 号后面是注释）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装 MySQL 服务端、核心程序</span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line">#安装 MySQL 客户端</span><br><span class="line">sudo apt-get install mysql-client</span><br></pre></td></tr></table></figure><p>在安装过程中会提示确认输入YES，设置 root 用户密码（之后也可以修改）等，稍等片刻便可安装成功。</p><p>安装结束后，用命令验证是否安装并启动成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure><p>如果出现如下提示，则安装成功：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-01-02.png/logoblackfont"></p><p>此时，可以根据自己的需求，用 gedit 修改 MySQL 的配置文件（my.cnf）,使用以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;mysql&#x2F;my.cnf</span><br></pre></td></tr></table></figure><p>至此，MySQL 已经安装、配置完成，可以正常使用了。</p><h4 id="尝试MySQL"><a href="#尝试MySQL" class="headerlink" title="尝试MySQL"></a>尝试MySQL</h4><h5 id="打开MySQL"><a href="#打开MySQL" class="headerlink" title="打开MySQL"></a>打开MySQL</h5><p>使用如下两条命令，打开MySQL服务并使用root用户登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 启动 MySQL 服务</span><br><span class="line">sudo service mysql start             </span><br><span class="line"></span><br><span class="line"># 使用 root 用户登录，实验楼环境的密码为空，直接回车就可以登录</span><br><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><p>执行成功会出现如下提示：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-01-03-.png/logoblackfont"></p><h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h5><p>使用命令 show databases;，查看有哪些数据库（注意不要漏掉分号 ;）：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-01-04.png/logoblackfont"></p><p>可见已有三个数据库，分别是 “information-schema”、“mysql”、“performance-schema”。</p><h5 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h5><p>选择连接其中一个数据库，语句格式为 use &lt;数据库名&gt;，这里可以不用加分号，这里我们选择 information_schema 数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use information_schema</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-01-05.png/logoblackfont"></p><h5 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h5><p>使用命令 show tables; 查看数据库中有哪些表（注意不要漏掉“;”）：</p><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-01-06.png/logoblackfont"></p><h5 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h5><p>使用命令 quit 或者 exit 退出 MySQL。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础课程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 表单</title>
      <link href="2017/07/19/Django%20%E8%A1%A8%E5%8D%95/"/>
      <url>2017/07/19/Django%20%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>Django 表单</p><h3 id="上手表单处理实例"><a href="#上手表单处理实例" class="headerlink" title="上手表单处理实例"></a>上手表单处理实例</h3><p>有时候我们需要在前端用 get 或 post 方法提交一些表单数据。在后端处理数据时，我们需要接受这些数据。本章就来介绍 Django 如何对表单数据进行接收操作的。</p><p>为了完成实验，我们先来写一个网页，其中用到 html 表单的知识。首先我们来写一个计算 a 和 b 之和的简单应用。在 learn 的 templates 目录之下，保存一个名为 index.html 的模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Please input 2 numbers:&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;add&#x2F;&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">    a: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;a&quot;&gt; &lt;br&gt;</span><br><span class="line">    b: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;b&quot;&gt; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>网页的值传到服务器是通过 <input> 或者 <textarea> 标签中的 name 属性来传递的，在服务器端，我们使用这样的接收方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return render(request, &#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line">def add(request):</span><br><span class="line">    a &#x3D; request.GET.get(&#39;a&#39;, None)</span><br><span class="line">    b &#x3D; request.GET.get(&#39;b&#39;, None)</span><br><span class="line">    a &#x3D; int(a)</span><br><span class="line">    b &#x3D; int(b)</span><br><span class="line">    return HttpResponse(str(a+b))</span><br></pre></td></tr></table></figure><p>按照之前的方式，我们修改一下路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import include, url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from learn import views as learn_views</span><br><span class="line">from calc import views as calc_views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^index&#x2F;&#39;, learn_views.index),</span><br><span class="line">    url(r&#39;^add&#x2F;$&#39;, learn_views.add, name&#x3D;&#39;add&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>开始紧张的测试阶段：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2633timestamp1488944267434.png/wm"></p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2633timestamp1488944279879.png/wm"></p><p>其实我们发现，使用 get 方法进行表单提交，相当于通过表单进行 get 传递参数的一种变化形式，其原理与之前的参数传递没有区别。但是通过此方法，可以以界面的方式对参数进行传递，增强了用户体验</p><p>接下来我们来看 post 方法。我们直接引入例子来对其进行说明。在 learn 目录中新建一个 forms.py 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line">class AddForm(forms.Form):</span><br><span class="line">    a &#x3D; forms.IntegerField()</span><br><span class="line">    b &#x3D; forms.IntegerField()</span><br></pre></td></tr></table></figure><p>修改一下 views.py 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#coding: utf-8</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from .forms import AddForm</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        # 当表单以 POST 方式提交的时候</span><br><span class="line">        form &#x3D; AddForm(request.POST)</span><br><span class="line">        if form.is_valid():</span><br><span class="line">            # 如果提交的数据合法</span><br><span class="line">            a &#x3D; form.cleaned_data[&#39;a&#39;]</span><br><span class="line">            b &#x3D; form.cleaned_data[&#39;b&#39;]</span><br><span class="line">            return HttpResponse(str(int(a) + int(b)))</span><br><span class="line">    else:</span><br><span class="line">        # 正常方位时</span><br><span class="line">        form &#x3D; AddForm()</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;index.html&#39;, &#123;&#39;form&#39;: form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    TutorialList &#x3D; [&quot;HTML&quot;, &quot;css&quot;, &quot;jQuery&quot;, &quot;Python&quot;, &quot;Django&quot;]</span><br><span class="line">    return render(request, &#39;home.html&#39;, &#123;&#39;TutorialList&#39;: TutorialList&#125;)</span><br><span class="line"></span><br><span class="line">def add(request):</span><br><span class="line">    a &#x3D; request.GET.get(&#39;a&#39;, None)</span><br><span class="line">    b &#x3D; request.GET.get(&#39;b&#39;, None)</span><br><span class="line">    a &#x3D; int(a)</span><br><span class="line">    b &#x3D; int(b)</span><br><span class="line">    return HttpResponse(str(a + b))</span><br></pre></td></tr></table></figure><p>对应的模板文件 index.html：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Please Input 2 numbers:&lt;&#x2F;p&gt;</span><br><span class="line">&lt;form method&#x3D;&#39;post&#39;&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form &#125;&#125;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在链接路由 urls.py 中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import include, url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from learn import views as learn_views</span><br><span class="line">from calc import views as calc_views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, learn_views.index, name&#x3D;&#39;home&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>测试一下结果：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2633timestamp1488944297793.png/wm"></p><p>很多人觉得这样会变得更麻烦。其实不然，因为 Django 的 forms 提供了好用的几个功能：</p><ul><li>模板中表单的渲染；</li><li>数据的验证工作，某一些输入不合法也不会丢失已经输入的数据；</li><li>还可以定制更复杂的验证工作，如果提供了 10 个输入框，必须要输入其中两个以上等功能，在 forms.py 中实现都是很容易的。</li><li>另外也有一些将 Django forms 渲染成 Bootstrap 的插件，使用起来十分方便。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Django 入门教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 模型（model）与数据库</title>
      <link href="2017/07/19/Django%20%E6%A8%A1%E5%9E%8B%EF%BC%88model%EF%BC%89%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2017/07/19/Django%20%E6%A8%A1%E5%9E%8B%EF%BC%88model%EF%BC%89%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>Django 模型（model）与数据库</p><h3 id="初步使用模型"><a href="#初步使用模型" class="headerlink" title="初步使用模型"></a>初步使用模型</h3><p>Django 模型是与数据库相关的，与数据库相关的代码一般写在 models.py 中，Django 支持 Sqlite3、MySQL、PostgreSQL 等数据库，只需要在 settings.py 中配置即可，不用更改 models.py 中的代码，丰富的 API 极大的方便了使用。</p><p>我们继续沿用之前创建的 learn 这个 app 进行实验。修改 learn 中的 models.py 如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Person(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;30)</span><br><span class="line">    age &#x3D; models.IntegerField()</span><br></pre></td></tr></table></figure><p>这段代码中，我们新建了一个 Person 类，继承自 models.Model，一个人有年龄和姓名。这里用到了两种 Field，更多的可以查看本教程最后的链接处。</p><p>然后来执行同步数据库操作（我们使用默认的 sqlite3数据库，无需任何其他配置）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py makemigrations</span><br><span class="line">$ python3 manage.py migrate</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2632timestamp1488944162248.png/wm"></p><p>从反馈的 log 中可以看到，Django 生成了我们新建的 Person 这个表。Django 还为我们提供了丰富的 API，下面演示如何来使用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py shell</span><br><span class="line">&gt;&gt;&gt; from learn.models import Person</span><br><span class="line">&gt;&gt;&gt; Person.objects.create(name&#x3D;&quot;Gua&quot;, age&#x3D;22)</span><br><span class="line">&lt;Person: Person object&gt;</span><br></pre></td></tr></table></figure><p>我们新建了一个用户 Gua，那么如何从数据库中查询到它呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Person.objects.get(name&#x3D;&quot;Gua&quot;)</span><br><span class="line">&lt;Person: Person object&gt;</span><br></pre></td></tr></table></figure><p>我们用了一个 .objects.get() 方法查询出来符合条件的对象，但是查询结果中显示 &lt;Person: Person object&gt;，这里并没有显示出与 Gua 相关的信息，如果用户多了就无法知道查询出来是那一条数据。查询结果是否正确，我们重新修改一下 learn/models.py。</p><blockquote><p>备注：name 和 age 等字段中不能有 __（双下划线，因为在Django QuerySet API中有特殊含义（用于关系，包含，不区分大小写，以什么开头或结尾，日期的大于小于，正则等）。也不能有Python中的关键字，name 是合法的，studentname 也合法，但是student_name不合法，try, class, continue 也不合法，因为它是Python的关键字( import keyword; print(keyword.kwlist) 可以打出所有的关键字)。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;30)</span><br><span class="line">    age &#x3D; models.IntegerField()</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2632timestamp1488944222972.png/wm"></p><h3 id="数据库增与取操作的多种方法"><a href="#数据库增与取操作的多种方法" class="headerlink" title="数据库增与取操作的多种方法"></a>数据库增与取操作的多种方法</h3><h4 id="增操作"><a href="#增操作" class="headerlink" title="增操作"></a>增操作</h4><p>新建一个对象的写法有以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line">Person.objects.create(name &#x3D; name, age &#x3D; age)</span><br><span class="line"></span><br><span class="line"># 2</span><br><span class="line">p &#x3D; Person(name &#x3D; name, age &#x3D; age)</span><br><span class="line">p.save()</span><br><span class="line"></span><br><span class="line"># 3</span><br><span class="line">p &#x3D; Person(name &#x3D; name)</span><br><span class="line">p.age &#x3D; age</span><br><span class="line">p.save()</span><br><span class="line"></span><br><span class="line"># 4 </span><br><span class="line">Person.objects.get_or_create(name &#x3D; name, age &#x3D; age)</span><br></pre></td></tr></table></figure><p>第四种方法是防止重复的很好方法，但是速度相对较慢，返回一个元祖，第一个为 Person 对象，第二个为 True 或 False 布尔量。新建时返回的是 True，已经存在时返回 False。</p><h4 id="查操作"><a href="#查操作" class="headerlink" title="查操作"></a>查操作</h4><p>查找一个对象有更多的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line">Person.objects.all()</span><br><span class="line"></span><br><span class="line"># 2. 切片操作，获取10个人，不支持负索引，切片可以节约内存</span><br><span class="line">Person.objects.all()[:10]</span><br><span class="line"></span><br><span class="line"># 3</span><br><span class="line">Person.objects.get(name &#x3D; name)</span><br><span class="line"></span><br><span class="line"># 4. get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到 filter</span><br><span class="line">Person.objects.filter(name &#x3D; &quot;abc&quot;)</span><br><span class="line"></span><br><span class="line"># 5. 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件</span><br><span class="line">Person.objects.filter(name__iexact &#x3D; &quot;abc&quot;)</span><br><span class="line"></span><br><span class="line"># 6. 名称中包含 &quot;abc&quot;的人</span><br><span class="line">Person.objects.filter(name__contains &#x3D; &quot;abc&quot;)</span><br><span class="line"></span><br><span class="line"># 7. 名称中包含 &quot;abc&quot;，且abc不区分大小写</span><br><span class="line">Person.objects.filter(name__icontains &#x3D; &quot;abc&quot;)</span><br><span class="line"></span><br><span class="line"># 8. 正则表达式查询</span><br><span class="line">Person.objects.filter(name__regex &#x3D; &quot;^abc&quot;)</span><br><span class="line"></span><br><span class="line"># 9. 正则表达式不区分大小写</span><br><span class="line">Person.objects.filter(name__iregex &#x3D; &quot;^abc&quot;)</span><br><span class="line"></span><br><span class="line"># 10. 排除包含 WZ 的Person对象</span><br><span class="line">Person.objects.exclude(name__contains &#x3D; &quot;WZ&quot;)</span><br><span class="line"></span><br><span class="line"># 11. 找出名称含有abc, 但是排除年龄是23岁的</span><br><span class="line">Person.objects.filter(name__contains&#x3D;&quot;abc&quot;).exclude(age &#x3D; 23)</span><br></pre></td></tr></table></figure><p>有关模型的操作以及 Fields 的更多内容可以查看下列资料：</p><ul><li>Django models 官方教程</li><li>Fields相关官方文档</li></ul>]]></content>
      
      
      <categories>
          
          <category> Django 入门教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 模板（template）</title>
      <link href="2017/07/18/Django%20%E6%A8%A1%E6%9D%BF%EF%BC%88template%EF%BC%89/"/>
      <url>2017/07/18/Django%20%E6%A8%A1%E6%9D%BF%EF%BC%88template%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Django 模板（template）</p><h3 id="添加模板文件"><a href="#添加模板文件" class="headerlink" title="添加模板文件"></a>添加模板文件</h3><p>继续使用之前的 dj4 项目，我们在 learn 这个 app 中添加功能。开始编辑其 views.py 文件，增加一个 home 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vim learn&#x2F;views.py</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(u&#39;Hello Shiyanlou!&#39;)</span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    return render(request, &#39;home.html&#39;)</span><br></pre></td></tr></table></figure><p>然后我们在 learn 目录下增加一个 templates 目录，用来放置模板文件。在 Django 的默认配置中，模板文件放在对应 app 的 templates 的目录中。所以我们新建的这个目录中存放的模板文件，Django 会自动在此查询文件。</p><p>新建 templates 目录，创建 home.html 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cd learn</span><br><span class="line">$ mkdir templates &amp;&amp; cd templates</span><br><span class="line">$ vim home.html</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;shiyanlou&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Programming every time, everywhere.</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>老规矩，在修改完 views.py 之后，来配置一下链接路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim dj4&#x2F;urls.py</span><br><span class="line">from django.conf.urls import include, url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from learn import views as learn_views</span><br><span class="line">from calc import views as calc_views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    # url(r&#39;$&#39;, learn_views.index),</span><br><span class="line">    # url(r&#39;^add&#x2F;&#39;, calc_views.add, name &#x3D; &#39;add&#39;),</span><br><span class="line">    # url(r&#39;^add&#x2F;(\d+)&#x2F;(\d+)&#x2F;$&#39;, calc_views.add2, name &#x3D; &#39;add2&#39;),</span><br><span class="line">    url(r&#39;^$&#39;, learn_views.home, name &#x3D; &#39;home&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接下来测试查看效果：<br><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2626timestamp1488870673488.png/wm"></p><p>发现我们的 html 模板文件成功加载了。这样相对于只有输出日志的文字流灵活更多了。但是，Django 的模板文件不仅仅停留在 html 加载，而是一种新的标记语言。</p><h3 id="深入模板学习"><a href="#深入模板学习" class="headerlink" title="深入模板学习"></a>深入模板学习</h3><p>在很多时候，我们所做的网站有很多通用的部分。例如导航条、页底、访问统计等等。我们可以使用 include 关键字，来通过引入通用文件来插入 html 标记中：</p><p>例如有这么一个 base.html 模板文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;shiyanlou&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&#123;% include &#39;nav.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div&gt;这里是默认内容，所有继承自这个模板的，如果不覆盖就显示这里的默认内容。&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% include &#39;bottom.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% include &#39;tongji.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这就好比每一个页面的基础模板，根据每个网页的不同，再进行定制的修改此文件即可。而定制部分即上例中的 block 关键字部分。</p><p>Django 模板查找机制：查找模板的过程是在每个 app 的 templates 目录中找，每个 app 的 template 形成一个目录列表，Django 遍历这个列表，一个个目录进行查询，当在某一个目录中找到时就停止，所有的都遍历之后，仍旧找不到指定的模板，则进入 Template Not Found 状态。这一点与 Python 对包的查询过程十分类似。这样的设计当然也有利弊，好处是一个 app 可以用另一个 app 的模板文件，而弊端就是可能会发现查询错误的情况，所以我们在 templates 中再以 app 名对其进行细分，则会更加清晰。例如下面这个项目的目录结构，就是笔者比较推荐的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">zqxt</span><br><span class="line">├── tutorial</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── templates</span><br><span class="line">│   │   └── tutorial</span><br><span class="line">│   │       ├── index.html</span><br><span class="line">│   │       └── search.html</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── tryit</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── templates</span><br><span class="line">│   │   └── tryit</span><br><span class="line">│   │       ├── index.html</span><br><span class="line">│   │       └── poll.html</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── manage.py</span><br><span class="line">└── zqxt</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><p>这样，使用的时候，模板就是 “tutorial/index.html” 和 “tryit/index.html” 这样有app作为名称的一部分，就不会混淆。</p><h3 id="模板的使用进阶"><a href="#模板的使用进阶" class="headerlink" title="模板的使用进阶"></a>模板的使用进阶</h3><h4 id="条件判断与循环"><a href="#条件判断与循环" class="headerlink" title="条件判断与循环"></a>条件判断与循环</h4><p>修改 learn 的 views.py 文件的 home 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def home(request):</span><br><span class="line">    string &#x3D; u&quot;Shiyanlou is very good!&quot;</span><br><span class="line">    return render(request, &#39;home.html&#39;, &#123;&#39;string&#39;: string&#125;)</span><br></pre></td></tr></table></figure><p>然后我们在 home.html 中，使用  标记就可以把改字符串传递进来：<br><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2626timestamp1488870734705.png/wm"><br>当然，不仅可以传递字符串，还可以将 List 内容传递至模板中。但是有 List 的地方我们只有遍历才能将其数据全部取出。所以模板文件可以使用 for 循环对传入的 List 变量进行遍历操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def home(request):</span><br><span class="line">    TutorialList &#x3D; [&quot;HTML&quot;, &quot;CSS&quot;, &quot;jQuery&quot;, &quot;Python&quot;, &quot;Django&quot;]</span><br><span class="line">    return render(request, &#39;home.html&#39;, &#123;&#39;TutorialList&#39;: TutorialList&#125;)</span><br></pre></td></tr></table></figure><p>在视图文件中，我们使用下列标记来进行遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in TutorialList %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125;,</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2626timestamp1488870767040.png/wm"></p><p>我们将课程数据传入页面并展示，但是发现还有一些小的瑕疵，即在字符串 Django 后面仍旧有一个逗号。解决的方法很多，但是这里为了让你了解模板，我们继续使用模板中的条件语句标记来修改这个瑕疵</p><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vim learn&#x2F;templates&#x2F;home.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;shiyanlou&lt;&#x2F;title&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Programming every time, everywhere. There are some courses: &lt;br &#x2F;&gt;</span><br><span class="line">&#123;% for i in TutorialList %&#125;</span><br><span class="line">    &#123;&#123; i &#125;&#125;</span><br><span class="line">    &#123;% if not forloop.last %&#125;</span><br><span class="line">        ,</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这里我们只需要判断是否为 List 中的最后一个元素即可。于是我们解决了这个 bug。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2626timestamp1488870793104.png/wm"></p><p>这里还有一些用法，请读者们自行尝试，我在这里为大家列出。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>forloop.counter</td><td>索引从 1 开始算</td></tr><tr><td>forloop.counter0</td><td>索引从 0 开始算</td></tr><tr><td>forloop.revcounter</td><td>索引从最大长度到 1</td></tr><tr><td>forloop.revcounter0</td><td>索引从最大长度到 0</td></tr><tr><td>forloop.first</td><td>当遍历的元素为第一项时为真</td></tr><tr><td>forloop.last</td><td>当遍历的元素为最后一项时为真</td></tr><tr><td>forloop.parentloop</td><td>用在嵌套的 for 循环中，获取上一层 for 循环的 forloop</td></tr></tbody></table><p>当然，Django 的模板功能远远不止这些，如果想深入了解，请大家阅读官方文档。</p>]]></content>
      
      
      <categories>
          
          <category> Django 入门教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 视图与链接路由</title>
      <link href="2017/07/18/Django%20%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%93%BE%E6%8E%A5%E8%B7%AF%E7%94%B1/"/>
      <url>2017/07/18/Django%20%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%93%BE%E6%8E%A5%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>Django 视图与链接路由</p><h3 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h3><p>使用之前已经安装的 Django 1.8.13 建立一个新的 Django 项目，并命名为 dj4。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin.py startproject dj4</span><br></pre></td></tr></table></figure><p>运行后成功的话，可以看到如下的目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dj4</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── manage.py</span><br></pre></td></tr></table></figure><p>我们会发现，在新建的 dj4 目录中，其中还有一个 dj4 目录，这个子目录是 dj4 中的一些项目配置 settings.py 文件、总的链接路由 urls.py 以及部署服务器时用到的 wsgi.py 文件，<strong>init</strong>.py 是 Python 包的目录结构基础文件，与包的调用有关。</p><p>在当前的 dj4 目录下，新建一个应用，并命名为 learn。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py startapp learn</span><br></pre></td></tr></table></figure><p>成功后观察一下新创建的 learn 目录结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── admin.py</span><br><span class="line">├── __init__.py</span><br><span class="line">├── migrations</span><br><span class="line">│   └── __init__.py</span><br><span class="line">├── models.py</span><br><span class="line">├── tests.py</span><br><span class="line">└── views.py</span><br></pre></td></tr></table></figure><p>migrations 目录用于记录数据库变化日志。这个目录是在 Django 1.8.x 以上的版本才会存在。而在 Django 1.9.x 以上的版本，在当前目录下还会多出一个 apps.py 的文件。由于实验楼所使用的 Django 版本是 1.8.x ，所以我们无需关注它。</p><p>然后将新定义的 app 添加到 settings.py 中的 INSTALL_APPS 中（作者的 project 是建立在系统用户根目录下的，下面文件路径请读者自行修改）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~&#x2F;dj4&#x2F;dj4&#x2F;settings.py</span><br><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line"></span><br><span class="line">    &#39;learn&#39;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>希望大家不仅会改，还要理解此步骤的操作含义。我们将新建的 learn 这个 app 添加至 INSTALL_APPS 中，Django 就可以自动的找到 app 中的模板文件（app-name/templates/all_files）。</p><h3 id="定义视图函数"><a href="#定义视图函数" class="headerlink" title="定义视图函数"></a>定义视图函数</h3><p>在 learn 目录中，我们来编辑 views.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#coding: utf-8</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(u&quot;Hello Shiyanlou!&quot;)</span><br></pre></td></tr></table></figure><p>第一行代码是为了声明文本编码为 utf-8，因为我们在代码中使用了中文。</p><p>第三行引入 HttpResponse ，它是用来向网页返回内容的，就像 Python 中的 print 函数一样，只不过 HttpResponse 是把内容显示到网页上。（其实是对数据的一个传递，这里为了简单理解，我们可以当做一个输出函数来看待。）</p><p>最后我们定义了一个 index() 函数，第一个参数必须是 request，这个与请求有关，request 变量里包含了 get 或 post 方式（这是一种 RESTful API 的设计风格，在资源传递方式中还有 put、delete 另两种方式，只是之前提到的两个最常用）传递而来的参数。我们可以对这些参数做出定制处理，然后向用户层返回待展示的数据。这里不做复杂的功能，我们直接返回 Hello Shiyanlou! 这个字符串即可。</p><h3 id="定义视图相关的-URL，即路由配置"><a href="#定义视图相关的-URL，即路由配置" class="headerlink" title="定义视图相关的 URL，即路由配置"></a>定义视图相关的 URL，即路由配置</h3><p>接下来，我们进行路由配置。编辑 urls.py 这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~&#x2F;dj4&#x2F;dj4&#x2F;urls.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from learn import views as learn_views  # new</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^$&#39;, learn_views.index),  # new</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>之后我们可以在项目目录中启动 Django 服务器，来查看一下效果。后面的端口号可以在合理范围内自由设置，这里以笔者的生日 1103 为例。看到如下图结果，说明成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:1103</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2625timestamp1488863828031.png/wm"></p><h3 id="进阶实验"><a href="#进阶实验" class="headerlink" title="进阶实验"></a>进阶实验</h3><p>觉得上面的实验太简单，还是在重复 Hello World ？下面笔者将带大家做一个较难的示例：用链接进行加减法的运算。</p><h4 id="采用-GET-方法进行参数传递"><a href="#采用-GET-方法进行参数传递" class="headerlink" title="采用 GET 方法进行参数传递"></a>采用 GET 方法进行参数传递</h4><p>在 dj4 项目中，我们继续增加一个 app，命名为 calc。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py startapp calc</span><br></pre></td></tr></table></figure><p>接着，我们修改一下 calc/views.py 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim calc&#x2F;views.py</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def add(request):</span><br><span class="line">    a &#x3D; request.GET.get(&#39;a&#39;, 0)</span><br><span class="line">    b &#x3D; request.GET.get(&#39;b&#39;, 0)</span><br><span class="line">    c &#x3D; int(a) + int(b)</span><br><span class="line">    return HttpResponse(str(c))</span><br></pre></td></tr></table></figure><p>这段代码中的意思就是 a 和 b 两个变量通过 get 方法获取参数。如果没有获取到，就默认赋值为 0。</p><p>接着继续修改 urls.py 文件，来设置路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim dj4&#x2F;urls.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from learn import views as learn_views</span><br><span class="line">from calc import views as calc_views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^add&#x2F;$&#39;, calc_views.add, name&#x3D;&#39;add&#39;),  # 注意修改了这一行</span><br><span class="line">    # url(r&#39;$&#39;, learn_views.index), # 这一行先删掉，因为 $ 会造成匹配混乱</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>返回项目主目录，迫不及待的去测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py runserver 0.0.0.0:1103</span><br></pre></td></tr></table></figure><p>当我们访问 <a href="http://0.0.0.0:1103/add/?a=3&amp;b=2">http://0.0.0.0:1103/add/?a=3&amp;b=2</a> 的时候，会看到以下结果，实验成果：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2625timestamp1488863866633.png/wm"></p><h4 id="巧用路由正则匹配实现加法"><a href="#巧用路由正则匹配实现加法" class="headerlink" title="巧用路由正则匹配实现加法"></a>巧用路由正则匹配实现加法</h4><p>在 5.1 中的加法操作在我们的 Django 服务端中是这么的一个流程实现：当我们键入指定的网址时，我们通过 get 的写法在 URL 上进行明文数据传输。当 Django 通过 urls.py 匹配到指定的 URL 时，会调用 calc app 中 views.py 中的 add 方法。add 使用 get 获取参数的写法获取到 a 和 b 两个参数，并在反馈给用户渲染页面之前完成计算一起返回到用户端，并以文本的方式加以渲染浏览器显示的页面。</p><p>然而，由于路由部分使用的是正则匹配原理，我们则可以通过我们想要的方式，将数据匹配出来并随着 request 参数一起传到 views.py 亦可。此处，假如我们想使用 /add/3/2/ 这种格式，完成 3 + 2 的运算，我们来重新编辑一下 views.py，增加一个新方法 add2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim calc&#x2F;views.py</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def add(request):</span><br><span class="line">    a &#x3D; request.GET.get(&#39;a&#39;, 0)</span><br><span class="line">    b &#x3D; request.GET.get(&#39;b&#39;, 0)</span><br><span class="line">    c &#x3D; int(a) + int(b)</span><br><span class="line">    return HttpResponse(str(c))</span><br><span class="line"></span><br><span class="line">def add2(request, a, b):</span><br><span class="line">    c &#x3D; int(a) + int(b)</span><br><span class="line">    return HttpResponse(str(c))</span><br></pre></td></tr></table></figure><p>此时我们便需要在 urls.py 中为我们的新方法传递 a 和 b 两个变量，编辑 urls.py 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim dj4&#x2F;urls.py</span><br><span class="line">from django.conf.urls import include, url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from learn import views as learn_views</span><br><span class="line">from calc import views as calc_views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">     url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">     # url(r&#39;$&#39;, learn_views.index),</span><br><span class="line">     # url(r&#39;^add&#x2F;&#39;, calc_views.add, name &#x3D; &#39;add&#39;), #  为了防止匹配问题，我们将之前的 add 方法也注释掉</span><br><span class="line">     url(r&#39;^add&#x2F;(\d+)&#x2F;(\d+)&#x2F;$&#39;, calc_views.add2, name &#x3D; &#39;add2&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>测试一下，当我们以 /add/3/2/ 此种格式来输入参数，发现可以正常进行加法运算：<br><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2625timestamp1488863894344.png/wm"></p>]]></content>
      
      
      <categories>
          
          <category> Django 入门教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 基本命令</title>
      <link href="2017/07/18/Django%20%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>2017/07/18/Django%20%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Django 基本命令</p><h3 id="新建一个-Django-Project"><a href="#新建一个-Django-Project" class="headerlink" title="新建一个 Django Project"></a>新建一个 Django Project</h3><p>这个命令我们在第一章中已经使用，可以翻看之前 HelloWorld 项目建立来实践：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin.py startproject project-name</span><br></pre></td></tr></table></figure><p>注意，在 Windows 系统下，如果报错，尝试用 django-admin 代替 django-admin.py。</p><p>在输入完该条指令后，系统会在当前目录增加一个项目名目录，并且其中存有最基础的 Django 项目文件。</p><h3 id="新建-app"><a href="#新建-app" class="headerlink" title="新建 app"></a>新建 app</h3><p>同样，在第一章中已经使用，可以翻看之前建立 Hello app 的操作流程来实践：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py startapp app-name</span><br></pre></td></tr></table></figure><p>另有一种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin.py startapp app-name</span><br></pre></td></tr></table></figure><p>一般一个项目会存有多个 app ，当然通用的 app 也可以在多个 Django 项目中通用这个 app。</p><h3 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><p>这种方法可以创建表，当你在 models.py 中新增类时，运行它就可以自动在数据库中创建表，不用手动创建。</p><p>备注：对已有的 models 进行修改，Django 1.7 之前的版本是无法自动修改数据库表结构的，不过有第三方的 south 工具可以使用。</p><h3 id="使用开发服务器"><a href="#使用开发服务器" class="headerlink" title="使用开发服务器"></a>使用开发服务器</h3><p>开发服务器，即开发时使用，一般修改代码后会自动重启，方便调试和开发，但是由于性能问题，建议只用来测试，不要用在生产环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 默认情况下在 0.0.0.0:8080 启动</span><br><span class="line">$ python manage.py runserver </span><br><span class="line"></span><br><span class="line"># 当提示端口被占用的时候，可以用其他端口</span><br></pre></td></tr></table></figure><h3 id="清空数据库"><a href="#清空数据库" class="headerlink" title="清空数据库 *"></a>清空数据库 *</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py flush</span><br></pre></td></tr></table></figure><p>此命令会询问是 yes 还是 no，选择 yes 会把数据库全部清空掉，只留下空表。</p><h3 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员 *"></a>创建超级管理员 *</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py createsuperuser</span><br><span class="line"></span><br><span class="line"># 按照提示输入用户名和对应的密码可以，邮箱可以留空，用户名和密码必填</span><br><span class="line"># 修改用户密码可以使用以下命令</span><br><span class="line">$ python manage.py changepassword username</span><br></pre></td></tr></table></figure><h3 id="导出数据-导入数据"><a href="#导出数据-导入数据" class="headerlink" title="导出数据 导入数据 *"></a>导出数据 导入数据 *</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py dumpdata appname &gt; appname.json</span><br><span class="line">$ python manage.py loaddata appname.json</span><br></pre></td></tr></table></figure><p>关于数据库操作，在后面的数据库课程中会详细介绍。</p><h3 id="Django-项目环境终端"><a href="#Django-项目环境终端" class="headerlink" title="Django 项目环境终端"></a>Django 项目环境终端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py shell</span><br></pre></td></tr></table></figure><p>如果你安装了 bpython 或 ipython 会自动用它们的界面，这里推荐使用 ipython。</p><p>这个命令和直接运行 python 进入 shell 的区别是：**你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据，还有一些小测试非常方便。</p><p>当熟悉使用 shell 环境终端时，你会发现测试新的方法更加的快速，效率成倍提高。（就跟学会了 Vim 一样，并不是想引发圣战 /(ㄒoㄒ)/~~）</p><h3 id="数据库命令行"><a href="#数据库命令行" class="headerlink" title="数据库命令行 *"></a>数据库命令行 *</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py dbshell</span><br></pre></td></tr></table></figure><p>Django 会自动进入在 settings.py 中设置的数据库，如果是 MySQL 或 postgreSQL ，会要求输入数据库用户密码。在这个终端可以执行数据库的 SQL 语句。如果你对 SQL 比较熟悉，可能会喜欢这种方式。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多 *"></a>更多 *</h3><p>直接在终端上输入以下命令，可以看到详细的列表，在忘记参数名时特别有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py</span><br></pre></td></tr></table></figure><p>更详细的介绍，还是推荐官网的文档。给你列出三个版本，对应学习。</p><ul><li>1.10</li><li>1.8</li><li>deb</li></ul>]]></content>
      
      
      <categories>
          
          <category> Django 入门教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 环境搭建与目录结构</title>
      <link href="2017/07/18/Django%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>2017/07/18/Django%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Django 环境搭建与目录结构</p><h3 id="使用-pip-组件进行安装"><a href="#使用-pip-组件进行安装" class="headerlink" title="使用 pip 组件进行安装"></a>使用 pip 组件进行安装</h3><p>先安装 pip 组件：</p><h4 id="Ubuntu-Debian"><a href="#Ubuntu-Debian" class="headerlink" title="Ubuntu(Debian)"></a>Ubuntu(Debian)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><h4 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python3-pip</span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>使用 get-pip.py 进行安装。直接下载 get-pip.py ，然后在命令行下执行即可安装 pip 组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 get-pip.py</span><br></pre></td></tr></table></figure><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>在 macOS 下，建议 Python 通过 Homebrew 进行安装。使用 Homebrew 安装后的 Python 自带 pip 组件。</p><p>如果 pip 版本过低，可以使用以下命令对 pip 进行升级（Windows 用户无需输入 sudo）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><p>在 pip 安装好的情况下，输入以下命令安装指定版本的 Django。由于本课程使用的 Django 版本号为 1.8.13，则输入以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install Django&#x3D;&#x3D;1.8.13</span><br></pre></td></tr></table></figure><h3 id="使用源码包安装"><a href="#使用源码包安装" class="headerlink" title="使用源码包安装"></a>使用源码包安装</h3><p>另外，你也可以下载源码进行安装。在官方的源码包列表中进行下载，以 django-1.8.13.tar.gz 为例：</p><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><p>直接用解压软件解压，然后到命令行（例如在 D:\django-1.8.13\ 这个目录）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd D:</span><br><span class="line">cd django-1.8.13</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><h4 id="Linux-或-macOS"><a href="#Linux-或-macOS" class="headerlink" title="Linux 或 macOS"></a>Linux 或 macOS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf django-1.8.13.tar.gz</span><br><span class="line">cd django-1.8.13</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><p>当安装好 Django Web 框架后，我们在 Python 提供的交互式环境下即可检测 Django 的安装情况和版本信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shiyanlou:~&#x2F; $ python3</span><br><span class="line">Python 3.4.3 (default, Sep 14 2016, 12:36:27)</span><br><span class="line">[GCC 4.8.4] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import django</span><br><span class="line">&gt;&gt;&gt; django.get_version()</span><br><span class="line">&#39;1.8.13&#39;</span><br></pre></td></tr></table></figure><p>显示正确的安装版本 1.8.13 说明 Django 安装成功。</p><h3 id="使用-virtualenv-实现开发环境分离"><a href="#使用-virtualenv-实现开发环境分离" class="headerlink" title="使用 virtualenv 实现开发环境分离"></a>使用 virtualenv 实现开发环境分离</h3><p>开发会用 virtualenv 来管理多个开发环境。在服务器上有时我们不止一个项目，而且每个项目由于使用的框架包版本不同则会造成矛盾。例如：一个项目依赖于 Django 1.8，而另一项目较为久远，依赖于 Django 1.4，导致不兼容项目无法正常运行。此时我们使用 virtualenv 来解决这些问题。</p><p>virtualenv 可以创建一个拥有自己安装目录的环境，这个环境不与其他虚拟环境共享库，能够方便的管理 Python 版本和管理 Python 库。</p><p>依托于之前安装 Django 时的 pip 组件，我们可以很容易的安装 virtualenv：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install virtualenv</span><br></pre></td></tr></table></figure><p>安装成功我们，我们来创建 virtualenv 环境。例如我们创建一个名为 dj 的环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv dj</span><br></pre></td></tr></table></figure><p>当需要读取环境时使用 source 命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .&#x2F;dj&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure><p>测试在命令行中，发现我们的用户名签多了一个 (dj) ，这是 virtualenv 在提示我们在 dj 此开发环境中。</p><p>当我们需要退出该开发环境时，只需要键入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><h3 id="一览-Django-全貌"><a href="#一览-Django-全貌" class="headerlink" title="一览 Django 全貌"></a>一览 Django 全貌</h3><p>在上一章节中，我们浏览了 Django 项目的项目结构。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Hello</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── HelloWorld</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   ├── __init__.cpython-34.pyc</span><br><span class="line">│   │   └── settings.cpython-34.pyc</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── manage.py</span><br></pre></td></tr></table></figure><p>那么这些文件具体都是什么作用呢？我们先不要关注它们的代码，这里将带大家了解一下它们的作用：</p><h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h4><p>链接入口，关联到对应的 views.py 中的一个函数（或者乘坐 generic 类），访问的链接就对应一个函数。</p><h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><p>处理用户发出的请求，从 urls.py 中对应而来，通过渲染 templates 中的网页可以为用户显示页面内容，比如登录后的用户名，用户请求的数据，通过其输出到页面。</p><h4 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h4><p>与数据库操作相关，存入或读取数据时使用。当不使用数据库的时候，也可以当做一般的类封装文件，存储各种类的定义。</p><h4 id="forms-py"><a href="#forms-py" class="headerlink" title="forms.py"></a>forms.py</h4><p>表单，用户在浏览器上输入提交，对数据的验证工作以及输入框的生成等工作，都依托于此。</p><h4 id="admin-py"><a href="#admin-py" class="headerlink" title="admin.py"></a>admin.py</h4><p>后台文件，可以用少量的代码就拥有一个强大的后台。</p><h4 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h4><p>Django 的设置、配置文件，比如 DEBUG 的开关，静态文件的位置等等。</p><p>除了这些，还有以上目录中未提及的：</p><h4 id="templates目录"><a href="#templates目录" class="headerlink" title="templates目录"></a>templates目录</h4><p>views.py 中的函数渲染 templates 中的 html 模板，得到动态内容的网页，可以用缓存来提高渲染速度。</p>]]></content>
      
      
      <categories>
          
          <category> Django 入门教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Hello World</title>
      <link href="2017/07/17/Django%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>2017/07/17/Django%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Django Hello World</p><h3 id="Django-的特点"><a href="#Django-的特点" class="headerlink" title="Django 的特点"></a>Django 的特点</h3><p>Django 是由 Python 开发的一个免费的开源网站框架，可以用于快速搭建高性能，优雅的网站！何为优雅，请看 Django 的以下特点：</p><h4 id="强大的数据库功能"><a href="#强大的数据库功能" class="headerlink" title="强大的数据库功能"></a>强大的数据库功能</h4><p>用 Python 的类继承，几行代码就可以拥有一个丰富、动态的数据库操作接口（API），如果需要你也能执行 SQL 语句进行数据库的增、删、查、改操作。</p><h4 id="自带的强大后台功能"><a href="#自带的强大后台功能" class="headerlink" title="自带的强大后台功能"></a>自带的强大后台功能</h4><p>几行简单的代码就能让你的网站拥有一个强大的后台，轻松管理你的内容！</p><h4 id="优雅的链接路由"><a href="#优雅的链接路由" class="headerlink" title="优雅的链接路由"></a>优雅的链接路由</h4><p>用正则匹配方式匹配链接，传递到对应的函数，随意定义，如你所愿。</p><h4 id="Model-模板-系统"><a href="#Model-模板-系统" class="headerlink" title="Model(模板)系统"></a>Model(模板)系统</h4><p>易于扩展的 Model 系统，设计简易。易于代码解耦。</p><h4 id="缓存系统"><a href="#缓存系统" class="headerlink" title="缓存系统"></a>缓存系统</h4><p>与 memcached 或其他的缓存系统联用，更出色的表现，更快的加载速度。</p><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p>支持多语言英语，允许自定义翻译的字符，轻松翻译成多国语言。</p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><blockquote><p>关于 Django 的环境搭建我们将在下一节中详细介绍，下面部分为初学 Django 的初体验，让读者感受 Django 搭建 Web 服务端的快捷。</p></blockquote><p>在用户根目录下，新建一个 django 目录，用于保存本课程的所有试验代码文件。我们可以执行以下命令进行目录创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ shiyanlou:~&#x2F; $ mkdir django</span><br><span class="line">$ shiyanlou:~&#x2F; $ cd django</span><br></pre></td></tr></table></figure><p>在 django 目录中，我们创建第一个 Django 项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ shiyanlou:django&#x2F; $ django-admin startproject HelloWorld</span><br><span class="line">$ shiyanlou:django&#x2F; $ cd HelloWorld</span><br><span class="line">$ shiyanlou:HelloWorld&#x2F; $ ls</span><br><span class="line">HelloWorld  manage.py</span><br></pre></td></tr></table></figure><p>在 HelloWorld 项目目录中，使用 Django 的基本命令创建一个新的 app，名为 Hello：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ shiyanlou:HelloWorld&#x2F; $ python3 manage.py startapp Hello</span><br><span class="line">$ shiyanlou:HelloWorld&#x2F; $ ls</span><br><span class="line">Hello  HelloWorld  manage.py</span><br></pre></td></tr></table></figure><p>此时，我们项目的目录结构如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Hello</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── HelloWorld</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   ├── __init__.cpython-34.pyc</span><br><span class="line">│   │   └── settings.cpython-34.pyc</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── manage.py</span><br></pre></td></tr></table></figure><p>请编辑 Hello 目录中的 views.py 文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#coding: utf-8</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(u&#39;Hello World&#39;)</span><br></pre></td></tr></table></figure><p>这样我们就编辑好了一个视图。由于我们新建立了一个 app，则需要在默认配置中添加这个 app。编辑 ./HelloWorld/settings.py，在 INSTALLED_APPS 这个数组中加入我们的 app：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;Hello&#39;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>最后，我们为刚刚的页面配置 URL 路由即可完成，要编辑的文件为 ./HelloWorld/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import include, url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from Hello import views as Hello_views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, Hello_views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>大功告成，来运行我们的 Web 服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py runserver 8080</span><br></pre></td></tr></table></figure><p>看到服务器搭建成功的反馈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have unapplied migrations; your app may not work properly until they are applied.</span><br><span class="line">Run &#39;python manage.py migrate&#39; to apply them.</span><br><span class="line"></span><br><span class="line">March 03, 2017 - 08:23:54</span><br><span class="line">Django version 1.8.13, using settings &#39;HelloWorld.settings&#39;</span><br><span class="line">Starting development server at http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p>打开实验楼环境中的 Firefox 浏览器测试一下。如果成功，则结果如下图：<br><img src="https://dn-anything-about-doc.qbox.me/document-uid370033labid2617timestamp1488534262639.png/wm"></p><h3 id="课程作业"><a href="#课程作业" class="headerlink" title="课程作业"></a>课程作业</h3><p>在 Hello 这个 app 中，在 views.py 增加一个界面，返回字符串 Hello Django，当客户端启动后，请在 <a href="http://127.0.0.1:8080/django">http://127.0.0.1:8080/django</a> 显示 Hello Django。</p><ul><li>views.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#coding: utf-8</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(u&#39;Hello World&#39;)</span><br><span class="line"></span><br><span class="line">def django(requset):</span><br><span class="line">    return HttpResponse(u&#39;Hello Django&#39;)</span><br></pre></td></tr></table></figure></li><li>urls.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import include, url</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from Hello import views as Hello_views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class="line">    url(r&#39;^$&#39;, Hello_views.index),</span><br><span class="line">    url(r&#39;^django&#x2F;&#39;, Hello_views.django)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django 入门教程 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask 介绍</title>
      <link href="2017/07/16/Python%20Flask%20%E4%BB%8B%E7%BB%8D/"/>
      <url>2017/07/16/Python%20Flask%20%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>Python Flask 介绍</p><h3 id="什么是-Flask"><a href="#什么是-Flask" class="headerlink" title="什么是 Flask?"></a>什么是 Flask?</h3><p>Flask 是一个 web 框架。也就是说 Flask 为你提供工具，库和技术来允许你构建一个 web 应用程序。这个 web 应用程序可以使一些 web 页面、博客、wiki、基于 web 的日历应用或商业网站。</p><p>Flask 属于微框架（micro-framework）这一类别，微架构通常是很小的不依赖于外部库的框架。这既有优点也有缺点，优点是框架很轻量，更新时依赖少，并且专注安全方面的 bug，缺点是，你不得不自己做更多的工作，或通过添加插件增加自己的依赖列表。Flask 的依赖如下：</p><ul><li>Werkzeug 一个 WSGI 工具包</li><li>jinja2 模板引擎</li></ul><p>维基百科 WSGI 的介绍：</p><blockquote><p>Web服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口)。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。</p></blockquote><h3 id="什么是模板引擎？"><a href="#什么是模板引擎？" class="headerlink" title="什么是模板引擎？"></a>什么是模板引擎？</h3><p>你搭建过一个网站吗？你面对过保持网站风格一致的问题吗，你不得不写多次相同的文本吗？你有没有试图改变这种网站的风格？</p><p>如果你的网站只包含几个网页，改变网站风格会花费你一些时间，这确实可行。尽管如此，如果你有许多页面（比如在你商店里的售卖物品列表），这个任务便很艰巨。</p><p>使用模板你可以设置你的页面的基本布局，并提及哪个元素将发生变化。这种方式可以定义您的网页头部并在您的网站的所有页面使它保持一致，如果你需要改变网页头部，你只需要更新一个地方。</p><p>使用模板引擎创建/更新/维护你的应用会节约你很多时间。</p><h3 id="“Hello-World”-应用"><a href="#“Hello-World”-应用" class="headerlink" title="“Hello World” 应用"></a>“Hello World” 应用</h3><p>我们将使用 flask 完成一个非常基础的应用。</p><ul><li><p>安装 flask</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install flask</span><br></pre></td></tr></table></figure></li><li><p>创建项目结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p hello_flask&#x2F;&#123;templates,static&#125;</span><br></pre></td></tr></table></figure><p>这是你的 web 应用的基本结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree hello_flask&#x2F;</span><br><span class="line">hello_flask</span><br><span class="line">|-- static</span><br><span class="line">&#96;-- templates</span><br><span class="line"></span><br><span class="line">2 directories, 0 files</span><br></pre></td></tr></table></figure><p>templates 文件夹是存放模板的地方，static 文件夹存放 web 应用所需的静态文件（images, css, javascript）。</p></li><li><p>创建应用文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hello_flask</span><br><span class="line">$ vim hello_flask.py</span><br></pre></td></tr></table></figure><p>hello_flask.py 文件里编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">import flask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Create the application.</span><br><span class="line">APP &#x3D; flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@APP.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    &quot;&quot;&quot; 显示可在 &#39;&#x2F;&#39; 访问的 index 页面</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return flask.render_template(&#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    APP.debug&#x3D;True</span><br><span class="line">    APP.run()</span><br></pre></td></tr></table></figure></li><li><p>创建模板文件 index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim templates&#x2F;index.html</span><br></pre></td></tr></table></figure><p>index.html 文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&#39;en&#39;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">  &lt;title&gt;Hello world!&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;link type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">        href&#x3D;&quot;&#123;&#123; url_for(&#39;static&#39;,</span><br><span class="line">              filename&#x3D;&#39;hello.css&#39;)&#125;&#125;&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">It works!</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>运行 flask 应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 hello_flask.py</span><br></pre></td></tr></table></figure><p>访问 <a href="http://127.0.0.1:5000/%EF%BC%8C%E8%BF%99%E5%BA%94%E8%AF%A5%E5%8F%AA%E6%98%AF%E6%98%BE%E7%A4%BA%E9%BB%91%E5%AD%97%E7%99%BD%E5%BA%95%E7%9A%84">http://127.0.0.1:5000/，这应该只是显示黑字白底的</a> “It works!” 文本，如下图：<br><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2054timestamp1471431664753.png/wm"></p><h3 id="Flask-中使用参数"><a href="#Flask-中使用参数" class="headerlink" title="Flask 中使用参数"></a>Flask 中使用参数</h3></li></ul><p>在本节中我们将要看到如何根据用户使用的 URL 返回网页。</p><p>为此我们更新 hello_flask.py 文件。</p><ul><li>在 hello_flask.py 文件中添加以下条目<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@APP.route(&#39;&#x2F;hello&#x2F;&lt;name&gt;&#x2F;&#39;)</span><br><span class="line">def hello(name):</span><br><span class="line">    &quot;&quot;&quot; Displays the page greats who ever comes to visit it.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return flask.render_template(&#39;hello.html&#39;, name&#x3D;name)</span><br></pre></td></tr></table></figure></li><li>创建下面这个模板 hello.html<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&#39;en&#39;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">          href&#x3D;&quot;&#123;&#123; url_for(&#39;static&#39;,</span><br><span class="line">               filename&#x3D;&#39;hello.css&#39;)&#125;&#125;&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">      Hello &#123;&#123;name&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li>运行 flask 应用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 hello_flask.py</span><br></pre></td></tr></table></figure>访问 <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> ，这应该只是显示黑字白底的 “It works!” 文本。</li></ul><p>访问<a href="http://127.0.0.1:5000/hello/you%EF%BC%8C%E8%BF%99%E5%BA%94%E8%AF%A5%E8%BF%94%E5%9B%9E%E6%96%87%E6%9C%AC">http://127.0.0.1:5000/hello/you，这应该返回文本</a> “Hello you”，见下图：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2054timestamp1471431681574.png/wm"></p><p>无论你在 URL 中 /hello/ 后填写的什么，都会出现在返回的网页中。</p><p>这是你第一次使用模板，我们在 hello_flask.py 中建立了 name 变量（参见 hello 函数的 return 行）。通过语法 ，name 变量之后在页面中显示其自身。</p><h3 id="额外工作"><a href="#额外工作" class="headerlink" title="额外工作"></a>额外工作</h3><h4 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h4><p>目前，对于每一个页面我们都创建了一个模板，其实这是不好的做法，我们应该做的是创建一个主模板并且在每个页面使用它。</p><ul><li>创建模板文件 master.html。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&#39;en&#39;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">  &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125; - Hello Flask!&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;link type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">       href&#x3D;&quot;&#123;&#123; url_for(&#39;static&#39;,</span><br><span class="line">                        filename&#x3D;&#39;hello.css&#39;)&#125;&#125;&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li>调整模板 index.html。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;master.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Home&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">It works!</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>正如你所看到的，在 master.html 模板中我们定义了两部分，名为 title 和 body 的 blocks。</li></ul><p>在模板 index.html 中，我们声明这个模板扩展自 master.html 模板，然后我们定义了内容来放在这两个部分中（blocks）。在第一个 block title 中，我们放置了 Home 单词，在第二个 block body 中我们定义了我们想要在页面的 body 中有的东西。</p><ul><li>作为练习，更改其他模板 hello.html，同样要使用 master.html。</li><li>在 hello 页面添加首页链接。</li></ul><p>调整模板 hello.html，添加到首页的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url_for(&#39;index&#39;) &#125;&#125;&quot;&gt;&lt;button&gt;Home&lt;&#x2F;button&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>作为你的任务，在首页添加到 hello 页面的链接。</p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 项目结构</title>
      <link href="2017/07/16/Python%20%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
      <url>2017/07/16/Python%20%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Python 项目结构</p><h3 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h3><p>我们的实验项目名为 factorial。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir factorial</span><br><span class="line">$ cd factorial&#x2F;</span><br></pre></td></tr></table></figure><h3 id="主代码"><a href="#主代码" class="headerlink" title="主代码"></a>主代码</h3><p>我们给将要创建的 Python 模块取名为 myfact，因此我们下一步创建 myfact 目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir myfact</span><br><span class="line">$ cd myfact&#x2F;</span><br></pre></td></tr></table></figure><p>主代码将在 fact.py 文件里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;myfact module&quot;</span><br><span class="line"></span><br><span class="line">def factorial(num):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回给定数字的阶乘值</span><br><span class="line"></span><br><span class="line">    :arg num: 我们将计算其阶乘的整数值</span><br><span class="line"></span><br><span class="line">    :return: 阶乘值，若传递的参数为负数，则为 -1</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if num &gt;&#x3D; 0:</span><br><span class="line">        if num &#x3D;&#x3D; 0:</span><br><span class="line">            return 1</span><br><span class="line">        return num * factorial(num -1)</span><br><span class="line">    else:</span><br><span class="line">        return -1</span><br><span class="line">我们还有模块的 __init__.py 文件，内容如下：</span><br><span class="line"></span><br><span class="line">from fact import factorial</span><br><span class="line">__all__ &#x3D; [factorial, ]</span><br></pre></td></tr></table></figure><p>我们还在 factorial 目录下添加了一个 README.rst 文件。因此，目录结构看起来像下面这样：<br><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2053timestamp1471429969970.png/wm"></p><h3 id="MANIFEST-in"><a href="#MANIFEST-in" class="headerlink" title="MANIFEST.in"></a>MANIFEST.in</h3><p>现在我们要写一个 MANIFEST.in 文件，它用来在使用 sdist 命令的时候找出将成为项目源代码压缩包一部分的所有文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include *.py</span><br><span class="line">include README.rst</span><br></pre></td></tr></table></figure><p>如果你想要排除某些文件，你可以在这个文件中使用 exclude 语句。</p><h3 id="安装-python-setuptools-包"><a href="#安装-python-setuptools-包" class="headerlink" title="安装 python-setuptools 包"></a>安装 python-setuptools 包</h3><p>我们使用 virtualenv（这里不示范步骤）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install setuptools</span><br></pre></td></tr></table></figure><h3 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h3><p>最终我们需要写一个 setup.py，用来创建源代码压缩包或安装软件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">&quot;&quot;&quot;Factorial project&quot;&quot;&quot;</span><br><span class="line">from setuptools import find_packages, setup</span><br><span class="line"></span><br><span class="line">setup(name &#x3D; &#39;factorial&#39;,</span><br><span class="line">    version &#x3D; &#39;0.1&#39;,</span><br><span class="line">    description &#x3D; &quot;Factorial module.&quot;,</span><br><span class="line">    long_description &#x3D; &quot;A test module for our book.&quot;,</span><br><span class="line">    platforms &#x3D; [&quot;Linux&quot;],</span><br><span class="line">    author&#x3D;&quot;ShiYanLou&quot;,</span><br><span class="line">    author_email&#x3D;&quot;support@shiyanlou.com&quot;,</span><br><span class="line">    url&#x3D;&quot;https:&#x2F;&#x2F;www.shiyanlou.com&#x2F;courses&#x2F;596&quot;,</span><br><span class="line">    license &#x3D; &quot;MIT&quot;,</span><br><span class="line">    packages&#x3D;find_packages()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>name 是项目名称，version 是发布版本，description 和 long_description 分别是项目介绍，项目长描述。platforms 是此模块的支持平台列表。find_packages() 是一个能在你源目录下找到所有模块的特殊函数，packaging docs。</p><h4 id="setup-py-用例"><a href="#setup-py-用例" class="headerlink" title="setup.py 用例"></a>setup.py 用例</h4><p>要创建一个源文件发布版本，执行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 setup.py sdist</span><br></pre></td></tr></table></figure><p>执行完毕会返回类似下面的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">running sdist</span><br><span class="line">running egg_info</span><br><span class="line">creating factorial.egg-info</span><br><span class="line">writing factorial.egg-info&#x2F;PKG-INFO</span><br><span class="line">writing top-level names to factorial.egg-info&#x2F;top_level.txt</span><br><span class="line">writing dependency_links to factorial.egg-info&#x2F;dependency_links.txt</span><br><span class="line">writing manifest file &#39;factorial.egg-info&#x2F;SOURCES.txt&#39;</span><br><span class="line">reading manifest file &#39;factorial.egg-info&#x2F;SOURCES.txt&#39;</span><br><span class="line">reading manifest template &#39;MANIFEST.in&#39;</span><br><span class="line">writing manifest file &#39;factorial.egg-info&#x2F;SOURCES.txt&#39;</span><br><span class="line">running check</span><br><span class="line">creating factorial-0.1</span><br><span class="line">creating factorial-0.1&#x2F;factorial.egg-info</span><br><span class="line">creating factorial-0.1&#x2F;myfact</span><br><span class="line">making hard links in factorial-0.1...</span><br><span class="line">hard linking MANIFEST.in -&gt; factorial-0.1</span><br><span class="line">hard linking README.rst -&gt; factorial-0.1</span><br><span class="line">hard linking setup.py -&gt; factorial-0.1</span><br><span class="line">hard linking factorial.egg-info&#x2F;PKG-INFO -&gt; factorial-0.1&#x2F;factorial.egg-info</span><br><span class="line">hard linking factorial.egg-info&#x2F;SOURCES.txt -&gt; factorial-0.1&#x2F;factorial.egg-info</span><br><span class="line">hard linking factorial.egg-info&#x2F;dependency_links.txt -&gt; factorial-0.1&#x2F;factorial.egg-info</span><br><span class="line">hard linking factorial.egg-info&#x2F;top_level.txt -&gt; factorial-0.1&#x2F;factorial.egg-info</span><br><span class="line">hard linking myfact&#x2F;__init__.py -&gt; factorial-0.1&#x2F;myfact</span><br><span class="line">hard linking myfact&#x2F;fact.py -&gt; factorial-0.1&#x2F;myfact</span><br><span class="line">Writing factorial-0.1&#x2F;setup.cfg</span><br><span class="line">creating dist</span><br><span class="line">Creating tar archive</span><br><span class="line">removing &#39;factorial-0.1&#39; (and everything under it)</span><br></pre></td></tr></table></figure><p>我们能在 dist 目录下看到一个 tar 压缩包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls dist&#x2F;</span><br><span class="line">factorial-0.1.tar.gz</span><br></pre></td></tr></table></figure><p>记住尝试安装代码时使用 virtualenv。</p><p>执行下面的命令从源代码安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>学习更多可前往 packaging.python.org。</p><h3 id="Python-Package-Index-PyPI"><a href="#Python-Package-Index-PyPI" class="headerlink" title="Python Package Index (PyPI)"></a>Python Package Index (PyPI)</h3><p>你还记得我们经常使用的 pip 命令吗？有没有想过这些包是从哪里来的？答案是 PyPI。这是 Python 的软件包管理系统。</p><p>为了实验，我们会使用 PyPI 的测试服务器 <a href="https://testpypi.python.org/pypi%E3%80%82">https://testpypi.python.org/pypi。</a></p><h4 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h4><p>首先在这个链接注册账号。你会收到带有链接的邮件，点击这个链接确认你的注册。</p><p>创建 ~/.pypirc 文件，存放你的账号详细信息，其内容格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers &#x3D; pypi</span><br><span class="line">    testpypi</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">repository: https:&#x2F;&#x2F;upload.pypi.org&#x2F;legacy&#x2F;</span><br><span class="line">username: &lt;username&gt;</span><br><span class="line">password: &lt;password&gt;</span><br><span class="line"></span><br><span class="line">[testpypi]</span><br><span class="line">repository:https:&#x2F;&#x2F;test.pypi.org&#x2F;legacy&#x2F;</span><br><span class="line">username: &lt;username&gt;</span><br><span class="line">password: &lt;password&gt;</span><br></pre></td></tr></table></figure><p>替换 <username> 和 <password> 为您新创建的帐户的详细信息。在这里，由于我们是到 testpypi的网页上去注册账号，即将相应的服务上传到 testpypi，所以在这里，你只需修改[testpypi]的用户名和密码</p><p>记得在 setup.py 中更改项目的名称为其它的名字来测试下面的指令，在接下来的命令中我将项目名称修改为factorial2，为了不重复，需要自行修改至其它名称。</p><h4 id="上传到-TestPyPI-服务"><a href="#上传到-TestPyPI-服务" class="headerlink" title="上传到 TestPyPI 服务"></a>上传到 TestPyPI 服务</h4><p>下一步我们会将我们的项目到 TestPyPI 服务。这通过 twine 命令完成。</p><p>我们也会使用 -r 把它指向测试服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install twine</span><br><span class="line">$ twine upload dist&#x2F;* -r testpypi</span><br></pre></td></tr></table></figure><p>执行完毕会返回类似下面的信息,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uploading distributions to https:&#x2F;&#x2F;test.pypi.org&#x2F;legacy&#x2F;</span><br><span class="line">Uploading factorial2-0.1.tar.gz</span><br></pre></td></tr></table></figure><p>在这里你也可以使用下面的命令上传到 PyPI 服务上，但这里需要注意，在 <del>/.pypirc 里面，你需要到 <a href="https://pypi.python.org页面,按照上面的步骤去注册一个账号,然后到/">https://pypi.python.org页面，按照上面的步骤去注册一个账号，然后到</a></del>/.pypirc 的 [pypi] 下填写相应的用户名和密码。testpypi 和 pypi 的账号密码并不通用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ twine upload dist&#x2F;* -r pypi</span><br></pre></td></tr></table></figure><p>现在如果你浏览这个页面，你会发现你的项目已经准备好被别人使用了。<br><img src="https://dn-anything-about-doc.qbox.me/document-uid377240labid2053timestamp1499405944902.png/wm"></p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 测试</title>
      <link href="2017/07/16/Python%20%E6%B5%8B%E8%AF%95/"/>
      <url>2017/07/16/Python%20%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>Python 测试</p><h3 id="应该测试什么？"><a href="#应该测试什么？" class="headerlink" title="应该测试什么？"></a>应该测试什么？</h3><p>如果可能的话，代码库中的所有代码都要测试。但这取决于开发者，如果写一个健壮性测试是不切实际的，你可以跳过它。就像 Nick Coghlan（Python 核心开发成员） 在访谈里面说的：有一个坚实可靠的测试套件，你可以做出大的改动，并确信外部可见行为保持不变。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>这里引用维基百科的介绍：</p><blockquote><p>在计算机编程中，单元测试（英语：Unit Testing）又称为模块测试, 是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。</p></blockquote><h4 id="单元测试模块"><a href="#单元测试模块" class="headerlink" title="单元测试模块"></a>单元测试模块</h4><p>在 Python 里我们有 unittest 这个模块来帮助我们进行单元测试。</p><h4 id="阶乘计算程序"><a href="#阶乘计算程序" class="headerlink" title="阶乘计算程序"></a>阶乘计算程序</h4><p>在这个例子中我们将写一个计算阶乘的程序 factorial.py。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def fact(n):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    阶乘函数</span><br><span class="line"></span><br><span class="line">    :arg n: 数字</span><br><span class="line">    :returns: n 的阶乘</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if n &#x3D;&#x3D; 0:</span><br><span class="line">        return 1</span><br><span class="line">    return n * fact(n -1)</span><br><span class="line"></span><br><span class="line">def div(n):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    只是做除法</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    res &#x3D; 10 &#x2F; n</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(n):</span><br><span class="line">    res &#x3D; fact(n)</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    if len(sys.argv) &gt; 1:</span><br><span class="line">        main(int(sys.argv[1]))</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 factorial.py 5</span><br></pre></td></tr></table></figure><h4 id="测试哪个函数？"><a href="#测试哪个函数？" class="headerlink" title="测试哪个函数？"></a>测试哪个函数？</h4><p>正如你所看到的， fact(n) 这个函数执行所有的计算，所以我们至少应该测试这个函数。</p><h4 id="第一个测试用例"><a href="#第一个测试用例" class="headerlink" title="第一个测试用例"></a>第一个测试用例</h4><p>编辑 factorial_test.py 文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from factorial import fact</span><br><span class="line"></span><br><span class="line">class TestFactorial(unittest.TestCase):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    我们的基本测试类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def test_fact(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        实际测试</span><br><span class="line">        任何以 &#96;test_&#96; 开头的方法都被视作测试用例</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        res &#x3D; fact(5)</span><br><span class="line">        self.assertEqual(res, 120)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    unittest.main()</span><br><span class="line">运行测试：</span><br><span class="line"></span><br><span class="line">$ python3 factorial_test.py</span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>说明</p><p>我们首先导入了 unittest 模块，然后测试我们需要测试的函数。</p><p>测试用例是通过子类化 unittest.TestCase 创建的。</p><p>现在我们打开测试文件并且把 120 更改为 121，然后看看会发生什么 :）</p><h4 id="各类-assert-语句"><a href="#各类-assert-语句" class="headerlink" title="各类 assert 语句"></a>各类 assert 语句</h4><table><thead><tr><th>Method</th><th>Checks that</th><th>New in</th></tr></thead><tbody><tr><td>assertEqual(a, b)</td><td>a == b</td><td></td></tr><tr><td>assertNotEqual(a, b)</td><td>a != b</td><td></td></tr><tr><td>assertTrue(x)</td><td>bool(x) is True</td><td></td></tr><tr><td>assertFalse(x)</td><td>bool(x) is False</td><td></td></tr><tr><td>assertIs(a, b)</td><td>a is b</td><td>2.7</td></tr><tr><td>assertIsNot(a, b)</td><td>a is not b</td><td>2.7</td></tr><tr><td>assertIsNone(x)</td><td>x is None</td><td>2.7</td></tr><tr><td>assertIsNotNone(x)</td><td>x is not None</td><td>2.7</td></tr><tr><td>assertIn(a, b)</td><td>a in b</td><td>2.7</td></tr><tr><td>assertNotIn(a, b)</td><td>a not in b</td><td>2.7</td></tr><tr><td>assertIsInstance(a, b)</td><td>isinstance(a, b)</td><td>2.7</td></tr><tr><td>assertNotIsInstance(a, b)</td><td>not isinstance(a, b)</td><td>2.7</td></tr></tbody></table><h4 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h4><p>如果我们在 factorial.py 中调用 div(0)，我们能看到异常被抛出。</p><p>我们也能测试这些异常，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.assertRaises(ZeroDivisionError, div, 0)</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from factorial import fact, div</span><br><span class="line"></span><br><span class="line">class TestFactorial(unittest.TestCase):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    我们的基本测试类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def test_fact(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        实际测试</span><br><span class="line">        任何以 &#96;test_&#96; 开头的方法都被视作测试用例</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        res &#x3D; fact(5)</span><br><span class="line">        self.assertEqual(res, 120)</span><br><span class="line"></span><br><span class="line">    def test_error(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        测试由运行时错误引发的异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.assertRaises(ZeroDivisionError, div, 0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="mounttab-py"><a href="#mounttab-py" class="headerlink" title="mounttab.py"></a>mounttab.py</h4><p>mounttab.py 中只有一个 mount_details() 函数，函数分析并打印挂载详细信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mount_details():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    打印挂载详细信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if os.path.exists(&#39;&#x2F;proc&#x2F;mounts&#39;):</span><br><span class="line">        fd &#x3D; open(&#39;&#x2F;proc&#x2F;mounts&#39;)</span><br><span class="line">        for line in fd:</span><br><span class="line">            line &#x3D; line.strip()</span><br><span class="line">            words &#x3D; line.split()</span><br><span class="line">            print(&#39;&#123;&#125; on &#123;&#125; type &#123;&#125;&#39;.format(words[0],words[1],words[2]), end&#x3D;&#39; &#39;)</span><br><span class="line">            if len(words) &gt; 5:</span><br><span class="line">                print(&#39;(&#123;&#125;)&#39;.format(&#39; &#39;.join(words[3:-2])))</span><br><span class="line">            else:</span><br><span class="line">                print()</span><br><span class="line">        fd.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    mount_details()</span><br></pre></td></tr></table></figure><p>重构 mounttab.py</p><p>现在我们在 mounttab2.py 中重构了上面的代码并且有一个我们能容易的测试的新函数 parse_mounts()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">def parse_mounts():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    分析 &#x2F;proc&#x2F;mounts 并 返回元祖的列表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    result &#x3D; []</span><br><span class="line">    if os.path.exists(&#39;&#x2F;proc&#x2F;mounts&#39;):</span><br><span class="line">        fd &#x3D; open(&#39;&#x2F;proc&#x2F;mounts&#39;)</span><br><span class="line">        for line in fd:</span><br><span class="line">            line &#x3D; line.strip()</span><br><span class="line">            words &#x3D; line.split()</span><br><span class="line">            if len(words) &gt; 5:</span><br><span class="line">                res &#x3D; (words[0],words[1],words[2],&#39;(&#123;&#125;)&#39;.format(&#39; &#39;.join(words[3:-2])))</span><br><span class="line">            else:</span><br><span class="line">               res &#x3D; (words[0],words[1],words[2])</span><br><span class="line">            result.append(res)</span><br><span class="line">        fd.close()</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">def mount_details():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    打印挂载详细信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    result &#x3D; parse_mounts()</span><br><span class="line">    for line in result:</span><br><span class="line">        if len(line) &#x3D;&#x3D; 4:</span><br><span class="line">            print(&#39;&#123;&#125; on &#123;&#125; type &#123;&#125; &#123;&#125;&#39;.format(*line))</span><br><span class="line">        else:</span><br><span class="line">            print(&#39;&#123;&#125; on &#123;&#125; type &#123;&#125;&#39;.format(*line))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    mount_details()</span><br></pre></td></tr></table></figure><p>同样我们测试代码，编写 mounttest.py 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import unittest</span><br><span class="line">from mounttab2 import parse_mounts</span><br><span class="line"></span><br><span class="line">class TestMount(unittest.TestCase):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    我们的基本测试类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def test_parsemount(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        实际测试</span><br><span class="line">        任何以 &#96;test_&#96; 开头的方法都被视作测试用例</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        result &#x3D; parse_mounts()</span><br><span class="line">        self.assertIsInstance(result, list)</span><br><span class="line">        self.assertIsInstance(result[0], tuple)</span><br><span class="line"></span><br><span class="line">    def test_rootext4(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        测试找出根文件系统</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        result &#x3D; parse_mounts()</span><br><span class="line">        for line in result:</span><br><span class="line">            if line[1] &#x3D;&#x3D; &#39;&#x2F;&#39; and line[2] !&#x3D; &#39;rootfs&#39;:</span><br><span class="line">                self.assertEqual(line[2], &#39;ext4&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>运行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python3 mounttest.py</span><br><span class="line">..</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.001s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h3><p>测试覆盖率是找到代码库未经测试的部分的简单方法。它并不会告诉你的测试好不好。</p><p>在 Python 中我们已经有了一个不错的覆盖率工具来帮助我们。你可以在实验楼环境中安装它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install coverage</span><br></pre></td></tr></table></figure><h4 id="覆盖率示例"><a href="#覆盖率示例" class="headerlink" title="覆盖率示例"></a>覆盖率示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ coverage3 run mounttest.py</span><br><span class="line">..</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.013s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">$ coverage3 report -m</span><br><span class="line">Name           Stmts   Miss  Cover   Missing</span><br><span class="line">--------------------------------------------</span><br><span class="line">mounttab2.py      22      7    68%   16, 25-30, 34</span><br><span class="line">mounttest.py      14      0   100%</span><br><span class="line">--------------------------------------------</span><br><span class="line">TOTAL             36      7    81%</span><br></pre></td></tr></table></figure><p>我们还可以使用下面的命令以 HTML 文件的形式输出覆盖率结果，然后在浏览器中查看它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ coverage3 html</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2052timestamp1471426534423.png/wm"><br><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2052timestamp1471426541267.png/wm"></p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Virtualenv</title>
      <link href="2017/07/16/Python%20Virtualenv/"/>
      <url>2017/07/16/Python%20Virtualenv/</url>
      
        <content type="html"><![CDATA[<p>Python Virtualenv</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先安装 pip3。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>用如下命令安装 virtualenv：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install virtualenv</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2051timestamp1471425612347.png/wm"></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>我们会创建一个叫做 virtual 的目录，在里面我们会有两个不同的虚拟环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir virtual</span><br></pre></td></tr></table></figure><p>下面的命令创建一个叫做 virt1 的环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd virtual</span><br><span class="line">$ virtualenv virt1</span><br></pre></td></tr></table></figure><p>现在我们激活这个 virt1 环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ source virt1&#x2F;bin&#x2F;activate</span><br><span class="line">(virt1)shiyanlou：~&#x2F;$</span><br></pre></td></tr></table></figure><p>提示符的第一部分是当前虚拟环境的名字，当你有多个环境的时候它会帮助你识别你在哪个环境里面。</p><p>现在我们将安装 redis 这个 Python 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(virt1)$ sudo pip3 install redis</span><br></pre></td></tr></table></figure><p>此处输入图片的描述</p><p>使用 deactivate 命令关闭虚拟环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(virt1)$ deactivate</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>现在我们将创建另一个虚拟环境 virt2，我们会在里面同样安装 redis 模块，但版本是 2.8 的旧版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv virt2</span><br><span class="line">$ source virt2&#x2F;bin&#x2F;activate</span><br><span class="line">(virt2)$ sudo pip3 install redis&#x3D;&#x3D;2.8</span><br></pre></td></tr></table></figure><p>这样可以为你的所有开发需求拥有许多不同的环境。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>永远记住当开发新应用时创建虚拟环境，这会帮助你的系统模块保持干净。</p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 迭代器、生成器、装饰器</title>
      <link href="2017/07/16/Python%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>2017/07/16/Python%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Python 迭代器、生成器、装饰器</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>Python 迭代器（Iterators）对象在遵守迭代器协议时需要支持如下两种方法。<br><strong>iter</strong>()，返回迭代器对象自身。这用在 for 和 in 语句中。<br><strong>next</strong>()，返回迭代器的下一个值。如果没有下一个值可以返回，那么应该抛出 StopIteration 异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Counter(object):</span><br><span class="line">    def __init__(self, low, high):</span><br><span class="line">        self.current &#x3D; low</span><br><span class="line">        self.high &#x3D; high</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        #返回下一个值直到当前值大于 high</span><br><span class="line">        if self.current &gt; self.high:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        else:</span><br><span class="line">            self.current +&#x3D; 1</span><br><span class="line">            return self.current - 1</span><br></pre></td></tr></table></figure><p>现在我们能把这个迭代器用在我们的代码里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c &#x3D; Counter(5,10)</span><br><span class="line">&gt;&gt;&gt; for i in c:</span><br><span class="line">...   print(i, end&#x3D;&#39; &#39;)</span><br><span class="line">...</span><br><span class="line">5 6 7 8 9 10</span><br></pre></td></tr></table></figure><p>请记住迭代器只能被使用一次。这意味着迭代器一旦抛出 StopIteration，它会持续抛出相同的异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c &#x3D; Counter(5,6)</span><br><span class="line">&gt;&gt;&gt; next(c)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; next(c)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; next(c)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">File &quot;&lt;stdin&gt;&quot;, line 11, in next</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt; next(c)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">File &quot;&lt;stdin&gt;&quot;, line 11, in next</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>我们已经看过在 for 循环中使用迭代器的例子了，下面的例子试图展示迭代器被隐藏的细节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; iterator &#x3D; iter(c)</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...     try:</span><br><span class="line">...         x &#x3D; iterator.__next__()</span><br><span class="line">...         print(x, end&#x3D;&#39; &#39;)</span><br><span class="line">...     except StopIteration as e:</span><br><span class="line">...         break</span><br><span class="line">...</span><br><span class="line">5 6 7 8 9 10</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>在这一节我们学习有关 Python 生成器（Generators）的知识。生成器是更简单的创建迭代器的方法，这通过在函数中使用 yield 关键字完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def my_generator():</span><br><span class="line">...     print(&quot;Inside my generator&quot;)</span><br><span class="line">...     yield &#39;a&#39;</span><br><span class="line">...     yield &#39;b&#39;</span><br><span class="line">...     yield &#39;c&#39;</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; my_generator()</span><br><span class="line">&lt;generator object my_generator at 0x7fbcfa0a6aa0&gt;</span><br></pre></td></tr></table></figure><p>在上面的例子中我们使用 yield 语句创建了一个简单的生成器。我们能在 for 循环中使用它，就像我们使用任何其它迭代器一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for char in my_generator():</span><br><span class="line">...     print(char)</span><br><span class="line">...</span><br><span class="line">Inside my generator</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>在下一个例子里，我们会使用一个生成器函数完成与 Counter 类相同的功能，并且把它用在 for 循环中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def counter_generator(low, high):</span><br><span class="line">...     while low &lt;&#x3D; high:</span><br><span class="line">...        yield low</span><br><span class="line">...        low +&#x3D; 1</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; for i in counter_generator(5,10):</span><br><span class="line">...     print(i, end&#x3D;&#39; &#39;)</span><br><span class="line">... </span><br><span class="line">5 6 7 8 9 10</span><br></pre></td></tr></table></figure><p>在 While 循环中，每当执行到 yield 语句时，返回变量 low 的值并且生成器状态转为挂起。在下一次调用生成器时，生成器从之前冻结的地方恢复执行然后变量 low 的值增一。生成器继续 while 循环并且再次来到 yield 语句…</p><p>当你调用生成器函数时它返回一个生成器对象。如果你把这个对象传入 dir() 函数，你会在返回的结果中找到 <strong>iter</strong> 和 <strong>next</strong> 两个方法名。</p><p>我们通常使用生成器进行惰性求值。这样使用生成器是处理大数据的好方法。如果你不想在内存中加载所有数据，你可以使用生成器，一次只传递给你一部分数据。</p><p>os.path.walk() 函数是最典型的这样的例子，它使用一个回调函数和当前的 os.walk 生成器。使用生成器实现节约内存。</p><p>我们可以使用生成器产生无限多的值。以下是一个这样的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def infinite_generator(start&#x3D;0):</span><br><span class="line">...     while True:</span><br><span class="line">...         yield start</span><br><span class="line">...         start +&#x3D; 1</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; for num in infinite_generator(4):</span><br><span class="line">...     print(num, end&#x3D;&#39; &#39;)</span><br><span class="line">...     if num &gt; 20:</span><br><span class="line">...         break</span><br><span class="line">...</span><br><span class="line">4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</span><br></pre></td></tr></table></figure><p>如果我们回到 my_generator() 这个例子，我们会发现生成器的一个特点：它们是不可重复使用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; my_generator()</span><br><span class="line">&gt;&gt;&gt; for c in g:</span><br><span class="line">...     print(c)</span><br><span class="line">...</span><br><span class="line">Inside my generator</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">&gt;&gt;&gt; for c in g:</span><br><span class="line">...     print(c)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一个创建可重复使用生成器的方式是不保存任何状态的基于对象的生成器。任何一个生成数据的含有 <strong>iter</strong> 方法的类都可以用作对象生成器。在下面的例子中我们重新创建了 counter 生成器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Counter(object):</span><br><span class="line">...     def __init__(self, low, high):</span><br><span class="line">...         self.low &#x3D; low</span><br><span class="line">...         self.high &#x3D; high</span><br><span class="line">...     def __iter__(self):</span><br><span class="line">...          counter &#x3D; self.low</span><br><span class="line">...          while self.high &gt;&#x3D; counter:</span><br><span class="line">...              yield counter</span><br><span class="line">...              counter +&#x3D; 1</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; gobj &#x3D; Counter(5, 10)</span><br><span class="line">&gt;&gt;&gt; for num in gobj:</span><br><span class="line">...     print(num, end&#x3D;&#39; &#39;)</span><br><span class="line">...</span><br><span class="line">5 6 7 8 9 10</span><br><span class="line">&gt;&gt;&gt; for num in gobj:</span><br><span class="line">...     print(num, end&#x3D;&#39; &#39;)</span><br><span class="line">...</span><br><span class="line">5 6 7 8 9 10</span><br></pre></td></tr></table></figure><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>在这一节我们学习生成器表达式（Generator expressions），生成器表达式是列表推导式和生成器的一个高性能，内存使用效率高的推广。</p><p>举个例子，我们尝试对 1 到 9 的所有数字进行平方求和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sum([x*x for x in range(1,10)])</span><br></pre></td></tr></table></figure><p>这个例子实际上首先在内存中创建了一个平方数值的列表，然后遍历这个列表，最终求和后释放内存。你能理解一个大列表的内存占用情况是怎样的。</p><p>我们可以通过使用生成器表达式来节省内存使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sum(x*x for x in range(1,10))</span><br></pre></td></tr></table></figure><p>生成器表达式的语法要求其总是直接在在一对括号内，并且不能在两边有逗号。这基本上意味着下面这些例子都是有效的生成器表达式用法示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sum(x*x for x in range(1,10))</span><br><span class="line">285</span><br><span class="line">&gt;&gt;&gt; g &#x3D; (x*x for x in range(1,10))</span><br><span class="line">&gt;&gt;&gt; g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x7fc559516b90&gt;</span><br></pre></td></tr></table></figure><p>我们可以把生成器和生成器表达式联系起来，在下面的例子中我们会读取文件 ‘/var/log/cron’ 并且查看任意指定任务（例中我们搜索 ‘anacron’ ）是否成功运行。</p><p>我们可以用 shell 命令 tail -f /etc/crontab |grep anacron 完成同样的事（按 Ctrl + C 终止命令执行）。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2050timestamp1471424109703.png/wm"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; jobtext &#x3D; &#39;anacron&#39;</span><br><span class="line">&gt;&gt;&gt; all &#x3D; (line for line in open(&#39;&#x2F;etc&#x2F;crontab&#39;, &#39;r&#39;) )</span><br><span class="line">&gt;&gt;&gt; job &#x3D; ( line for line in all if line.find(jobtext) !&#x3D; -1)</span><br><span class="line">&gt;&gt;&gt; text &#x3D; next(job)</span><br><span class="line">&gt;&gt;&gt; text</span><br><span class="line">&#39;25 6\t* * *\troot\ttest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.daily )\n&#39;</span><br><span class="line">&gt;&gt;&gt; text &#x3D; next(job)</span><br><span class="line">&gt;&gt;&gt; text </span><br><span class="line">&#39;47 6\t* * 7\troot\ttest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.weekly )\n&#39;</span><br><span class="line">&gt;&gt;&gt; text &#x3D; next(job)</span><br><span class="line">&gt;&gt;&gt; text</span><br><span class="line">&#39;52 6\t1 * *\troot\ttest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.monthly )\n&#39;</span><br></pre></td></tr></table></figure><p>你可以写一个 for 循环遍历所有行。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包（Closures）是由另外一个函数返回的函数。我们使用闭包去除重复代码。在下面的例子中我们创建了一个简单的闭包来对数字求和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def add_number(num):</span><br><span class="line">...     def adder(number):</span><br><span class="line">...         #adder 是一个闭包</span><br><span class="line">...         return num + number</span><br><span class="line">...     return adder</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; a_10 &#x3D; add_number(10)</span><br><span class="line">&gt;&gt;&gt; a_10(21)</span><br><span class="line">31</span><br><span class="line">&gt;&gt;&gt; a_10(34)</span><br><span class="line">44</span><br><span class="line">&gt;&gt;&gt; a_5 &#x3D; add_number(5)</span><br><span class="line">&gt;&gt;&gt; a_5(3)</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>adder 是一个闭包，把一个给定的数字与预定义的一个数字相加。</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器（Decorators）用来给一些对象动态的添加一些新的行为，我们使用过的闭包也是这样的。</p><p>我们会创建一个简单的示例，将在函数执行前后打印一些语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def my_decorator(func):</span><br><span class="line">...     def wrapper(*args, **kwargs):</span><br><span class="line">...         print(&quot;Before call&quot;)</span><br><span class="line">...         result &#x3D; func(*args, **kwargs)</span><br><span class="line">...         print(&quot;After call&quot;)</span><br><span class="line">...         return result</span><br><span class="line">...     return wrapper</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; @my_decorator</span><br><span class="line">... def add(a, b):</span><br><span class="line">...     #我们的求和函数</span><br><span class="line">...     return a + b</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; add(1, 3)</span><br><span class="line">Before call</span><br><span class="line">After call</span><br><span class="line">4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python PEP8 代码风格指南</title>
      <link href="2017/07/15/Python%20PEP8%20%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
      <url>2017/07/15/Python%20PEP8%20%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>Python PEP8 代码风格指南</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这份文档给出的代码约定适用于主要的 Python 发行版所有标准库中的 Python 代码。请参阅相似的 PEP 信息，其用于描述实现 Python 的 C 代码规范[1]。</p><p>这份文档和 PEP 257(文档字符串约定) 改编自 Guido 的 Python 风格指南原文，从 Barry 的风格指南里添加了一些东西[2]。</p><p>随着时间的推移，这份额外约定的风格指南已经被认可了，过去的约定由于语言自身的发展被淘汰了。</p><p>许多项目有它们自己的编码风格指南。如果有冲突，优先考虑项目规定的编码指南。</p><h3 id="愚蠢的一致性就像没脑子的妖怪"><a href="#愚蠢的一致性就像没脑子的妖怪" class="headerlink" title="愚蠢的一致性就像没脑子的妖怪"></a>愚蠢的一致性就像没脑子的妖怪</h3><p>Guido 的一个主要见解是读代码多过写代码。这里提供指南的意图是强调代码可读性的重要性，并且使大多数 Python 代码保持一致性。如 PEP 20 所述，“Readability counts”。</p><p>风格指南是关于一致性的。风格一致对于本指南来说是重要的，对一个项目来说是更重要的，对于一个模块或者方法来说是最重要的。</p><p>但是最最重要的是：知道什么时候应该破例–有时候这份风格指南就是不适用。有疑问时，用你最好的判断力，对比其它的例子来确定这是不是最好的情况，并且不耻下问。</p><p>特别说明：不要为了遵守这份风格指南而破坏代码的向后兼容性。</p><p>这里有一些好的理由去忽略某个风格指南：</p><ul><li>当应用风格指南的时候使代码更难读了，对于严格依循风格指南的约定去读代码的人也是不应该的。</li><li>为了保持和风格指南的一致性同时也打破了现有代码的一致性（可能是历史原因）–虽然这也是一个整理混乱代码的机会（现实中的 XP 风格）。</li><li>因为问题代码的历史比较久远，修改代码就没有必要性了。</li><li>当代码需要与旧版本的 Python 保持兼容，而旧版 Python 又不支持风格指南中提到的特性的时候。</li></ul><h3 id="代码排版"><a href="#代码排版" class="headerlink" title="代码排版"></a>代码排版</h3><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>每层缩进使用4个空格。</p><p>续行要么与圆括号、中括号、花括号这样的被包裹元素保持垂直对齐，要么放在 Python 的隐线（注：应该是相对于def的内部块）内部，或者使用悬挂缩进。使用悬挂缩进的注意事项：第一行不能有参数，用进一步的缩进来把其他行区分开。</p><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Aligned with opening delimiter.</span><br><span class="line">foo &#x3D; long_function_name(var_one, var_two,</span><br><span class="line">                         var_three, var_four)</span><br><span class="line"></span><br><span class="line"># More indentation included to distinguish this from the rest.</span><br><span class="line">def long_function_name(</span><br><span class="line">        var_one, var_two, var_three,</span><br><span class="line">        var_four):</span><br><span class="line">    print(var_one)</span><br><span class="line"></span><br><span class="line"># Hanging indents should add a level.</span><br><span class="line">foo &#x3D; long_function_name(</span><br><span class="line">    var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Arguments on first line forbidden when not using vertical alignment.</span><br><span class="line">foo &#x3D; long_function_name(var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br><span class="line"></span><br><span class="line"># Further indentation required as indentation is not distinguishable.</span><br><span class="line">def long_function_name(</span><br><span class="line">    var_one, var_two, var_three,</span><br><span class="line">    var_four):</span><br><span class="line">    print(var_one)</span><br></pre></td></tr></table></figure><p>4空格规则是可选的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Hanging indents *may* be indented to other than 4 spaces.</span><br><span class="line">foo &#x3D; long_function_name(</span><br><span class="line">  var_one, var_two,</span><br><span class="line">  var_three, var_four)</span><br></pre></td></tr></table></figure><p>当 if 语句的条件部分足够长，需要将它写入到多个行，值得注意的是两个连在一起的关键字（i.e. if），添加一个空格，给后续的多行条件添加一个左括号形成自然地4空格缩进。如果和嵌套在 if 语句内的缩进代码块产生了视觉冲突，也应该被自然缩进4个空格。这份增强建议书对于怎样（或是否）把条件行和 if 语句的缩进块在视觉上区分开来是没有明确规定的。可接受的情况包括，但不限于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># No extra indentation.</span><br><span class="line">if (this_is_one_thing and</span><br><span class="line">    that_is_another_thing):</span><br><span class="line">    do_something()</span><br><span class="line"></span><br><span class="line"># Add a comment, which will provide some distinction in editors</span><br><span class="line"># supporting syntax highlighting.</span><br><span class="line">if (this_is_one_thing and</span><br><span class="line">    that_is_another_thing):</span><br><span class="line">    # Since both conditions are true, we can frobnicate.</span><br><span class="line">    do_something()</span><br><span class="line"></span><br><span class="line"># Add some extra indentation on the conditional continuation line.</span><br><span class="line">if (this_is_one_thing</span><br><span class="line">        and that_is_another_thing):</span><br><span class="line">    do_something()</span><br></pre></td></tr></table></figure><p>在多行结构中的右圆括号、右中括号、右大括号应该放在最后一行的第一个非空白字符的正下方，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">my_list &#x3D; [</span><br><span class="line">    1, 2, 3,</span><br><span class="line">    4, 5, 6,</span><br><span class="line">    ]</span><br><span class="line">result &#x3D; some_function_that_takes_arguments(</span><br><span class="line">    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;,</span><br><span class="line">    &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,</span><br><span class="line">    )</span><br><span class="line">或者放在多行结构的起始行的第一个字符正下方，如下：</span><br><span class="line"></span><br><span class="line">my_list &#x3D; [</span><br><span class="line">    1, 2, 3,</span><br><span class="line">    4, 5, 6,</span><br><span class="line">]</span><br><span class="line">result &#x3D; some_function_that_takes_arguments(</span><br><span class="line">    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;,</span><br><span class="line">    &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="制表符还是空格？"><a href="#制表符还是空格？" class="headerlink" title="制表符还是空格？"></a>制表符还是空格？</h4><p>空格是首选的缩进方法。</p><p>制表符（Tab）应该被用在那些以前就使用了制表符缩进的地方。</p><p>Python 3 不允许混合使用制表符和空格来缩进代码。</p><p>混合使用制表符和空格缩进的 Python 2 代码应该改为只使用空格。</p><p>当使用-t选项来调用 Python 2 的命令行解释器的时候，会对混合使用制表符和空格的代码发出警告。当使用-tt选项的时候，这些警告会变成错误。这些选项是强烈推荐的！</p><h4 id="每行最大长度"><a href="#每行最大长度" class="headerlink" title="每行最大长度"></a>每行最大长度</h4><p>限制每行的最大长度为79个字符。</p><p>对于那些约束很少的文本结构（文档字符串或注释）的长块，应该限制每行长度为72个字符。</p><p>限制编辑窗口的宽度使并排打开两个窗口成为可能，使用通过代码审查工具时，也能很好的通过相邻列展现不同代码版本。</p><p>一些工具的默认换行设置打乱了代码的可视结构，使其更难理解。限制编辑器窗口宽为80来避免自动换行，即使有些编辑工具在换行的时候会在最后一列放一个标识符。一些基于 Web 的工具可能根本就不提供动态换行。</p><p>一些团队更倾向于长的代码行。对于达成了一致意见来统一代码的团队而言，把行提升到80~100的长度是可接受的（实际最大长度为99个字符），注释和文档字符串的长度还是建议在72个字符内。</p><p>Python 标准库是非常专业的，限制最大代码长度为79个字符（注释和文档字符串最大长度为72个字符）。</p><p>首选的换行方式是在括号（小中大）内隐式换行（非续行符\）。长行应该在括号表达式的包裹下换行。这比反斜杠作为续行符更好。</p><p>反斜杠有时仍然适用。例如，多个很长的with语句不能使用隐式续行，因此反斜杠是可接受的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(&#39;&#x2F;path&#x2F;to&#x2F;some&#x2F;file&#x2F;you&#x2F;want&#x2F;to&#x2F;read&#39;) as file_1, \</span><br><span class="line">     open(&#39;&#x2F;path&#x2F;to&#x2F;some&#x2F;file&#x2F;being&#x2F;written&#39;, &#39;w&#39;) as file_2:</span><br><span class="line">    file_2.write(file_1.read())</span><br></pre></td></tr></table></figure><p>（见前面关于多行if语句的讨论来进一步思考这种多行with语句该如何缩进）</p><p>另一种使用反斜杠续行的案例是assert语句。</p><p>确保续行的缩进是恰到好处的。遇到二元操作符，首选的断行位置是操作符的后面而不是前面。这有一些例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Rectangle(Blob):</span><br><span class="line"></span><br><span class="line">    def __init__(self, width, height,</span><br><span class="line">                 color&#x3D;&#39;black&#39;, emphasis&#x3D;None, highlight&#x3D;0):</span><br><span class="line">        if (width &#x3D;&#x3D; 0 and height &#x3D;&#x3D; 0 and</span><br><span class="line">                color &#x3D;&#x3D; &#39;red&#39; and emphasis &#x3D;&#x3D; &#39;strong&#39; or</span><br><span class="line">                highlight &gt; 100):</span><br><span class="line">            raise ValueError(&quot;sorry, you lose&quot;)</span><br><span class="line">        if width &#x3D;&#x3D; 0 and height &#x3D;&#x3D; 0 and (color &#x3D;&#x3D; &#39;red&#39; or</span><br><span class="line">                                           emphasis is None):</span><br><span class="line">            raise ValueError(&quot;I don&#39;t think so -- values are %s, %s&quot; %</span><br><span class="line">                             (width, height))</span><br><span class="line">        Blob.__init__(self, width, height,</span><br><span class="line">                      color, emphasis, highlight)</span><br></pre></td></tr></table></figure><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>顶级函数和类定义上下使用两个空行分隔。</p><p>类内的方法定义使用一个空行分隔。</p><p>可以使用额外的空行（有节制的）来分隔相关联的函数组。在一系列相关联的单行代码中空行可以省略（e.g. 一组虚拟的实现）。</p><p>在函数中使用空白行（有节制的）来表明逻辑部分。</p><p>Python 接受使用换页符（i.e. Ctrl+L）作为空格；许多工具都把Ctrl+L作为分页符，因此你可以用它们把你的文件中相似的章节分页。注意，一些编辑器和基于 Web 的代码查看工具可能不把Ctrl+L看做分页符，而是在这个位置放一个其它的符号。</p><h4 id="源文件编码"><a href="#源文件编码" class="headerlink" title="源文件编码"></a>源文件编码</h4><p>在核心 Python 发布版中的代码应该总是使用UTF-8编码（或者在 Python 2 中使用ASCII）。</p><p>使用ASCII(Python 2)或UTF-8(Python 3)的文件不需要有编码声明（注：它们是默认的）。</p><p>在标准库中，非缺省的编码应该仅仅用于测试目的，或者注释或文档字符串中的作者名包含非ASCII码字符；否则，优先使用\x、\u、\U或者\N来转义字符串中的非ASCII数据。</p><p>对于 Python 3.0 和之后的版本，以下是有关标准库的政策（见PEP 3131）：所有 Python 标准库中的标识符必须使用只含ASCII的标识，并且应该使用英语单词只要可行（在多数情况下，缩略语和技术术语哪个不是英语）。此外，字符串和注释也必须是ASCII。仅有的例外是：(a)测试用例测试非ASCII特性时，(b)作者名。作者的名字不是基于拉丁字母的必须提供他们名字的拉丁字母音译。</p><p>面向全球用户的开源项目，鼓励采取相似的政策。</p><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><p>import不同的模块应该独立一行，如：</p><p>好的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br></pre></td></tr></table></figure><p>不好的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import sys, os</span><br></pre></td></tr></table></figure><p>这样也是可行的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from subprocess import Popen, PIPE</span><br></pre></td></tr></table></figure><ul><li>import语句应该总是放在文件的顶部，在模块注释和文档字符串之下，在模块全局变量和常量之前。</li></ul><p>import语句分组顺序如下：</p><ul><li>导入标准库模块</li><li>导入相关第三方库模块</li><li>导入当前应用程序/库模块</li></ul><p>每组之间应该用空行分开。</p><p>然后用__all__声明本文件内的模块。</p><ul><li><p>绝对导入是推荐的，它们通常是更可读的，并且在错误的包系统配置（如一个目录包含一个以os.path结尾的包）下有良好的行为倾向（至少有更清晰的错误消息）：</p></li><li><p>import mypkg.sibling</p></li><li><p>from mypkg import sibling</p></li><li><p>from mypkg.sibling import example</p></li></ul><p>当然，相对于绝对导入，相对导入是个可选替代，特别是处理复杂的包结构时，绝对导入会有不必要的冗余：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from . import sibling</span><br><span class="line">from .sibling import example</span><br></pre></td></tr></table></figure><p>标准库代码应该避免复杂的包结构，并且永远使用绝对导入。</p><p>应该从不使用隐式的相对导入，而且在 Python 3 中已经被移除</p><ul><li><p>从一个包含类的模块导入类时，这样写通常是可行的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from myclass import MyClass</span><br><span class="line">from foo.bar.yourclass import YourClass</span><br></pre></td></tr></table></figure><p>如果上面的方式会本地导致命名冲突，则这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import myclass</span><br><span class="line">import foo.bar.yourclass</span><br></pre></td></tr></table></figure><p>以myclass.MyClass和foo.bar.yourclass.YourClass这样的方式使用。</p></li><li><p>应该避免通配符导入（from import *），这会使名称空间里存在的名称变得不清晰，迷惑读者和自动化工具。这里有一个可辩护的通配符导入用例，，重新发布一个内部接口作为公共 API 的一部分（例如，使用纯 Python 实现一个可选的加速器模块的接口，但并不能预知这些定义会被覆盖）。</p></li></ul><p>当以这种方式重新发布名称时，下面关于公共和内部接口的指南仍然适用</p><h3 id="字符串引号"><a href="#字符串引号" class="headerlink" title="字符串引号"></a>字符串引号</h3><p>在 Python 里面，单引号字符串和双引号字符串是相同的。这份指南对这个不会有所建议。选择一种方式并坚持使用。一个字符串同时包含单引号和双引号字符时，用另外一种来包裹字符串，而不是使用反斜杠来转义，以提高可读性。</p><p>对于三引号字符串，总是使用双引号字符来保持与文档字符串约定的一致性（PEP 257）。</p><h3 id="表达式和语句中的空格"><a href="#表达式和语句中的空格" class="headerlink" title="表达式和语句中的空格"></a>表达式和语句中的空格</h3><h4 id="不能忍受的情况"><a href="#不能忍受的情况" class="headerlink" title="不能忍受的情况"></a>不能忍受的情况</h4><p>避免在下列情况中使用多余的空格：</p><ul><li><p>与括号保持紧凑（小括号、中括号、大括号）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: spam(ham[1], &#123;eggs: 2&#125;)</span><br><span class="line">No:  spam( ham[ 1 ], &#123; eggs: 2 &#125; )</span><br></pre></td></tr></table></figure></li><li><p>与后面的逗号、分号或冒号保持紧凑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: if x &#x3D;&#x3D; 4: print x, y; x, y &#x3D; y, x</span><br><span class="line">No:  if x &#x3D;&#x3D; 4 : print x , y ; x , y &#x3D; y , x</span><br></pre></td></tr></table></figure></li><li><p>切片内的冒号就像二元操作符一样，任意一侧应该被等同对待（把它当做一个极低优先级的操作）。在一个可扩展的切片中，冒号两侧必须有相同的空格数量。例外：切片参数省略时，空格也省略。</p></li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]</span><br><span class="line">ham[lower:upper], ham[lower:upper:], ham[lower::step]</span><br><span class="line">ham[lower+offset : upper+offset]</span><br><span class="line">ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]</span><br><span class="line">ham[lower + offset : upper + offset]</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ham[lower + offset:upper + offset]</span><br><span class="line">ham[1: 9], ham[1 :9], ham[1:9 :3]</span><br><span class="line">ham[lower : : upper]</span><br><span class="line">ham[ : upper]</span><br></pre></td></tr></table></figure><ul><li><p>函数名与其后参数列表的左括号应该保持紧凑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: spam(1)</span><br><span class="line">No:  spam (1)</span><br></pre></td></tr></table></figure></li><li><p>与切片或索引的左括号保持紧凑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: dct[&#39;key&#39;] &#x3D; lst[index]</span><br><span class="line">No:  dct [&#39;key&#39;] &#x3D; lst [index]</span><br></pre></td></tr></table></figure></li><li><p>在复制操作符（或其它）的两侧保持多余一个的空格：<br>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; 1</span><br><span class="line">y &#x3D; 2</span><br><span class="line">long_variable &#x3D; 3</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x             &#x3D; 1</span><br><span class="line">y             &#x3D; 2</span><br><span class="line">long_variable &#x3D; 3</span><br></pre></td></tr></table></figure></li></ul><h3 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h3><ul><li><p>总是在这些二元操作符的两侧加入一个空格：赋值(=)，增量赋值(+=, -= etc.)，比较(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not)，布尔运算(and, or, not)。</p></li><li><p>在不同优先级之间，考虑在更低优先级的操作符两侧插入空格。用你自己的判断力；但不要使用超过一个空格，并且在二元操作符的两侧有相同的空格数。</p></li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; i + 1</span><br><span class="line">submitted +&#x3D; 1</span><br><span class="line">x &#x3D; x*2 - 1</span><br><span class="line">hypot2 &#x3D; x*x + y*y</span><br><span class="line">c &#x3D; (a+b) * (a-b)</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i&#x3D;i+1</span><br><span class="line">submitted +&#x3D;1</span><br><span class="line">x &#x3D; x * 2 - 1</span><br><span class="line">hypot2 &#x3D; x * x + y * y</span><br><span class="line">c &#x3D; (a + b) * (a - b)</span><br></pre></td></tr></table></figure><ul><li>不要在关键值参数或默认值参数的等号两边加入空格</li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def complex(real, imag&#x3D;0.0):</span><br><span class="line">    return magic(r&#x3D;real, i&#x3D;imag)</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def complex(real, imag &#x3D; 0.0):</span><br><span class="line">    return magic(r &#x3D; real, i &#x3D; imag)</span><br></pre></td></tr></table></figure><ul><li>【注：Python 3】带注释的函数定义中的等号两侧要各插入空格。此外，在冒号后用一个单独的空格，也要在表明函数返回值类型的-&gt;左右各插入一个空格。</li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def munge(input: AnyStr):</span><br><span class="line">def munge(sep: AnyStr &#x3D; None):</span><br><span class="line">def munge() -&gt; AnyStr:</span><br><span class="line">def munge(input: AnyStr, sep: AnyStr &#x3D; None, limit&#x3D;1000):</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def munge(input: AnyStr&#x3D;None):</span><br><span class="line">def munge(input:AnyStr):</span><br><span class="line">def munge(input: AnyStr)-&gt;PosInt:</span><br></pre></td></tr></table></figure><ul><li>打消使用复合语句（多条语句在同一行）的念头。</li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if foo &#x3D;&#x3D; &#39;blah&#39;:</span><br><span class="line">    do_blah_thing()</span><br><span class="line">do_one()</span><br><span class="line">do_two()</span><br><span class="line">do_three()</span><br></pre></td></tr></table></figure><p>宁可不：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if foo &#x3D;&#x3D; &#39;blah&#39;: do_blah_thing()</span><br><span class="line">do_one(); do_two(); do_three()</span><br></pre></td></tr></table></figure><ul><li>有时候把 if/for/while 和一个小的主体放在同一行也是可行的，千万不要在有多条语句的情况下这样做。此外，还要避免折叠，例如长行。</li></ul><p>宁可不：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if foo &#x3D;&#x3D; &#39;blah&#39;: do_blah_thing()</span><br><span class="line">for x in lst: total +&#x3D; x</span><br></pre></td></tr></table></figure><p>绝对不：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if foo &#x3D;&#x3D; &#39;blah&#39;: do_blah_thing()</span><br><span class="line">else: do_non_blah_thing()</span><br><span class="line"></span><br><span class="line">try: something()</span><br><span class="line">finally: cleanup()</span><br><span class="line"></span><br><span class="line">do_one(); do_two(); do_three(long, argument,</span><br><span class="line">                             list, like, this)</span><br><span class="line"></span><br><span class="line">if foo &#x3D;&#x3D; &#39;blah&#39;: one(); two(); three()</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>与代码相矛盾的注释不如没有。注释总是随着代码的变更而更新。</p><p>注释应该是完整的句子。如果注释是一个短语或语句，第一个单词应该大写，除非是一个开头是小写的标识符（从不改变标识符的大小写）。</p><p>如果注释很短，末尾的句点可以省略。块注释通常由一个或多个有完整句子的段落组成，并且每个句子应该由句点结束。</p><p>你应该在一个句子的句点后面用两个空格。</p><p>写英语时，遵循《Strunk and White》（注：《英文写作指南》，参考维基百科）。</p><p>来自非英语国家的程序员：请用英语写注释，除非你120%确定你的代码永远不会被那些不说你的语言的人阅读。</p><h4 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h4><p>块注释通常用来说明跟随在其后的代码，应该与那些代码有相同的缩进层次。块注释每一行以#起头，并且#后要跟一个空格（除非是注释内的缩进文本）。</p><h4 id="行内注释"><a href="#行内注释" class="headerlink" title="行内注释"></a>行内注释</h4><p>有节制的使用行内注释。</p><p>一个行内注释与语句在同一行。行内注释应该至少与语句相隔两个空格。以#打头，#后接一个空格。</p><p>无谓的行内注释如果状态明显，会转移注意力。不要这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; x + 1                 # Increment x</span><br></pre></td></tr></table></figure><p>但有的时候，这样是有用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; x + 1                 # Compensate for border</span><br></pre></td></tr></table></figure><h4 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h4><p>编写良好的文档字符串（a.k.a “docstring”）的约定常驻在 PEP 257</p><ul><li>为所有的公共模块、函数、类和方法编写文档字符串。对于非公共的方法，文档字符串是不必要的，但是也应该有注释来说明代码是干什么的。这个注释应该放在方法声明的下面。</li><li>PEP 257 描述了良好的文档字符串的约定。注意，文档字符串的结尾”””应该放在单独的一行，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;Return a foobang</span><br><span class="line"></span><br><span class="line">Optional plotz says to frobnicate the bizbaz first.</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li><li>对于单行的文档字符串，把结尾”””放在同一行。</li></ul><h3 id="版本注记"><a href="#版本注记" class="headerlink" title="版本注记"></a>版本注记</h3><p>如果必须要 Subversion，CVS 或 RCS 标记在你的源文件里，像这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__version__ &#x3D; &quot;$Revision$&quot;</span><br><span class="line"># $Source$</span><br></pre></td></tr></table></figure><p>这几行应该在模块的文档字符串后面，其它代码的前面，上下由一个空行分隔。</p><h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><p>Python 库的命名规则有点混乱，因此我们永远也不会使其完全一致的 – 不过，这里有一些当前推荐的命名标准。新的模块和包（包括第三方框架）应该按照这些标准来命名，但是已存在库有不同的风格，内部一致性是首选。</p><h4 id="覆盖原则"><a href="#覆盖原则" class="headerlink" title="覆盖原则"></a>覆盖原则</h4><p>API 里对用户可见的公共部分应该遵循约定，反映的是使用而不是实现。</p><h4 id="规定：命名约定"><a href="#规定：命名约定" class="headerlink" title="规定：命名约定"></a>规定：命名约定</h4><p>有许多不同的命名风格。这有助于识别正在使用的命名风格，独立于它们的用途。</p><p>下面的命名风格通常是有区别的：</p><ul><li>b (一个小写字母)</li><li>B (一个大写字母)</li><li>lowercase</li><li>lower_case_with_underscores</li><li>UPPERCASE</li><li>UPPER_CASE_WITH_UNDERSCORES</li><li>CapitalizedWords (又叫 CapWords，或者 CamelCase(骆驼命名法) – 如此命名因为字母看起来崎岖不平[3]。有时候也叫 StudlyCaps。<ul><li>注意：在 CapWords 使用缩略语时，所有缩略语的首字母都要大写。因此HTTPServerError比HttpServerError要好。</li></ul></li><li>mixedCase (和上面不同的是首字母小写)</li><li>Capitalized_Words_With_Underscores (丑陋无比！)</li></ul><p>也有种风格用独一无二的短前缀来将相似的命名分组。在 Python 里用的不是很多，但是为了完整性被提及。例如，os.stat()函数返回一个元组，通常有像st_mode，st_size，st_mtime等名字。（强调与 POSIX 系统调用的字段结构一致，有助于程序员对此更熟悉）</p><p>X11 库的所有公共函数都用 X 打头。在 Python 中这种风格被认为是不重要的，因为属性和方法名的前缀是一个对象，函数名的前缀为一个模块名。</p><p>此外，下面的特许形式用一个前导或尾随的下划线进行识别（这些通常可以和任何形式的命名约定组合）：</p><ul><li>_single_leading_underscore ：仅内部使用的标识，如from M import *不会导入像这样一下划线开头的对象。</li><li>single_trailingunderscore : 通常是为了避免与 Python 规定的关键字冲突，如Tkinter.Toplevel(master, class_=’ClassName’)。</li><li>double_leading_underscore : 命名一个类属性，调用的时候名字会改变（在类FooBar中，<code>boo变成了_FooBar__boo</code>；见下）。</li><li>double_leading_and_trailing_underscore ：”魔术”对象或属性，活在用户控制的命名空间里。例如，__init__，__import__和__file__。永远不要像这种方式命名；只把它们作为记录。</li></ul><h4 id="规定：命名约定-1"><a href="#规定：命名约定-1" class="headerlink" title="规定：命名约定"></a>规定：命名约定</h4><h5 id="应该避免的名字"><a href="#应该避免的名字" class="headerlink" title="应该避免的名字"></a>应该避免的名字</h5><p>永远不要使用单个字符l(小写字母 el)，O(大写字母 oh)，或I(大写字母 eye)作为变量名。</p><p>在一些字体中，这些字符是无法和数字1和0区分开的。试图使用l时用L代替。</p><h5 id="包和模块名"><a href="#包和模块名" class="headerlink" title="包和模块名"></a>包和模块名</h5><p>模块名应该短，且全小写。如果能改善可读性，可以使用下划线。Python 的包名也应该短，全部小写，但是不推荐使用下划线。</p><p>因为模块名就是文件名，而一些文件系统是大小写不敏感的，并且自动截断长文件名，所以给模块名取一个短小的名字是非常重要的 – 在 Unix 上这不是问题，但是把代码放到老版本的 Mac， Windows，或者 DOS 上就可能变成一个问题了。</p><p>用 C/C++ 给 Python 写一个高性能的扩展(e.g. more object oriented)接口的时候，C/C++ 模块名应该有一个前导下划线。</p><h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>类名通常使用 CapWords 约定。</p><p>The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.</p><p>注意和内建名称的区分开：大多数内建名称是一个单独的单词（或两个单词一起），CapWords 约定只被用在异常名和内建常量上。</p><h5 id="异常名"><a href="#异常名" class="headerlink" title="异常名"></a>异常名</h5><p>因为异常应该是类，所以类名约定在这里适用。但是，你应该用Error作为你的异常名的后缀（异常实际上是一个错误）。</p><h5 id="全局变量名"><a href="#全局变量名" class="headerlink" title="全局变量名"></a>全局变量名</h5><p>（我们希望这些变量仅仅在一个模块内部使用）这个约定有关诸如此类的变量。</p><p>若被设计的模块可以通过from M import *来使用，它应该使用__all__机制来表明那些可以可导出的全局变量，或者使用下划线前缀的全局变量表明其是模块私有的。</p><h5 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h5><p>函数名应该是小写的，有必要的话用下划线来分隔单词提高可读性。</p><p>混合大小写仅仅在上下文都是这种风格的情况下允许存在（如thread.py），这是为了维持向后兼容性。</p><h5 id="函数和方法参数"><a href="#函数和方法参数" class="headerlink" title="函数和方法参数"></a>函数和方法参数</h5><p>总是使用self作为实例方法的第一个参数。</p><p>总是使用cls作为类方法的第一个参数。</p><p>如果函数参数与保留关键字冲突，通常最好在参数后面添加一个尾随的下划线，而不是使用缩写或胡乱拆减。因此class_比clss要好。（或许避免冲突更好的方式是使用近义词）</p><h5 id="方法名和实例变量"><a href="#方法名和实例变量" class="headerlink" title="方法名和实例变量"></a>方法名和实例变量</h5><p>用函数名的命名规则：全部小写，用下划线分隔单词提高可读性。</p><p>用一个且有一个前导的下划线来表明非公有的方法和实例变量。</p><p>为了避免与子类变量或方法的命名冲突，用两个前导下划线来调用 Python 的命名改编规则。</p><p>Python 命名改编通过添加一个类名：如果类Foo有一个属性叫__a，它不能被这样Foo.__a访问（执着的人可以通过这样Foo._Foo__a来访问）通常，双前导的下划线应该仅仅用来避免与其子类属性的命名冲突。</p><p>注意：这里有一些争议有关__names的使用（见下文）。</p><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>常量通常是模块级的定义，全部大写，单词之间以下划线分隔。例如MAX_OVERFLOW和TOTAL。</p><h5 id="继承的设计"><a href="#继承的设计" class="headerlink" title="继承的设计"></a>继承的设计</h5><p>总是决定一个类的方法和变量（属性）是应该公有还是非公有。如果有疑问，选择非公有；相比把共有属性变非公有，非公有属性变公有会容易得多。</p><p>公有属性是你期望给那些与你的类无关的客户端使用的，你应该保证不会出现不向后兼容的改变。非公有的属性是你不打算给其它第三方使用的；你不需要保证非公有的属性不会改变甚至被移除也是可以的。</p><p>我们这里不适用“私有”这个术语，因为在 Python 里没有真正的私有属性（一般没有不必要的工作量）。</p><p>另一种属性的分类是“子类 API”的一部分（通常在其它语言里叫做“Protected”）。一些类被设计成被继承的，要么扩展要么修改类的某方面行为。设计这样一个类的时候，务必做出明确的决定，哪些是公有的，其将会成为子类 API 的一部分，哪些仅仅是用于你的基类的。</p><p>处于这种考虑，给出 Pythonic 的指南：</p><ul><li>共有属性不应该有前导下划线。</li><li>如果你的公有属性与保留关键字发生冲突，在你的属性名后面添加一个尾随的下划线。这比使用缩写或胡乱拆减要好。（尽管这条规则，已知某个变量或参数可能是一个类情况下，cls是首选的命名，特别是作为类方法的第一个参数）<ul><li>注意一：见上面推荐的类方法参数命名方式。</li></ul></li><li>对于简单的公有数据属性，最好的方式是暴露属性名，不要使用复杂的访问属性/修改属性的方法。记住，Python 提供了捷径去提升特性，如果你发现简单的数据属性需要增加功能行为。在这种情况下，使用properties把功能实现隐藏在简单的数据属性访问语法下面。<ul><li>注意一：properties仅仅在新式类下工作。 </li><li>注意二：尽量保持功能行为无边际效应，然而如缓存有边际效应也是好的。 </li><li>注意三：避免为计算开销大的操作使用properties；属性标记使调用者相信这样来访问（相对来说）是开销很低的。</li></ul></li><li>如果你的类是为了被继承，你有不想让子类使用的属性，给属性命名时考虑给它们加上双前导下划线，不要加尾随下划线。这会调用 Python 的名称重整算法，把类名加在属性名前面。避免了命名冲突，当子类不小心命名了和父类属性相同名称的时候。<ul><li>注意一：注意只是用了简单的类名来重整名字，因此如果子类和父类同名的时候，你仍然有能力避免冲突。</li><li>注意二：命名重整有确定的用途，例如调试和<strong>getattr</strong>()，就不太方便。命名重整算法是有据可查的，易于手动执行。</li><li>注意三：不是每个人都喜欢命名重整。尽量平衡名称的命名冲突与面向高级调用者的潜在用途。</li></ul></li></ul><h3 id="公共和内部接口"><a href="#公共和内部接口" class="headerlink" title="公共和内部接口"></a>公共和内部接口</h3><p>保证所有公有接口的向后兼容性。用户能清晰的区分公有和内部接口是重要的。</p><p>文档化的接口考虑公有，除非文档明确的说明它们是暂时的，或者内部接口不保证其的向后兼容性。所有的非文档化的应该被假设为非公开的。</p><p>为了更好的支持内省，模块应该用__all__属性来明确规定公有 API 的名字。设置__all__为空list表明模块没有公有 API。</p><p>甚至与__all__设置相当，内部接口（包、模块、类、函数、属性或者其它的名字）应该有一个前导的下划线前缀。</p><p>被认为是内部的接口，其包含的任何名称空间（包、模块或类）也被认为是内部的。</p><p>导入的名称应始终视作一个实现细节。其它模块不能依赖间接访问这些导入的名字，除非它们是包含模块的 API 明确记载的一部分，例如os.path或一个包的__init__模块暴露了来自子模块的功能。</p><h3 id="程序编写建议"><a href="#程序编写建议" class="headerlink" title="程序编写建议"></a>程序编写建议</h3><ul><li><p>代码的编写方式不能对其它 Python 的实现（PyPy、Jython、IronPython、Cython、Psyco，诸如此类的）不利。</p><ul><li>例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用’’.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。</li></ul></li><li><p>比较单例，像None应该用is或is not，从不使用==操作符。</p><ul><li>当你的真正用意是if x is not None的时候，当心if x这样的写法 – 例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值可能是那些布尔值为 false 的类型（如空容器）。</li></ul></li><li><p>用is not操作符而不是not … is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。<br>好的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if foo is not None:</span><br></pre></td></tr></table></figure><p>不好的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if not foo is None:</span><br></pre></td></tr></table></figure></li><li><p>用富比较实现排序操作的时候，实现所有六个比较操作符（ <strong>eq</strong> 、 <strong>ne</strong> 、 <strong>lt</strong> , <strong>le</strong>, <strong>gt</strong> , __ge__）是更好的，而不是依赖其它仅仅运用一个特定比较的代码</p><ul><li>为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。</li><li>PEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能交换y &gt; x与x &lt; y，y &gt;= x与x &lt;= y，也可能交换x == y和x != y。sort()和min()操作肯定会使用&lt;操作符，max()函数肯定会使用&gt;操作符。当然，最好是六个操作符都实现，以便不会在其它上下文中有疑惑。</li></ul></li><li><p>始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。<br>好的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def f(x): return 2*x</span><br></pre></td></tr></table></figure><p>不好的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f &#x3D; lambda x: 2*x</span><br></pre></td></tr></table></figure><p>第一种形式意味着函数对象的名字是’f’而不是’’的。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除的唯一好处，lambda表达式可以提供一个显示的def语句不能提供的，如，lambda能镶嵌在一个很长的表达式里。</p></li><li><p>异常类应派生自Exception而不是BaseException。直接继承自BaseException是为Exception保留的，如果从BaseException继承，捕获到的错误总是错的。</p><ul><li>设计异常结构层次，应基于那些可能出现异常的代码，而不是在出现异常后的。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。</li><li>类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。</li></ul></li><li><p>适当的使用异常链。在 Python 3 里，raise X from Y用于表明明确的替代者，不丢失原有的回溯信息。</p><ul><li>有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），确保相关的细节全部转移给了新异常（例如，把KeyError变成AttributeError时保留属性名，或者把原始异常的错误信息嵌在新异常里）。</li></ul></li><li><p>在 Python 2 里抛出异常时，用raise ValueError(‘message’)代替旧式的raise ValueError, ‘message’。</p><ul><li>在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。</li><li>使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！</li></ul></li><li><p>捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。<br>例如，用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    import platform_specific_module</span><br><span class="line">except ImportError:</span><br><span class="line">    platform_specific_module &#x3D; None</span><br></pre></td></tr></table></figure><ul><li><p>一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。</p></li><li><p>一个好的经验是限制使用空except语句，除了这两种情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    process_data()</span><br><span class="line">except Exception as exc:</span><br><span class="line">    raise DataProcessingFailedError(str(exc))</span><br></pre></td></tr></table></figure></li><li><p>Python 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。</p></li></ul></li><li><p>捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是自省的errno值。</p></li><li><p>此外，对于所有的try/except语句来说，限制try里面有且仅有绝对必要的代码。在强调一次，这能避免屏蔽错误。</p></li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    value &#x3D; collection[key]</span><br><span class="line">except KeyError:</span><br><span class="line">    return key_not_found(key)</span><br><span class="line">else:</span><br><span class="line">    return handle_value(value)</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    # Too broad!</span><br><span class="line">    return handle_value(collection[key])</span><br><span class="line">except KeyError:</span><br><span class="line">    # Will also catch KeyError raised by handle_value()</span><br><span class="line">    return key_not_found(key)</span><br></pre></td></tr></table></figure><ul><li>当资源是本地的特定代码段，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。</li><li>当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：</li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with conn.begin_transaction():</span><br><span class="line">    do_stuff_in_transaction(conn)</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with conn:</span><br><span class="line">    do_stuff_in_transaction(conn)</span><br></pre></td></tr></table></figure><ul><li><p>第二个例子没有提供任何信息来表明__enter__和__exit__方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。</p></li><li><p>坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。</p></li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def foo(x):</span><br><span class="line">    if x &gt;&#x3D; 0:</span><br><span class="line">        return math.sqrt(x)</span><br><span class="line">    else:</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">def bar(x):</span><br><span class="line">    if x &lt; 0:</span><br><span class="line">        return None</span><br><span class="line">    return math.sqrt(x)</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def foo(x):</span><br><span class="line">    if x &gt;&#x3D; 0:</span><br><span class="line">        return math.sqrt(x)</span><br><span class="line"></span><br><span class="line">def bar(x):</span><br><span class="line">    if x &lt; 0:</span><br><span class="line">        return</span><br><span class="line">    return math.sqrt(x)</span><br></pre></td></tr></table></figure><ul><li><p>用字符串方法代替字符串模块。</p><ul><li>字符串方法总是更快，与 unicode 字符串共享 API。如果需要向后兼容性覆盖这个规则，需要 Python 2.0 以上的版本。</li></ul></li><li><p>用’’.startswith()和’’.endswith()代替字符串切片来检查前缀和后缀。</p><ul><li>startswith()和endswith()是更简洁的，不容易出错的。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: if foo.startswith(&#39;bar&#39;):</span><br><span class="line">No:  if foo[:3] &#x3D;&#x3D; &#39;bar&#39;:</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对象类型的比较应该始终使用isinstance()而不是直接比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes: if isinstance(obj, int):</span><br><span class="line"></span><br><span class="line">No:  if type(obj) is type(1):</span><br></pre></td></tr></table></figure><ul><li>当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if isinstance(obj, basestring):</span><br></pre></td></tr></table></figure></li><li>注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。</li></ul></li><li><p>对于序列（字符串、列表、元组）来说，空的序列为False：</p></li></ul><p>好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if not seq:</span><br><span class="line">if seq:</span><br></pre></td></tr></table></figure><p>不好的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if len(seq):</span><br><span class="line">if not len(seq):</span><br></pre></td></tr></table></figure><ul><li>不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（or more recently, reindent.py）会将其裁剪掉。</li><li>不要用==比较True和False。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes:   if greeting:</span><br><span class="line">No:    if greeting &#x3D;&#x3D; True:</span><br><span class="line">Worse: if greeting is True:</span><br></pre></td></tr></table></figure></li><li>Python 标准库将不再使用函数标注，以至于给特殊的标注风格给一个过早的承若。代替的，这些标注是留给用户去发现和体验的有用的标注风格。<ul><li>建议第三方实验的标注用相关的修饰符指示标注应该如何被解释。</li><li>早期的核心开发者尝试用函数标注显示不一致、特别的标注风格。例如：<ul><li>[str]是很含糊的，它可能代表一个包含字符串的列表，也可能代表一个为字符串或为空的值。</li><li>open(file:(str,bytes))可能用来表示file的值可以是一个str或者bytes，也可能用来表示file的值是一个包含str和bytes的二元组。</li><li>标注seek(whence:int)体现了一个过于明确又不够明确的混合体：int太严格了（有__index__的应该被允许），又不够严格（只有0,1,2是被允许的）。同样的，标注write(b: byte)太严格了（任何支持缓存协议的都应该被允许）。</li><li>像read1(n: int=None)这样的标注自我矛盾，因为None不是int。像source_path(self, fullname:str) -&gt; object标注是迷惑人的，返回值到底是应该什么类型？</li><li>除了上面之外，在具体类型和抽象类型的使用上是不一致的：int对integral（整数），set/fronzenset对MutableSet/Set。</li><li>不正确的抽象基类标注规格。例如，集合之间的操作需要另一个对象是集合的实例，而不只是一个可迭代序列。</li><li>另一个问题是，标注成为了规范的一部分，但却没有经受过考验。</li><li>在大多数情况下，文档字符串已经包括了类型规范，比函数标注更清晰。在其余的情况下，一旦标注被移除，文档字符串应该被完善。</li><li>观察到的函数标注太标新立异了，相关的系统不能一致的处理自动类型检查和参数验证。离开这些标注的代码以后很难做出更改，使自动化工具可以支持。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 挑战实验 -- 类和Collection</title>
      <link href="2017/07/14/Python3%20%E6%8C%91%E6%88%98%E5%AE%9E%E9%AA%8C%20--%20%E7%B1%BB%E5%92%8CCollection/"/>
      <url>2017/07/14/Python3%20%E6%8C%91%E6%88%98%E5%AE%9E%E9%AA%8C%20--%20%E7%B1%BB%E5%92%8CCollection/</url>
      
        <content type="html"><![CDATA[<p>Python3 挑战实验 – 类和Collection</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>我们之前通过3个课程学习了 Python 的类，模块和Collection 模块的知识。这次我们通过一个简单的挑战实验来测试一下我们对之前知识点的掌握程度。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>改写我们在第11节类这个模块当中 2.3 继承 部分的 student_teacher.py 脚本，在Person()类中增添函数get_grade()。对于教师类，该函数可以自动统计出老师班上学生的得分情况并按照频率的高低以A: X, B: X, C: X, D: X 的形式打印出来。对于学生类，该函数则可以以Pass: X, Fail: X 来统计自己的成绩情况（A,B,C 为 Pass, 如果得了 D 就认为是 Fail）。</p><p>student_teacher.py 文件可以通过在Xfce 终端中输入如下代码来获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;790&#x2F;student_teacher.py</span><br></pre></td></tr></table></figure><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>请把最终的student_teacher.py 代码文件放在 /home/shiyanlou/Code/ 路径下<br>根据命令行中的第一个参数 teacher 或者 student 来判断最终输出的格式。<br>命令行中第二个输入的参数是需要统计的字符串<br>举例：<br><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid2725timestamp1490595554869.png/wm"></p><h3 id="提示语"><a href="#提示语" class="headerlink" title="提示语"></a>提示语</h3><ul><li>import sys</li><li>collections 中的 Counter 子类</li><li>format() 以及 join</li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>类</li><li>Collection 模块</li><li>注意最终的打印形式</li></ul><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>实验楼团队</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># student_teacher.py</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import sys</span><br><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line">class Person(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回具有给定名称的 Person 对象</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, grade):</span><br><span class="line">        self.grade &#x3D; grade</span><br><span class="line"></span><br><span class="line">    def get_grade(self):</span><br><span class="line">        return self.grade</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(Person):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回 Student 对象，采用 grade 参数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, grade):</span><br><span class="line">        Person.__init__(self, grade)</span><br><span class="line"></span><br><span class="line">    def get_grade(self):</span><br><span class="line">        counter &#x3D;  Counter(self.grade).most_common(4)</span><br><span class="line">        g_pass &#x3D; g_fail &#x3D; 0</span><br><span class="line"> </span><br><span class="line">        for e in counter:</span><br><span class="line">            g, n &#x3D; e</span><br><span class="line">            if g in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]:</span><br><span class="line">                g_pass +&#x3D; n</span><br><span class="line">            else:</span><br><span class="line">                g_fail +&#x3D; n</span><br><span class="line"></span><br><span class="line">        print(&#39;Pass: &#123;&#125;, Fail: &#123;&#125;&#39;.format(g_pass, g_fail))</span><br><span class="line"></span><br><span class="line">class Teacher(Person):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回 Teacher 对象，采用 grade 作为参数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, grade):</span><br><span class="line">        Person.__init__(self, grade)</span><br><span class="line"></span><br><span class="line">    def get_grade(self):</span><br><span class="line">        counter &#x3D;  Counter(self.grade).most_common(4)</span><br><span class="line">        grade_list &#x3D; []</span><br><span class="line">        for e in counter:</span><br><span class="line">            g, n &#x3D; e</span><br><span class="line">            grade_list.append(g + &#39;: &#39;+ str(n))</span><br><span class="line">        print(&#39;, &#39;.join(grade_list))</span><br><span class="line">        </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    if sys.argv[1] &#x3D;&#x3D; &#39;teacher&#39;:</span><br><span class="line">        teacher &#x3D; Teacher(sys.argv[2])</span><br><span class="line">        teacher.get_grade()</span><br><span class="line">    else:</span><br><span class="line">        student &#x3D; Student(sys.argv[2])</span><br><span class="line">        student.get_grade()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Collections 模块</title>
      <link href="2017/07/13/Python%20Collections%20%E6%A8%A1%E5%9D%97/"/>
      <url>2017/07/13/Python%20Collections%20%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>Python Collections 模块</p><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>在这个实验我们会学习 Collections 模块。这个模块实现了一些很好的数据结构，它们能帮助你解决各种实际问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import collections</span><br></pre></td></tr></table></figure><p>这是如何导入这个模块，现在我们来看看其中的一些类。</p><p>Counter 是一个有助于 hashable 对象计数的 dict 子类。它是一个无序的集合，其中 hashable 对象的元素存储为字典的键，它们的计数存储为字典的值，计数可以为任意整数，包括零和负数。</p><p>我们可以这样查看 Counter 的帮助信息，事实上这些信息来源于 Counter 的文档字符串（collections.Counter.__doc__）。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid82374labid2048timestamp1489548309649.png/wm"></p><p>下面我们来看一个例子，例子中我们查看 Python 的 LICENSE 文件中某些单词出现的次数。</p><h3 id="Counter-示例"><a href="#Counter-示例" class="headerlink" title="Counter 示例"></a>Counter 示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Counter</span><br><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; path &#x3D; &#39;&#x2F;usr&#x2F;lib&#x2F;python3.4&#x2F;LICENSE.txt&#39;</span><br><span class="line">&gt;&gt;&gt; words &#x3D; re.findall(&#39;\w+&#39;, open(path).read().lower())</span><br><span class="line">&gt;&gt;&gt; Counter(words).most_common(10)</span><br><span class="line">[(&#39;the&#39;, 80), (&#39;or&#39;, 78), (&#39;1&#39;, 66), (&#39;of&#39;, 61), (&#39;to&#39;, 50), (&#39;and&#39;, 48), (&#39;python&#39;, 46), (&#39;in&#39;, 38), (&#39;license&#39;, 37), (&#39;any&#39;, 37)]</span><br></pre></td></tr></table></figure><p>Counter 对象有一个叫做 elements() 的方法，其返回的序列中，依照计数重复元素相同次数，元素顺序是无序的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c &#x3D; Counter(a&#x3D;4, b&#x3D;2, c&#x3D;0, d&#x3D;-2)</span><br><span class="line">&gt;&gt;&gt; list(c.elements())</span><br><span class="line">[&#39;b&#39;,&#39;b&#39;,&#39;a&#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;]</span><br></pre></td></tr></table></figure><p>most_common() 方法返回最常见的元素及其计数，顺序为最常见到最少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Counter(&#39;abracadabra&#39;).most_common(3)</span><br><span class="line">[(&#39;a&#39;, 5), (&#39;r&#39;, 2), (&#39;b&#39;, 2)]</span><br></pre></td></tr></table></figure><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p>defaultdict 是内建 dict 类的子类，它覆写了一个方法并添加了一个可写的实例变量。其余功能与字典相同。</p><p>defaultdict() 第一个参数提供了 default_factory 属性的初始值，默认值为 None，default_factory 属性值将作为字典的默认数据类型。所有剩余的参数与字典的构造方法相同，包括关键字参数。</p><p>同样的功能使用 defaultdict 比使用 dict.setdefault 方法快。</p><h4 id="defaultdict-用例"><a href="#defaultdict-用例" class="headerlink" title="defaultdict 用例"></a>defaultdict 用例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import defaultdict</span><br><span class="line">&gt;&gt;&gt; s &#x3D; [(&#39;yellow&#39;, 1), (&#39;blue&#39;, 2), (&#39;yellow&#39;, 3), (&#39;blue&#39;, 4), (&#39;red&#39;, 1)]</span><br><span class="line">&gt;&gt;&gt; d &#x3D; defaultdict(list)</span><br><span class="line">&gt;&gt;&gt; for k, v in s:</span><br><span class="line">...     d[k].append(v)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; d.items()</span><br><span class="line">dict_items([(&#39;blue&#39;, [2, 4]), (&#39;red&#39;, [1]), (&#39;yellow&#39;, [1, 3])])</span><br></pre></td></tr></table></figure><p>在例子中你可以看到，即使 defaultdict 对象不存在某个键，它会自动创建一个空列表。</p><h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><p>命名元组有助于对元组每个位置赋予意义，并且让我们的代码有更好的可读性和自文档性。你可以在任何使用元组地方使用命名元组。在例子中我们会创建一个命名元组以展示为元组每个位置保存信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import namedtuple</span><br><span class="line">&gt;&gt;&gt; Point &#x3D; namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])  # 定义命名元组</span><br><span class="line">&gt;&gt;&gt; p &#x3D; Point(10, y&#x3D;20)  # 创建一个对象</span><br><span class="line">&gt;&gt;&gt; p</span><br><span class="line">Point(x&#x3D;10, y&#x3D;20)</span><br><span class="line">&gt;&gt;&gt; p.x + p.y</span><br><span class="line">30</span><br><span class="line">&gt;&gt;&gt; p[0] + p[1]  # 像普通元组那样访问元素</span><br><span class="line">30</span><br><span class="line">&gt;&gt;&gt; x, y &#x3D; p     # 元组拆封</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; y</span><br><span class="line">20</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 模块</title>
      <link href="2017/07/13/Python%20%E6%A8%A1%E5%9D%97/"/>
      <url>2017/07/13/Python%20%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>Python 模块</p><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><p>到目前为止，我们在 Python 解释器中写的所有代码都在我们退出解释器的时候丢失了。但是当人们编写大型程序的时候他们会倾向于将代码分为多个不同的文件以便使用，调试以及拥有更好的可读性。在 Python 中我们使用模块来到达这些目的。模块是包括 Python 定义和声明的文件。文件名就是模块名加上 .py 后缀。</p><p>你可以由全局变量 <strong>name</strong> 得到模块的模块名（一个字符串）。</p><p>现在我们来看看模块是怎样工作的。创建一个 bars.py 文件。文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">Bars Module</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">这是一个打印不同分割线的示例模块</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">def starbar(num):</span><br><span class="line">    &quot;&quot;&quot;打印 * 分割线</span><br><span class="line"></span><br><span class="line">    :arg num: 线长</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    print(&#39;*&#39; * num)</span><br><span class="line"></span><br><span class="line">def hashbar(num):</span><br><span class="line">    &quot;&quot;&quot;打印 # 分割线</span><br><span class="line"></span><br><span class="line">    :arg num: 线长</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    print(&#39;#&#39; * num)</span><br><span class="line"></span><br><span class="line">def simplebar(num):</span><br><span class="line">    &quot;&quot;&quot;打印 - 分割线</span><br><span class="line"></span><br><span class="line">    :arg num: 线长</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    print(&#39;-&#39; * num)</span><br></pre></td></tr></table></figure><p>现在我们启动解释器然后导入我们的模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import bars</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>我们必须使用模块名来访问模块内的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bars.hashbar(10)</span><br><span class="line">##########</span><br><span class="line">&gt;&gt;&gt; bars.simplebar(10)</span><br><span class="line">----------</span><br><span class="line">&gt;&gt;&gt; bars.starbar(10)</span><br><span class="line">**********</span><br></pre></td></tr></table></figure><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>有不同的方式导入模块。我们已经看到过一种了。你甚至可以从模块中导入指定的函数。这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from bars import simplebar, starbar</span><br><span class="line">&gt;&gt;&gt; simplebar(20)</span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure><p>你也可以使用 from module import * 导入模块中的所有定义，然而这并不是推荐的做法。</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>含有 <strong>init</strong>.py 文件的目录可以用来作为一个包，目录里的所有 .py 文件都是这个包的子模块，如下：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2047timestamp1471418687362.png/wm"></p><p>在这个例子中，mymodule 是一个包名并且 bars 和 utils 是里面的两个子模块。你可以使用 touch 命令创建一个空的 <strong>init</strong>.py 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch mymodule&#x2F;__init__.py</span><br></pre></td></tr></table></figure><p>如果 <strong>init</strong>.py 文件内有一个名为 <strong>all</strong> 的列表，那么只有在列表内列出的名字将会被公开。</p><p>因此如果 mymodule 内的 <strong>init</strong>.py 文件含有以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from mymodule.bars import simplebar</span><br><span class="line">__all__ &#x3D; [simplebar, ]</span><br></pre></td></tr></table></figure><p>那么导入时将只有 simplebar 可用。</p><p>from mymodule import * 只能工作在模块级别的对象上，试图导入函数或类将导致 syntax error。</p><h3 id="默认模块"><a href="#默认模块" class="headerlink" title="默认模块"></a>默认模块</h3><p>现在你安装 Python 的时候会附带安装不同的模块，你可以按需使用它们，也可以为其它特殊用途安装新模块。在下面的几个例子中，我们将要看到同样例子很多。</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid82374labid2047timestamp1489547288448.png/wm"></p><p>上面的例子展示了怎样获得你系统中安装的所有模块的列表。在这里就不粘贴它们了，因为这是一个很大的列表。</p><p>你也能在解释器里使用 help() 函数查找任何模块/类的文档。如果你想要知道字符串所有可用的方法，你可以像下面这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; help(str)</span><br></pre></td></tr></table></figure><h4 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h4><p>os 模块提供了与操作系统相关的功能。你可以使用如下语句导入它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span><br></pre></td></tr></table></figure><p>getuid() 函数返回当前进程的有效用户 id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.getuid()</span><br><span class="line">500</span><br></pre></td></tr></table></figure><p>getpid() 函数返回当前进程的 id。getppid() 返回父进程的 id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.getpid()</span><br><span class="line">16150</span><br><span class="line">&gt;&gt;&gt; os.getppid()</span><br><span class="line">14847</span><br></pre></td></tr></table></figure><p>uname() 函数返回识别操作系统的不同信息，在 Linux 中它返回的详细信息可以从 uname -a 命令得到。uname() 返回的对象是一个元组，（sysname, nodename, release, version, machine）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.uname()</span><br><span class="line">(&#39;Linux&#39;, &#39;d80&#39;, &#39;2.6.34.7-56.fc13.i686.PAE&#39;, &#39;#1 SMP Wed Sep 15 03:27:15 UTC 2010&#39;, &#39;i686&#39;)</span><br></pre></td></tr></table></figure><p>getcwd() 函数返回当前工作目录。chdir(path) 则是更改当前目录到 path。在例子中我们首先看到当前工作目录是 /home/shiyanlou，然后我们更改当前工作目录到 /Code 并再一次查看当前工作目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.getcwd()</span><br><span class="line">&#39;&#x2F;home&#x2F;shiyanlou&#39;</span><br><span class="line">&gt;&gt;&gt; os.chdir(&#39;Code&#39;)</span><br><span class="line">&gt;&gt;&gt; os.getcwd()</span><br><span class="line">&#39;&#x2F;home&#x2F;shiyanlou&#x2F;Code&#39;</span><br></pre></td></tr></table></figure><p>所以现在让我们使用 os 模块提供的另一个函数来创建一个自己的函数，它将列出给定目录下的所有文件和目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def view_dir(path&#x3D;&#39;.&#39;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    这个函数打印给定目录中的所有文件和目录</span><br><span class="line">    :args path: 指定目录，默认为当前目录</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    names &#x3D; os.listdir(path)</span><br><span class="line">    names.sort()</span><br><span class="line">    for name in names:</span><br><span class="line">        print(name, end &#x3D;&#39; &#39;)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>使用例子中的 view_dir() 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; view_dir(&#39;&#x2F;&#39;)</span><br><span class="line">.bashrc .dockerenv .profile bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure><h3 id="Requests-模块"><a href="#Requests-模块" class="headerlink" title="Requests 模块"></a>Requests 模块</h3><p>Requests 是一个第三方 Python 模块，其官网的介绍如下：</p><blockquote><p>Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。</p><p>警告：非专业使用其他 HTTP 库会导致危险的副作用，包括：安全缺陷症、冗余代码症、重新发明轮子症、啃文档症、抑郁、头疼、甚至死亡。</p></blockquote><p>第三方模块并不是默认的模块，意味着你需要安装它，我们使用 pip3 安装它。</p><p>首先要安装 pip3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>然后用 pip3 安装 requests</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install requests</span><br></pre></td></tr></table></figure><p>上面的命令会在你的系统中安装 Python3 版本的 Requests 模块。</p><h4 id="获得一个简单的网页"><a href="#获得一个简单的网页" class="headerlink" title="获得一个简单的网页"></a>获得一个简单的网页</h4><p>你可以使用 get() 方法获取任意一个网页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">&gt;&gt;&gt; req &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.baidu.com&#39;) </span><br><span class="line">#非会员用户不能访问外网，所以请在学习的时候将url更换为 github.com 进行测试</span><br><span class="line">&gt;&gt;&gt; req.status_code</span><br><span class="line">200</span><br></pre></td></tr></table></figure><p>req 的 text 属性存有服务器返回的 HTML 网页，由于 HTML 文本太长就不在这里贴出来了。</p><p>使用这个知识，让我们写一个能够从指定的 URL 中下载文件的程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import os</span><br><span class="line">import os.path</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def download(url):</span><br><span class="line">    &#39;&#39;&#39;从指定的 URL 中下载文件并存储到当前目录</span><br><span class="line"></span><br><span class="line">    :arg url: 要下载的文件的 URL</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    req &#x3D; requests.get(url)</span><br><span class="line">    # 首先我们检查是否存在文件</span><br><span class="line">    if req.status_code &#x3D;&#x3D; 404:</span><br><span class="line">        print(&#39;No such file found at %s&#39; % url)</span><br><span class="line">        return</span><br><span class="line">    filename &#x3D; url.split(&#39;&#x2F;&#39;)[-1]</span><br><span class="line">    with open(filename, &#39;wb&#39;) as fobj:</span><br><span class="line">        fobj.write(req.content)</span><br><span class="line">    print(&quot;Download over.&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    url &#x3D; input(&#39;Enter a URL: &#39;)</span><br><span class="line">    download(url)</span><br></pre></td></tr></table></figure><p>你可能已经注意到了 if <strong>name</strong> == ‘<strong>main</strong>‘: 这条语句，它的作用是，只有在当前模块名为 <strong>main</strong> 的时候（即作为脚本执行的时候）才会执行此 if 块内的语句。换句话说，当此文件以模块的形式导入到其它文件中时，if 块内的语句并不会执行。</p><p>你可以将上面的程序修改的更友好写。举个例子，你可以检查当前目录是否已存在相同的文件名。os.path 模块可以帮助你完成这个。</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>你还记得 ls 命令吗，你可以传递不同的选项作为命令行参数。你也可以在你的程序里通过 argparse 模块做到这点，阅读这篇 文档 学习。</p><h3 id="TAB-补全"><a href="#TAB-补全" class="headerlink" title="TAB 补全"></a>TAB 补全</h3><p>首先创建一个文件：~/.pythonrc ，文件内写入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import rlcompleter, readline</span><br><span class="line">readline.parse_and_bind(&#39;tab: complete&#39;)</span><br><span class="line"></span><br><span class="line">history_file &#x3D; os.path.expanduser(&#39;~&#x2F;.python_history&#39;)</span><br><span class="line">readline.read_history_file(history_file)</span><br><span class="line"></span><br><span class="line">import atexit</span><br><span class="line">atexit.register(readline.write_history_file, history_file)</span><br></pre></td></tr></table></figure><p>下一步在 ~/.bashrc 文件中设置 PYTHONSTARTUP 环境变量指向这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export PYTHONSTARTUP&#x3D;~&#x2F;.pythonrc</span><br></pre></td></tr></table></figure><p>现在，从今以后每当你打开 bash shell，你将会有 TAB 补全和 Python 解释器中代码输入的历史记录。</p><p>要在当前 shell 中使用，source 这个 bashrc 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 类</title>
      <link href="2017/07/13/Python%20%E7%B1%BB/"/>
      <url>2017/07/13/Python%20%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>Python 类 </p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>在写你的第一个类之前，你应该知道它的语法。我们以下面这种方式定义类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class nameoftheclass(parent_class):</span><br><span class="line">    statement1</span><br><span class="line">    statement2</span><br><span class="line">    statement3</span><br></pre></td></tr></table></figure><p>在类的声明中你可以写任何 Python 语句，包括定义函数（在类中我们称为方法）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyClass(object):</span><br><span class="line">...     &quot;&quot;&quot;A simple example class&quot;&quot;&quot;</span><br><span class="line">...     i &#x3D; 12345</span><br><span class="line">...     def f(self):</span><br><span class="line">...         return &#39;hello world&#39;</span><br></pre></td></tr></table></figure><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a><strong>init</strong> 方法</h3><p>类的实例化使用函数符号。只要将类对象看作是一个返回新的类实例的无参数函数即可。例如（假设沿用前面的类）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; MyClass()</span><br></pre></td></tr></table></figure><p>以上创建了一个新的类实例并将该对象赋给局部变量 x。</p><p>这个实例化操作创建一个空的对象。很多类都倾向于将对象创建为有初始状态的。因此类可能会定义一个名为 <strong>init</strong>() 的特殊方法，像下面这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __init__(self):</span><br><span class="line">    self.data &#x3D; []</span><br></pre></td></tr></table></figure><p>类定义了 <strong>init</strong>() 方法的话，类的实例化操作会自动为新创建的类实例调用 <strong>init</strong>() 方法。所以在下例中，可以这样创建一个新的实例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; MyClass()</span><br></pre></td></tr></table></figure><p>当然，出于弹性的需要，<strong>init</strong>() 方法可以有参数。事实上，参数通过<strong>init</strong>() 传递到类的实例化操作上。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Complex:</span><br><span class="line">...     def __init__(self, realpart, imagpart):</span><br><span class="line">...         self.r &#x3D; realpart</span><br><span class="line">...         self.i &#x3D; imagpart</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; x &#x3D; Complex(3.0, -4.5)</span><br><span class="line">&gt;&gt;&gt; x.r, x.i</span><br><span class="line">(3.0, -4.5)</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>当一个类继承另一个类时，它将继承父类的所有功能（如变量和方法）。这有助于重用代码。</p><p>在下一个例子中我们首先创建一个叫做 Person 的类，然后创建两个派生类 Student 和 Teacher。当两个类都从 Person 类继承时，它们的类除了会有 Person 类的所有方法还会有自身用途的新方法和新变量。</p><h4 id="student-teacher-py"><a href="#student-teacher-py" class="headerlink" title="student_teacher.py"></a>student_teacher.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">class Person(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回具有给定名称的 Person 对象</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def get_details(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        返回包含人名的字符串</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(Person):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回 Student 对象，采用 name, branch, year 3 个参数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, branch, year):</span><br><span class="line">        Person.__init__(self, name)</span><br><span class="line">        self.branch &#x3D; branch</span><br><span class="line">        self.year &#x3D; year</span><br><span class="line"></span><br><span class="line">    def get_details(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        返回包含学生具体信息的字符串</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &quot;&#123;&#125; studies &#123;&#125; and is in &#123;&#125; year.&quot;.format(self.name, self.branch, self.year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Teacher(Person):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回 Teacher 对象，采用字符串列表作为参数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, name, papers):</span><br><span class="line">        Person.__init__(self, name)</span><br><span class="line">        self.papers &#x3D; papers</span><br><span class="line"></span><br><span class="line">    def get_details(self):</span><br><span class="line">        return &quot;&#123;&#125; teaches &#123;&#125;&quot;.format(self.name, &#39;,&#39;.join(self.papers))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person1 &#x3D; Person(&#39;Sachin&#39;)</span><br><span class="line">student1 &#x3D; Student(&#39;Kushal&#39;, &#39;CSE&#39;, 2005)</span><br><span class="line">teacher1 &#x3D; Teacher(&#39;Prashad&#39;, [&#39;C&#39;, &#39;C++&#39;])</span><br><span class="line"></span><br><span class="line">print(person1.get_details())</span><br><span class="line">print(student1.get_details())</span><br><span class="line">print(teacher1.get_details())</span><br></pre></td></tr></table></figure><p>在这个例子中你能看到我们是怎样在 Student 类和 Teacher 类中调用 Person 类的 <strong>init</strong> 方法。</p><p>我们也在 Student 类和 Teacher 类中重写了 Person 类的 get_details() 方法。</p><p>因此，当我们调用 student1 和 teacher1 的 get_details() 方法时，使用的是各自类（Student 和 Teacher）中定义的方法。</p><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>一个类可以继承自多个类，具有父类的所有变量和方法，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class MyClass(Parentclass1, Parentclass2,...):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        Parentclass1.__init__(self)</span><br><span class="line">        Parentclass2.__init__(self)</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h3 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h3><p>现在我们已经知道怎样创建对象，现在我们来看看怎样删除一个对象。我们使用关键字 del 来做到这个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;I love you&quot;</span><br><span class="line">&gt;&gt;&gt; del s</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#39;s&#39; is not defined</span><br></pre></td></tr></table></figure><p>del 实际上使对象的引用计数减少一，当对象的引用计数变成零的时候，垃圾回收器会删除这个对象。</p><h3 id="属性（attributes）读取方法"><a href="#属性（attributes）读取方法" class="headerlink" title="属性（attributes）读取方法"></a>属性（attributes）读取方法</h3><p>在 Python 里请不要使用属性（attributes）读取方法（getters 和 setters）。如果你之前学过其它语言（比如 Java），你可能会想要在你的类里面定义属性读取方法。请不要这样做，直接使用属性就可以了，就像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self, name):</span><br><span class="line">...         self.name &#x3D; name</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; std &#x3D; Student(&quot;Kushal Das&quot;)</span><br><span class="line">&gt;&gt;&gt; print(std.name)</span><br><span class="line">Kushal Das</span><br><span class="line">&gt;&gt;&gt; std.name &#x3D; &quot;Python&quot;</span><br><span class="line">&gt;&gt;&gt; print(std.name)</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><h3 id="Properties-装饰器"><a href="#Properties-装饰器" class="headerlink" title="Properties 装饰器"></a>Properties 装饰器</h3><p>你可能想要更精确的调整控制属性访问权限，你可以使用 @property 装饰器，@property 装饰器就是负责把一个方法变成属性调用的。</p><p>下面有个银行账号的例子，我们要确保没人能设置金额为负，并且有个只读属性 cny 返回换算人名币后的金额。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">class Account(object):</span><br><span class="line">    &quot;&quot;&quot;账号类,</span><br><span class="line">    amount 是美元金额.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, rate):</span><br><span class="line">        self.__amt &#x3D; 0</span><br><span class="line">        self.rate &#x3D; rate</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def amount(self):</span><br><span class="line">        &quot;&quot;&quot;账号余额（美元）&quot;&quot;&quot;</span><br><span class="line">        return self.__amt</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def cny(self):</span><br><span class="line">        &quot;&quot;&quot;账号余额（人名币）&quot;&quot;&quot;</span><br><span class="line">        return self.__amt * self.rate</span><br><span class="line"></span><br><span class="line">    @amount.setter</span><br><span class="line">    def amount(self, value):</span><br><span class="line">        if value &lt; 0:</span><br><span class="line">            print(&quot;Sorry, no negative amount in the account.&quot;)</span><br><span class="line">            return </span><br><span class="line">            # return 的作用：当输参数不符合条件，立即退出函数而不执行下面的赋值操作。</span><br><span class="line">        self.__amt &#x3D; value</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    acc &#x3D; Account(rate&#x3D;6.6) # 基于课程编写时的汇率</span><br><span class="line">    acc.amount &#x3D; 20</span><br><span class="line">    print(&quot;Dollar amount:&quot;, acc.amount)</span><br><span class="line">    print(&quot;In CNY:&quot;, acc.cny)</span><br><span class="line">    acc.amount &#x3D; -100</span><br><span class="line">    print(&quot;Dollar amount:&quot;, acc.amount)</span><br></pre></td></tr></table></figure><p>运行程序：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2046timestamp1471416421703.png/wm"></p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 挑战实验 -- 玩转函数</title>
      <link href="2017/07/12/Python3%20%E6%8C%91%E6%88%98%E5%AE%9E%E9%AA%8C%20--%20%E7%8E%A9%E8%BD%AC%E5%87%BD%E6%95%B0/"/>
      <url>2017/07/12/Python3%20%E6%8C%91%E6%88%98%E5%AE%9E%E9%AA%8C%20--%20%E7%8E%A9%E8%BD%AC%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>Python3 挑战实验 – 玩转函数</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>我们之前通过3个课程学习了 Python 的函数，文件处理，以及异常。这次我们通过一个简单的挑战实验来测试一下我们对之前代码的掌握程度。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>请在 /home/shiyanlou/Code写出一个 MinutesToHours.py 脚本文件，实现一个函数 Hours()，将用户输入的 分钟数 转化为 小时数和分钟数，并要求小时数尽量大。讲结果以 XX H, XX M 的形式打印出来。(注意打印格式中的空格)</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>用户能够通过命令行输入分钟数，程序需要打印出相应的小时数和分钟数<br>如果用户输入的是一个负值，程序需要报错 ValueError<br>需要进行 try…except 操作来控制异常。如果异常，在屏幕上打印打印出 ValueError： Input number cannot be negative 提示用户输入的值有误</p><p>举例：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid122063labid2724timestamp1490758246398.png/wm"></p><h3 id="提示语"><a href="#提示语" class="headerlink" title="提示语"></a>提示语</h3><ul><li>import sys</li><li>raise语句</li><li>try…except 语句</li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>异常</li><li>文件处理</li><li>if-else</li></ul><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>实验楼团队</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def Hours(num):</span><br><span class="line">    if num &gt;&#x3D; 0:</span><br><span class="line">        hours, minutes &#x3D; divmod(n, 60)</span><br><span class="line">        print(hours,&#39;H,&#39;, minutes, &#39;M&#39;)</span><br><span class="line">    else:</span><br><span class="line">        raise ValueError(&#39;Input number cannot be negative&#39;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    n &#x3D; int(sys.argv[1])</span><br><span class="line">    try:</span><br><span class="line">        Hours(n)</span><br><span class="line">    except ValueError:</span><br><span class="line">        print(&#39;ValueError: Input number cannot be negative&#39;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 异常</title>
      <link href="2017/07/12/Python%20%E5%BC%82%E5%B8%B8/"/>
      <url>2017/07/12/Python%20%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>Python 异常</p><p>在程序执行过程中发生的任何错误都是异常。每个异常显示一些相关的错误信息，比如你在 Python3 中使用 Python2 独有的语法就会发生 <code>SyntaxError</code>：</p><p>不小心在行首多打了一个空格就会产生 <code>IndentationError</code>：</p><h3 id="NameError"><a href="#NameError" class="headerlink" title="NameError"></a>NameError</h3><p>当有人试图访问一个未定义的变量则会发生 NameError。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(kushal)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#39;kushal&#39; is not defined</span><br></pre></td></tr></table></figure><p>最后一行包含了错误的详细信息，其余行显示它是如何发生（或什么引起该异常）的详细信息</p><h3 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h3><p>TypeError 也是一种经常出现的异常。当操作或函数应用于不适当类型的对象时引发，一个常见的例子是对整数和字符串做加法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(1 + &quot;kushal&quot;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;</span><br></pre></td></tr></table></figure><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>我们使用 try…except 块来处理任意异常。基本的语法像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    statements to be inside try clause</span><br><span class="line">    statement2</span><br><span class="line">    statement3</span><br><span class="line">    ...</span><br><span class="line">except ExceptionName:</span><br><span class="line">    statements to evaluated in case of ExceptionName happens</span><br></pre></td></tr></table></figure><p>它以如下方式工作：</p><ul><li>首先，执行 try 子句 （在 try 和 except 关键字之间的部分）。</li><li></li><li>如果没有异常发生，except 子句 在 try 语句执行完毕后就被忽略了。</li><li></li><li>如果在 try 子句执行过程中发生了异常，那么该子句其余的部分就会被忽略。</li><li></li><li>如果异常匹配于 except 关键字后面指定的异常类型，就执行对应的 except 子句。然后继续执行 try 语句之后的代码。</li><li></li><li>如果发生了一个异常，在 except 子句中没有与之匹配的分支，它就会传递到上一级 try 语句中。</li><li></li><li>如果最终仍找不到对应的处理语句，它就成为一个 未处理异常，终止程序运行，显示提示信息。 </li></ul><p>下面的例子展示了这些情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def get_number():</span><br><span class="line">...     &quot;Returns a float number&quot;</span><br><span class="line">...     number &#x3D; float(input(&quot;Enter a float number: &quot;))</span><br><span class="line">...     return number</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...     try:</span><br><span class="line">...         print(get_number())</span><br><span class="line">...     except ValueError:</span><br><span class="line">...         print(&quot;You entered a wrong value.&quot;)</span><br><span class="line">...</span><br><span class="line">Enter a float number: 45.0</span><br><span class="line">45.0</span><br><span class="line">Enter a float number: 24,0</span><br><span class="line">You entered a wrong value.</span><br><span class="line">Enter a float number: Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 3, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 3, in get_number</span><br><span class="line">KeyboardInterrupt</span><br></pre></td></tr></table></figure><p>首先我输入了一个合适的浮点值，解释器返回输出这个值。</p><p>然后我输入以逗号分隔的值，抛出 ValueError 异常，except 子句捕获之，并且打印出错误信息。</p><p>第三次我按下 Ctrl + C ，导致了 KeyboardInterrupt 异常发生，这个异常并未在 except 块中捕获，因此程序执行被中止。</p><p>一个空的 except 语句能捕获任何异常。阅读下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">...     input() # 输入的时候按下 Ctrl + C 产生 KeyboardInterrupt</span><br><span class="line">... except:</span><br><span class="line">...     print(&quot;Unknown Exception&quot;)</span><br><span class="line">...</span><br><span class="line">Unknown Exception</span><br></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>使用 raise 语句抛出一个异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; raise ValueError(&quot;A value error happened.&quot;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: A value error happened.</span><br></pre></td></tr></table></figure><p>我们可以捕获这些异常就像任何其它普通异常一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">...     raise ValueError(&quot;A value error happened.&quot;)</span><br><span class="line">... except ValueError:</span><br><span class="line">...     print(&quot;ValueError in our code.&quot;)</span><br><span class="line">...</span><br><span class="line">ValueError in our code.</span><br></pre></td></tr></table></figure><h3 id="定义清理行为"><a href="#定义清理行为" class="headerlink" title="定义清理行为"></a>定义清理行为</h3><p>try 语句还有另一个可选的 finally 子句，目的在于定义在任何情况下都一定要执行的功能。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">...     raise KeyboardInterrupt</span><br><span class="line">... finally:</span><br><span class="line">...     print(&#39;Goodbye, world!&#39;)</span><br><span class="line">...</span><br><span class="line">Goodbye, world!</span><br><span class="line">KeyboardInterrupt</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in ?</span><br></pre></td></tr></table></figure><p>不管有没有发生异常，finally 子句 在程序离开 try 后都一定会被执行。当 try 语句中发生了未被 except 捕获的异常（或者它发生在 except 或 else 子句中），在 finally 子句执行完后它会被重新抛出。</p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 文件处理</title>
      <link href="2017/07/11/Python%20%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
      <url>2017/07/11/Python%20%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Python 文件处理</p><h3 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h3><p>我们使用 open() 函数打开文件。它需要两个参数，第一个参数是文件路径或文件名，第二个是文件的打开模式。模式通常是下面这样的：</p><ul><li>“r”，以只读模式打开，你只能读取文件但不能编辑/删除文件的任何内容</li><li>“w”，以写入模式打开，如果文件存在将会删除里面的所有内容，然后打开这个文件进行写入</li><li>“a”，以追加模式代开，写入到文件中的任何数据将自动添加到末尾</li></ul><p>默认的模式为只读模式，也就是说如果你不提供任何模式，open() 函数将会以只读模式打开文件。我们将实验打开一个文件，不过要准备实验材料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;596&#x2F;sample.txt</span><br></pre></td></tr></table></figure><p>然后进入 Python3 打开这个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fobj &#x3D; open(&quot;sample.txt&quot;)</span><br><span class="line">&gt;&gt;&gt; fobj</span><br><span class="line">&lt;open file &#39;sample.txt&#39;, mode &#39;r&#39; at 0xb7f2d968&gt;</span><br></pre></td></tr></table></figure><h3 id="文件关闭"><a href="#文件关闭" class="headerlink" title="文件关闭"></a>文件关闭</h3><p>打开文件后我们应该总是关闭文件。我们使用方法 close() 完成这个操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fobj.close()</span><br></pre></td></tr></table></figure><p>始终确保你显式关闭每个打开的文件，一旦它的工作完成你没有任何理由保持打开文件。因为程序能打开的文件数量是有上限的。如果你超出了这个限制，没有任何可靠的方法恢复，因此程序可能会崩溃。每个打开的文件关联的数据结构（文件描述符/句柄/文件锁…）都要消耗一些主存资源。因此如果许多打开的文件没用了你可以结束大量的内存浪费，并且文件打开时始终存在数据损坏或丢失的可能性。</p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>使用 read() 方法一次性读取整个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fobj &#x3D; open(&quot;sample.txt&quot;)</span><br><span class="line">&gt;&gt;&gt; fobj.read()</span><br><span class="line">&#39;I love Python\nI love shiyanlou\n&#39;</span><br><span class="line">&gt;&gt;&gt; fobj.close()</span><br></pre></td></tr></table></figure><p>如果你再一次调用 read()，它会返回空字符串因为它已经读取完整个文件。</p><p>read(size) 有一个可选的参数 size，用于指定字符串长度。如果没有指定 size 或者指定为负数，就会读取并返回整个文件。当文件大小为当前机器内存两倍时，就会产生问题。反之，会尽可能按比较大的 size 读取和返回数据。</p><p>readline() 能帮助你每次读取文件的一行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fobj &#x3D; open(&quot;sample.txt&quot;)</span><br><span class="line">&gt;&gt;&gt; fobj.readline()</span><br><span class="line">&#39;I love Python\n&#39;</span><br><span class="line">&gt;&gt;&gt; fobj.readline()</span><br><span class="line">&#39;I love shiyanlou\n&#39;</span><br><span class="line">&gt;&gt;&gt; fobj.close()</span><br></pre></td></tr></table></figure><p>使用 readlines() 方法读取所有行到一个列表中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fobj &#x3D; open(&#39;sample.txt&#39;)</span><br><span class="line">&gt;&gt;&gt; fobj.readlines()</span><br><span class="line">[&#39;I love Python\n&#39;, &#39;I love shiyanlou\n&#39;]</span><br><span class="line">&gt;&gt;&gt; fobj.close()</span><br></pre></td></tr></table></figure><p>你可以循环遍历文件对象来读取文件中的每一行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fobj &#x3D; open(&#39;sample.txt&#39;)</span><br><span class="line">&gt;&gt;&gt; for x in fobj:</span><br><span class="line">...     print(x, end &#x3D; &#39;&#39;)</span><br><span class="line">... </span><br><span class="line">I love Python</span><br><span class="line">I love shiyanlou</span><br><span class="line">&gt;&gt;&gt; fobj.close()</span><br></pre></td></tr></table></figure><p>让我们写一个程序，这个程序接受用户输入的字符串作为将要读取的文件的文件名，并且在屏幕上打印文件内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">name &#x3D; input(&quot;Enter the file name: &quot;)</span><br><span class="line">fobj &#x3D; open(name)</span><br><span class="line">print(fobj.read())</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;test.py</span><br><span class="line">Enter the file name: sample.txt</span><br><span class="line">I love Python</span><br><span class="line">I love shiyanlou</span><br></pre></td></tr></table></figure><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><p>让我们通过 write() 方法打开一个文件然后我们随便写入一些文本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fobj &#x3D; open(&quot;ircnicks.txt&quot;, &#39;w&#39;)</span><br><span class="line">&gt;&gt;&gt; fobj.write(&#39;powerpork\n&#39;)</span><br><span class="line">&gt;&gt;&gt; fobj.write(&#39;indrag\n&#39;)</span><br><span class="line">&gt;&gt;&gt; fobj.write(&#39;mishti\n&#39;)</span><br><span class="line">&gt;&gt;&gt; fobj.write(&#39;sankarshan&#39;)</span><br><span class="line">&gt;&gt;&gt; fobj.close()</span><br></pre></td></tr></table></figure><p>现在读取我们刚刚创建的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fobj &#x3D; open(&#39;ircnicks.txt&#39;)</span><br><span class="line">&gt;&gt;&gt; s &#x3D; fobj.read()</span><br><span class="line">&gt;&gt;&gt; fobj.close()</span><br><span class="line">&gt;&gt;&gt; print(s)</span><br><span class="line">powerpork</span><br><span class="line">indrag</span><br><span class="line">mishti</span><br><span class="line">sankarshan</span><br></pre></td></tr></table></figure><h3 id="文件操作示例程序"><a href="#文件操作示例程序" class="headerlink" title="文件操作示例程序"></a>文件操作示例程序</h3><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><p>在这个例子里我们拷贝给定的文本文件到另一个给定的文本文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">sys.argv 获得所有输入程序的外部参数的列表</span><br><span class="line"></span><br><span class="line">Example：</span><br><span class="line">$ .&#x2F;copyfile.py sample.txt sample2.txt</span><br><span class="line">Result:</span><br><span class="line">sys.argv &#x3D;&#x3D; [&#39;copyfile.py&#39;, &#39;sample.txt&#39;, &#39;sample2.txt&#39;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">if len(sys.argv) &lt; 3:</span><br><span class="line">    print(&quot;Wrong parameter&quot;)</span><br><span class="line">    print(&quot;.&#x2F;copyfile.py file1 file2&quot;)</span><br><span class="line">    sys.exit(1)</span><br><span class="line">f1 &#x3D; open(sys.argv[1])</span><br><span class="line">s &#x3D; f1.read()</span><br><span class="line">f1.close()</span><br><span class="line">f2 &#x3D; open(sys.argv[2], &#39;w&#39;)</span><br><span class="line">f2.write(s)</span><br><span class="line">f2.close()</span><br></pre></td></tr></table></figure><p>你可以看到我们在这里使用了一个新模块 sys。sys.argv 包含所有命令行参数。这个程序的功能完全可以使用 shell 的 cp 命令替代：在 cp 后首先输入被拷贝的文件的文件名，然后输入新文件名。</p><p>sys.argv 的第一个值是命令自身的名字，下面这个程序打印命令行参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import sys</span><br><span class="line">print(&quot;First value&quot;, sys.argv[0])</span><br><span class="line">print(&quot;All values&quot;)</span><br><span class="line">for i, x  in enumerate(sys.argv):</span><br><span class="line">    print(i, x)</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;argvtest.py Hi there</span><br><span class="line">First value .&#x2F;argvtest.py</span><br><span class="line">All values</span><br><span class="line">0 .&#x2F;argvtest.py</span><br><span class="line">1 Hi</span><br><span class="line">2 there</span><br></pre></td></tr></table></figure><p>这里我们用到了一个新函数 enumerate(iterableobject)，在序列中循环时，索引位置和对应值可以使用它同时得到。</p><h4 id="文本文件相关信息统计"><a href="#文本文件相关信息统计" class="headerlink" title="文本文件相关信息统计"></a>文本文件相关信息统计</h4><p>让我们试着编写一个程序，对任意给定文本文件中的制表符、行、空格进行计数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_file(path):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    分析给定文本文件，返回其空格、制表符、行的相关信息</span><br><span class="line"></span><br><span class="line">    :arg path: 要分析的文本文件的路径</span><br><span class="line"></span><br><span class="line">    :return: 包含空格数、制表符数、行数的元组</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    fd &#x3D; open(path)</span><br><span class="line">    i &#x3D; 0</span><br><span class="line">    spaces &#x3D; 0</span><br><span class="line">    tabs &#x3D; 0</span><br><span class="line">    # i &#x3D; spaces &#x3D; tabs &#x3D; 0 注意和 C 语言区分  i, spaces, tabs &#x3D; 0 是错误写法</span><br><span class="line">    for i,line in enumerate(fd):</span><br><span class="line">        spaces +&#x3D; line.count(&#39; &#39;)</span><br><span class="line">        tabs +&#x3D; line.count(&#39;\t&#39;)</span><br><span class="line">    # 现在关闭打开的文件</span><br><span class="line">    fd.close()</span><br><span class="line"></span><br><span class="line">    # 以元组形式返回结果</span><br><span class="line">    return spaces, tabs, i + 1</span><br><span class="line"></span><br><span class="line">def main(path):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    函数用于打印文件分析结果</span><br><span class="line"></span><br><span class="line">    :arg path: 要分析的文本文件的路径</span><br><span class="line">    :return: 若文件存在则为 True，否则 False</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if os.path.exists(path):</span><br><span class="line">        spaces, tabs, lines &#x3D; parse_file(path)</span><br><span class="line">        print(&quot;Spaces &#123;&#125;. tabs &#123;&#125;. lines &#123;&#125;&quot;.format(spaces, tabs, lines))</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    if len(sys.argv) &gt; 1:</span><br><span class="line">        main(sys.argv[1])</span><br><span class="line">    else:</span><br><span class="line">        sys.exit(-1)</span><br><span class="line">    sys.exit(0)</span><br></pre></td></tr></table></figure><p>你可以看到程序有两个函数，main() 和 parse_file() ，parse_file 函数真正的分析文件并返回结果，然后在 main() 函数里打印结果。通过分割代码到一些更小的单元（函数）里，能帮助我们组织代码库并且也更容易为函数编写测试用例。</p><h3 id="使用-with-语句"><a href="#使用-with-语句" class="headerlink" title="使用 with 语句"></a>使用 with 语句</h3><p>在实际情况中，我们应该尝试使用 with 语句处理文件对象，它会文件用完后会自动关闭，就算发生异常也没关系。它是 try-finally 块的简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; with open(&#39;sample.txt&#39;) as fobj:</span><br><span class="line">...     for line in fobj:</span><br><span class="line">...         print(line, end &#x3D; &#39;&#39;)</span><br><span class="line">... </span><br><span class="line">I love Python</span><br><span class="line">I love shiyanlou</span><br></pre></td></tr></table></figure><h3 id="实现-lscpu-命令"><a href="#实现-lscpu-命令" class="headerlink" title="实现 lscpu 命令"></a>实现 lscpu 命令</h3><p>在 Linux 下你可以使用 lscpu 命令来查看当前电脑的 CPU 相关信息，如下图：</p><p><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2044timestamp1471404738283.png/wm"></p><p>实际上 lscpu 命令是读取 /proc/cpuinfo 这个文件的信息并美化输出，现在你可以自己写一个 Python 程序以只读模式读取 /proc/cpuinfo 这个文件，然后打印出来，这样你就有自己的一个 Python 版本的 lscpu 命令了 :）</p><p>记得一行一行的读取文本文件，不要一次性读取整个文件，因为有时候你读取的文件可能比可用内存还大。</p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 函数</title>
      <link href="2017/07/11/Python%20%E5%87%BD%E6%95%B0/"/>
      <url>2017/07/11/Python%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>Python 函数</p><h3 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h3><p>我们使用关键字 def 来定义一个函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def functionname(params):</span><br><span class="line">    statement1</span><br><span class="line">    statement2</span><br></pre></td></tr></table></figure><p>让我们编写一个函数，它将接受两个整数作为输入，然后返回总和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def sum(a, b):</span><br><span class="line">...     return a + b</span><br></pre></td></tr></table></figure><p>第二行有个 return 关键字，我们把 a + b 的值返回给调用者。</p><p>你必须像下面这样调用这个函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res &#x3D; sum(234234, 34453546464)</span><br><span class="line">&gt;&gt;&gt; res</span><br><span class="line">34453780698L</span><br></pre></td></tr></table></figure><p>还记得我们上一个实验讲过的回文检查程序么，让我们编写一个函数来检查给出的字符串是否为回文，然后返回 True 或者 False。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">def palindrome(s):</span><br><span class="line">    return s &#x3D;&#x3D; s[::-1]</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    s &#x3D; input(&quot;Enter a string: &quot;)</span><br><span class="line">    if palindrome(s):</span><br><span class="line">        print(&quot;Yay a palindrome&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;Oh no, not a palindrome&quot;)</span><br></pre></td></tr></table></figure><h3 id="局域或全局变量"><a href="#局域或全局变量" class="headerlink" title="局域或全局变量"></a>局域或全局变量</h3><p>我们通过两个例子来弄明白局域或全局变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">def change():</span><br><span class="line">    a &#x3D; 90</span><br><span class="line">    print(a)</span><br><span class="line">a &#x3D; 9</span><br><span class="line">print(&quot;Before the function call &quot;, a)</span><br><span class="line">print(&quot;inside change function&quot;, end&#x3D;&#39; &#39;)</span><br><span class="line">change()</span><br><span class="line">print(&quot;After the function call &quot;, a)</span><br></pre></td></tr></table></figure><p>首先我们对 a 赋值 9，然后调用更改函数，这个函数里我们对 a 赋值 90，然后打印 a 的值。调用函数后我们再次打印 a 的值。当我们在函数里写 a = 90 时，它实际上创建了一个新的名为 a 的变量，这个变量只在函数里可用，并且会在函数完成时销毁。所以即使这两个变量的名字都相同，但事实上他们并不是同一个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">def change():</span><br><span class="line">    global a</span><br><span class="line">    a &#x3D; 90</span><br><span class="line">    print(a)</span><br><span class="line">a &#x3D; 9</span><br><span class="line">print(&quot;Before the function call &quot;, a)</span><br><span class="line">print(&quot;inside change function&quot;, end&#x3D;&#39; &#39;)</span><br><span class="line">change()</span><br><span class="line">print(&quot;After the function call &quot;, a)</span><br></pre></td></tr></table></figure><p>这里通过关键字 global 来告诉 a 的定义是全局的，因此在函数内部更改了 a 的值，函数外 a 的值也实际上更改了。</p><h3 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h3><p>函数的参数变量可以有默认值，也就是说如果我们对指定的参数变量没有给出任何值则会赋其默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def test(a , b&#x3D;-99):</span><br><span class="line">...     if a &gt; b:</span><br><span class="line">...         return True</span><br><span class="line">...     else:</span><br><span class="line">...         return False</span><br></pre></td></tr></table></figure><p>在上面的例子里，我们在函数的参数列表写出 b = -99。这表示如果调用者未给出 b 的值，那么 b 的值默认为 -99。这是一个关于默认参数的非常简单的例子。</p><p>你可以通过调用函数测试代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; test(12, 23)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; test(12)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>有两个非常重要的地方，第一个是具有默认值的参数后面不能再有普通参数，比如 f(a,b=90,c) 就是错误的。</p><p>第二个是默认值只被赋值一次，因此如果默认值是任何可变对象时会有所不同，比如列表、字典或大多数类的实例。例如，下面的函数在后续调用过程中会累积（前面）传给它的参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def f(a, data&#x3D;[]):</span><br><span class="line">...     data.append(a)</span><br><span class="line">...     return data</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(f(1))</span><br><span class="line">[1]</span><br><span class="line">&gt;&gt;&gt; print(f(2))</span><br><span class="line">[1, 2]</span><br><span class="line">&gt;&gt;&gt; print(f(3))</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure><p>要避免这个问题，你可以像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def f(a, data&#x3D;None):</span><br><span class="line">...     if data is None:</span><br><span class="line">...         data &#x3D; []</span><br><span class="line">...     data.append(a)</span><br><span class="line">...     return data</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(f(1))</span><br><span class="line">[1]</span><br><span class="line">&gt;&gt;&gt; print(f(2))</span><br><span class="line">[2]</span><br></pre></td></tr></table></figure><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>函数可以通过关键字参数的形式来调用，形如 keyword = value。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def func(a, b&#x3D;5, c&#x3D;10):</span><br><span class="line">...     print(&#39;a is&#39;, a, &#39;and b is&#39;, b, &#39;and c is&#39;, c)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; func(12, 24)</span><br><span class="line">a is 12 and b is 24 and c is 10</span><br><span class="line">&gt;&gt;&gt; func(12, c &#x3D; 24)</span><br><span class="line">a is 12 and b is 5 and c is 24</span><br><span class="line">&gt;&gt;&gt; func(b&#x3D;12, c &#x3D; 24, a &#x3D; -1)</span><br><span class="line">a is -1 and b is 12 and c is 24</span><br></pre></td></tr></table></figure><p>在上面的例子中你能看见调用函数时使用了变量名，比如 func(12,c = 24)，这样我们将 24 赋给 c 且 b 具有默认值。</p><h3 id="强制关键字参数"><a href="#强制关键字参数" class="headerlink" title="强制关键字参数"></a>强制关键字参数</h3><p>我们也能将函数的参数标记为只允许使用关键字参数。用户调用函数时将只能对每一个参数使用相应的关键字参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def hello(*, name&#x3D;&#39;User&#39;):</span><br><span class="line">...     print(&quot;Hello&quot;, name)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; hello(&#39;shiyanlou&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: hello() takes 0 positional arguments but 1 was given</span><br><span class="line">&gt;&gt;&gt; hello(name&#x3D;&#39;shiyanlou&#39;)</span><br><span class="line">Hello shiyanlou</span><br></pre></td></tr></table></figure><h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><p>在 Python 里我们使用文档字符串（docstrings）来说明如何使用代码，这在交互模式非常有用，也能用于自动创建文档。下面我们来看看使用文档字符串的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">def longest_side(a, b):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Function to find the length of the longest side of a right triangle.</span><br><span class="line"></span><br><span class="line">    :arg a: Side a of the triangle</span><br><span class="line">    :arg b: Side b of the triangle</span><br><span class="line"></span><br><span class="line">    :return: Length of the longest side c as float</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return math.sqrt(a*a + b*b)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    print(longest_side.__doc__)</span><br><span class="line">    print(longest_side(4,5))</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数（Higher-order function）或仿函数（functor）是内部至少含有一个以下步骤的函数：</p><p>使用一个或多个函数作为参数<br>返回另一个函数作为输出<br>Python 里的任何函数都可以作为高阶函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def high(func, value):</span><br><span class="line">...     return func(value)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; lst &#x3D; high(dir, int)</span><br><span class="line">&gt;&gt;&gt; print(lst[-3:])</span><br><span class="line">[&#39;imag&#39;, &#39;numerator&#39;, &#39;real&#39;]</span><br></pre></td></tr></table></figure><h4 id="map-函数"><a href="#map-函数" class="headerlink" title="map 函数"></a>map 函数</h4><p>map 是一个在 Python 里非常有用的高阶函数。它接受一个函数和一个序列（迭代器）作为输入，然后对序列（迭代器）的每一个值应用这个函数，返回一个序列（迭代器），其包含应用函数后的结果。</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; lst &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; def square(num):</span><br><span class="line">...     &quot;返回所给数字的平方.&quot;</span><br><span class="line">...     return num * num</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(list(map(square, lst)))</span><br><span class="line">[1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 挑战：字符串操作</title>
      <link href="2017/07/11/Python%20%E6%8C%91%E6%88%98%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>2017/07/11/Python%20%E6%8C%91%E6%88%98%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Python 挑战：字符串操作</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>我们之前通过4个课程学习了一些基本的 Python 3 知识。现在我们就来用一个挑战实验来巩固一下我们的实验效果。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>在/home/shiyanlou/Code创建一个 名为 FindDigits.py 的Python 脚本，请读取一串字符串并且把其中所有的数字组成一个新的字符串，并且打印出来。我们提供的字符串可以通过在命令行中输入如下代码来获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;790&#x2F;String.txt</span><br></pre></td></tr></table></figure><p>P.S 如果大家想要通过 open() 函数来获取 String.txt 中的字符串，请在 open() 函数中写下 String.txt 的绝对路径，如 file = open(‘/home/shiyanlou/Code/String.txt’)，否则系统测试会通不过 :(</p><h3 id="提示语"><a href="#提示语" class="headerlink" title="提示语"></a>提示语</h3><p>使用循环来访问字符串中的单个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isdigit()</span><br></pre></td></tr></table></figure><p>记得把新的字符串打印出来，print()函数记得要加括号（这里是Python3 的主场！敲黑板）</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>循环</li><li>字符串操作</li></ul><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>实验楼团队</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">with open(&#39;&#x2F;home&#x2F;shiyanlou&#x2F;Code&#x2F;String.txt&#39;) as f:</span><br><span class="line">    s &#x3D; f.read()</span><br><span class="line"></span><br><span class="line">numstr &#x3D; []</span><br><span class="line">for c in s:</span><br><span class="line">    if c.isdigit():</span><br><span class="line">        numstr.append(c)</span><br><span class="line"></span><br><span class="line">new_str &#x3D; &#39;&#39;.join(numstr)</span><br><span class="line">print(new_str)</span><br></pre></td></tr></table></figure><p>使用列表推导式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">with open(&#39;&#x2F;home&#x2F;shiyanlou&#x2F;Code&#x2F;String.txt&#39;) as f:</span><br><span class="line">    s &#x3D; f.read()</span><br><span class="line">print(&#39;&#39;.join([c for c in s if c.isdigit()]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 字符串</title>
      <link href="2017/07/11/Python%20%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2017/07/11/Python%20%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>Python 字符串</p><p>可以通过几种不同的方式表示字符串。如单引号（’…’）或双引号（”…”）。下面的例子能帮助你更好的理解字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;I am Chinese&quot;</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#39;I am Chinese&#39;</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &#39;I am Chinese&#39;</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &quot;Here is a line \</span><br><span class="line">... split in two lines&quot;</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#39;Here is a line split in two lines&#39;</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &quot;Here is a line \n split in two lines&quot;</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#39;Here is a line \n split in two lines&#39;</span><br><span class="line">&gt;&gt;&gt; print(s)</span><br><span class="line">Here is a line</span><br><span class="line"> split in two lines</span><br></pre></td></tr></table></figure><p>如果你想要分几行输入字符串，并且希望行尾的换行符自动包含到字符串当中，可以使用三对引号：”””…””” 或 ‘’’…’’’ 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;&quot;&quot;\</span><br><span class="line">... Usage: thingy [OPTIONS]</span><br><span class="line">...      -h                        Display this usage message</span><br><span class="line">...      -H hostname               Hostname to connect to</span><br><span class="line">... &quot;&quot;&quot;)</span><br><span class="line">Usage: thingy [OPTIONS]</span><br><span class="line">     -h                        Display this usage message</span><br><span class="line">     -H hostname               Hostname to connect to</span><br></pre></td></tr></table></figure><h3 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h3><p>每一个字符串对象都有几个可用的内建方法，我们已经使用过一些了，比如 s.split()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;shi yan lou&quot;</span><br><span class="line">&gt;&gt;&gt; s.title()</span><br><span class="line">&#39;Shi Yan Lou&#39;</span><br></pre></td></tr></table></figure><p>方法 title() 返回字符串的标题版本，即单词首字母大写其余字母小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; z &#x3D; s.upper()</span><br><span class="line">&gt;&gt;&gt; z</span><br><span class="line">&#39;SHI YAN LOU&#39;</span><br><span class="line">&gt;&gt;&gt; z.lower()</span><br><span class="line">&#39;shi yan lou&#39;</span><br></pre></td></tr></table></figure><p>方法 upper() 返回字符串全部大写的版本，反之 lower() 返回字符串的全部小写版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;I am A pRoGraMMer&quot;</span><br><span class="line">&gt;&gt; s.swapcase()</span><br><span class="line">&#39;i AM a PrOgRAmmER&#39;</span><br></pre></td></tr></table></figure><p>方法 swapcase() 返回字符串大小写交换后的版本 :）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;jdwb 2323bjb&quot;</span><br><span class="line">&gt;&gt;&gt; s.isalnum()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &quot;jdwb2323bjb&quot;</span><br><span class="line">&gt;&gt;&gt; s.isalnum()</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>方法 isalnum() 检查所有字符是否为字母数字，上面的代码中第一行的字符串 s 中包含空格字符，所以返回 False。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;SankarshanSir&quot;</span><br><span class="line">&gt;&gt;&gt; s.isalpha()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &quot;Sankarshan Sir&quot;</span><br><span class="line">&gt;&gt;&gt; s.isalpha()</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>方法 isalpha() 检查字符串之中是否只有字母。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;1234&quot;</span><br><span class="line">&gt;&gt;&gt; s.isdigit() # 检查字符串是否所有字符为数字</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &quot;ShiYanLou is coming&quot;</span><br><span class="line">&gt;&gt;&gt; s.islower() # 检查字符串是否所有字符为小写</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &quot;Shiyanlou Is Coming&quot;</span><br><span class="line">&gt;&gt;&gt; s.istitle() # To 检查字符串是否为标题样式</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &quot;CHINA&quot;</span><br><span class="line">&gt;&gt;&gt; s.isupper() # 检查字符串是否所有字符为大写</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>我们可以使用 split() 分割任意字符串，split() 允许有一个参数，用来指定字符串以什么字符分隔（默认为 “ “），它返回一个包含所有分割后的字符串的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;We all love Python&quot;</span><br><span class="line">&gt;&gt;&gt; s.split()</span><br><span class="line">[&#39;We&#39;, &#39;all&#39;, &#39;love&#39;, &#39;Python&#39;]</span><br><span class="line">&gt;&gt;&gt; x &#x3D; &quot;shiyanlou:is:waiting&quot;</span><br><span class="line">&gt;&gt;&gt; x.split(&#39;:&#39;)</span><br><span class="line">[&#39;shiyanlou&#39;, &#39;is&#39;, &#39;waiting&#39;]</span><br></pre></td></tr></table></figure><p>相反的，方法 join() 使用指定字符连接多个字符串，它需要一个包含字符串元素的列表作为输入然后连接列表内的字符串元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;-&quot;.join(&quot;GNU&#x2F;Linux is great&quot;.split())</span><br><span class="line">&#39;GNU&#x2F;Linux-is-great&#39;</span><br><span class="line">在上面的例子中，我们基于空格 &quot; &quot; 分割字符串 &quot;GNU&#x2F;Linux is great&quot;，然后用 &quot;-&quot; 连接它们。</span><br></pre></td></tr></table></figure><h3 id="字符串剥离"><a href="#字符串剥离" class="headerlink" title="字符串剥离"></a>字符串剥离</h3><p>字符串有几个进行剥离操作的方法。最简单的一个是 strip(chars)，用来剥离字符串首尾中指定的字符，它允许有一个字符串参数，这个参数为剥离哪些字符提供依据。不指定参数则默认剥离掉首尾的空格和换行符，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;  a bc\n &quot;</span><br><span class="line">&gt;&gt;&gt; s.strip()</span><br><span class="line">&#39;a bc&#39;</span><br></pre></td></tr></table></figure><p>你可以使用 lstrip(chars) 或 rstrip(chars) 只对字符串左或右剥离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;www.foss.in&quot; </span><br><span class="line">&gt;&gt;&gt; s.lstrip(&quot;cwsd.&quot;) #删除在字符串左边出现的&#39;c&#39;,&#39;w&#39;,&#39;s&#39;,&#39;d&#39;,&#39;.&#39;字符</span><br><span class="line">&#39;foss.in&#39;</span><br><span class="line">&gt;&gt;&gt; s.rstrip(&quot;cnwdi.&quot;) #删除在字符串右边出现的&#39;c&#39;,&#39;n&#39;,&#39;w&#39;,&#39;d&#39;,&#39;i&#39;,&#39;.&#39;字符</span><br><span class="line">&#39;www.foss&#39;</span><br></pre></td></tr></table></figure><h3 id="文本搜索"><a href="#文本搜索" class="headerlink" title="文本搜索"></a>文本搜索</h3><p>字符串有一些方法能够帮助你搜索字符串里的文本或子字符串。下面给出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &quot;faulty for a reason&quot;</span><br><span class="line">&gt;&gt;&gt; s.find(&quot;for&quot;)</span><br><span class="line">7</span><br><span class="line">&gt;&gt;&gt; s.find(&quot;fora&quot;)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; s.startswith(&quot;fa&quot;) # 检查字符串是否以 fa 开头</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; s.endswith(&quot;reason&quot;) # 检查字符串是否以 reason 结尾</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>find() 能帮助你找到第一个匹配的子字符串，没有找到则返回 -1。</p><h3 id="回文检查"><a href="#回文检查" class="headerlink" title="回文检查"></a>回文检查</h3><p>回文是一种无论从左还是从右读都一样的字符序列。比如 “madam”。在这个例子中，我们检查用户输入的字符串是否是回文，并输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">s &#x3D; input(&quot;Please enter a string: &quot;)</span><br><span class="line">z &#x3D; s[::-1]</span><br><span class="line">if s &#x3D;&#x3D; z:</span><br><span class="line">    print(&quot;The string is a palindrome&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;The string is not a palindrome&quot;)</span><br></pre></td></tr></table></figure><h3 id="单词计数"><a href="#单词计数" class="headerlink" title="单词计数"></a>单词计数</h3><p>在这个例子中我们对用户输入的一行文本进行单词计数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">s &#x3D; input(&quot;Enter a line: &quot;)</span><br><span class="line">print(&quot;The number of words in the line are %d&quot; % (len(s.split(&quot; &quot;))))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据结构</title>
      <link href="2017/07/10/Python%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2017/07/10/Python%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Python 数据结构</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [23, 45, 1, -3434, 43624356, 234]</span><br><span class="line">&gt;&gt;&gt; a.append(45)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[23, 45, 1, -3434, 43624356, 234, 45]</span><br></pre></td></tr></table></figure><p>首先我们建立了一个列表 a。然后调用列表的方法 a.append(45) 添加元素 45 到列表末尾。你可以看到元素 45 已经添加到列表的末端了。有些时候我们需要将数据插入到列表的任何位置，这时我们可以使用列表的 insert() 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.insert(0, 1) # 在列表索引 0 位置添加元素 1</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 23, 45, 1, -3434, 43624356, 234, 45]</span><br><span class="line">&gt;&gt;&gt; a.insert(0, 111) # 在列表索引 0 位置添加元素 111</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[111, 1, 23, 45, 1, -3434, 43624356, 234, 45]</span><br></pre></td></tr></table></figure><p>列表方法 count(s) 会返回列表元素中 s 的数量。我们来检查一下 45 这个元素在列表中出现了多少次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.count(45)</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>如果你想要在列表中移除任意指定值，你需要使用 remove() 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.remove(234)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[111, 1, 23, 45, 1, -3434, 43624356, 45]</span><br></pre></td></tr></table></figure><p>现在我们反转整个列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[45, 43624356, -3434, 1, 45, 23, 1, 111]</span><br></pre></td></tr></table></figure><p>怎样将一个列表的所有元素添加到另一个列表的末尾呢，可以使用列表的 extend() 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b &#x3D; [45, 56, 90]</span><br><span class="line">&gt;&gt;&gt; a.extend(b) # 添加 b 的元素而不是 b 本身</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[45, 43624356, -3434, 1, 45, 23, 1, 111, 45, 56, 90]</span><br></pre></td></tr></table></figure><p>给列表排序，我们使用列表的 sort() 方法，排序的前提是列表的元素是可比较的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.sort()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[-3434, 1, 1, 23, 45, 45, 45, 56, 90, 111, 43624356]</span><br></pre></td></tr></table></figure><p>你也能使用 del 关键字删除指定位置的列表元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; del a[-1]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[-3434, 1, 1, 23, 45, 45, 45, 56, 90, 111]</span><br></pre></td></tr></table></figure><h4 id="将列表用作栈和队列"><a href="#将列表用作栈和队列" class="headerlink" title="将列表用作栈和队列"></a>将列表用作栈和队列</h4><p>栈是我们通常所说的一种 LIFO （Last In First Out 后进先出）数据结构。它的意思是最后进入的数据第一个出来。一个最简单的例子往一端封闭的管道放入一些弹珠然后取出来，如果你想把弹珠取出来，你必须从你最后放入弹珠的位置挨个拿出来。用代码实现此原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; a.pop()</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a.pop()</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a.pop()</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a.pop()</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2]</span><br><span class="line">&gt;&gt;&gt; a.append(34)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 34]</span><br></pre></td></tr></table></figure><p>上面的代码中我们使用了一个新方法 pop()。传入一个参数 i 即 pop(i) 会将第 i 个元素弹出。</p><p>在我们的日常生活中会经常遇到队列，比如售票窗口、图书馆、超市的结账出口。队列 是一种在末尾追加数据以及在开始弹出数据的数据结构。与栈不同，它是 FIFO （First In First Out 先进先出）的数据结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a.append(1)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 5, 1]</span><br><span class="line">&gt;&gt;&gt; a.pop(0)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a.pop(0)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[3, 4, 5, 1]</span><br></pre></td></tr></table></figure><p>我们使用 a.pop(0) 弹出列表中第一个元素。</p><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>列表推导式为从序列中创建列表提供了一个简单的方法。如果没有列表推导式，一般都是这样创建列表的：通过将一些操作应用于序列的每个成员并通过返回的元素创建列表，或者通过满足特定条件的元素创建子序列。</p><p>假设我们创建一个 squares 列表，可以像下面这样创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; squares &#x3D; []</span><br><span class="line">&gt;&gt;&gt; for x in range(10):</span><br><span class="line">...     squares.append(x**2)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; squares</span><br><span class="line">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure><p>注意这个 for 循环中的被创建（或被重写）的名为 x 的变量在循环完毕后依然存在。使用如下方法，我们可以计算 squares 的值而不会产生任何的副作用：。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares &#x3D; list(map(lambda x: x**2, range(10)))</span><br></pre></td></tr></table></figure><p>等价于下面的列表推导式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares &#x3D; [x**2 for x in range(10)]</span><br></pre></td></tr></table></figure><p>上面这个方法更加简明且易读。</p><p>列表推导式由包含一个表达式的中括号组成，表达式后面跟随一个 for 子句，之后可以有零或多个 for 或 if 子句。结果是一个列表，由表达式依据其后面的 for 和 if 子句上下文计算而来的结果构成。</p><p>例如，如下的列表推导式结合两个列表的元素，如果元素之间不相等的话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x !&#x3D; y]</span><br><span class="line">[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span><br><span class="line">等同于：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; combs &#x3D; []</span><br><span class="line">&gt;&gt;&gt; for x in [1,2,3]:</span><br><span class="line">...     for y in [3,1,4]:</span><br><span class="line">...         if x !&#x3D; y:</span><br><span class="line">...             combs.append((x, y))</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; combs</span><br><span class="line">[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span><br></pre></td></tr></table></figure><p>值得注意的是在上面两个方法中的 for 和 if 语句的顺序。</p><p>列表推导式也可以嵌套。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; z &#x3D; [x + 1 for x in [x ** 2 for x in a]]</span><br><span class="line">&gt;&gt;&gt; z</span><br><span class="line">[2, 5, 10]</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组是由数个逗号分割的值组成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; &#39;Fedora&#39;, &#39;ShiYanLou&#39;, &#39;Kubuntu&#39;, &#39;Pardus&#39;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">(&#39;Fedora&#39;, &#39;ShiYanLou&#39;, &#39;Kubuntu&#39;, &#39;Pardus&#39;)</span><br><span class="line">&gt;&gt;&gt; a[1]</span><br><span class="line">&#39;ShiYanLou&#39;</span><br><span class="line">&gt;&gt;&gt; for x in a:</span><br><span class="line">...     print(x, end&#x3D;&#39; &#39;)</span><br><span class="line">...</span><br><span class="line">Fedora ShiYanLou Kubuntu Pardus</span><br></pre></td></tr></table></figure><p>你可以对任何一个元组执行拆封操作并赋值给多个变量，就像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; divmod(15,2)</span><br><span class="line">(7, 1)</span><br><span class="line">&gt;&gt;&gt; x, y &#x3D; divmod(15,2)</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">7</span><br><span class="line">&gt;&gt;&gt; y</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>元组是不可变类型，这意味着你不能在元组内删除或添加或编辑任何值。如果你尝试这些操作，将会出错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; (1, 2, 3, 4)</span><br><span class="line">&gt;&gt;&gt; del a[0]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#39;tuple&#39; object doesn&#39;t support item deletion</span><br></pre></td></tr></table></figure><p>要创建只含有一个元素的元组，在值后面跟一个逗号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; (123)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">123</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a &#x3D; (123, )</span><br><span class="line">&gt;&gt;&gt; b &#x3D; 321,</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">(123,)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">(321,)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br></pre></td></tr></table></figure><p>通过内建函数 type() 你可以知道任意变量的数据类型。还记得我们使用 len() 函数来查询任意序列类型数据的长度吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(len)</span><br><span class="line">&lt;class &#39;builtin_function_or_method&#39;&gt;</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合是一个无序不重复元素的集。基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 symmetric difference（对称差集）等数学运算。</p><p>大括号或 set() 函数可以用来创建集合。注意：想要创建空集合，你必须使用 set() 而不是 {}。后者用于创建空字典，我们在下一节中介绍的一种数据结构。</p><p>下面是集合的常见操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; basket &#x3D; &#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; print(basket)                      # 你可以看到重复的元素被去除</span><br><span class="line">&#123;&#39;orange&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; &#39;orange&#39; in basket</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &#39;crabgrass&#39; in basket</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # 演示对两个单词中的字母进行集合操作</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; a &#x3D; set(&#39;abracadabra&#39;)</span><br><span class="line">&gt;&gt;&gt; b &#x3D; set(&#39;alacazam&#39;)</span><br><span class="line">&gt;&gt;&gt; a                                  # a 去重后的字母</span><br><span class="line">&#123;&#39;a&#39;, &#39;r&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; a - b                              # a 有而 b 没有的字母</span><br><span class="line">&#123;&#39;r&#39;, &#39;d&#39;, &#39;b&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; a | b                              # 存在于 a 或 b 的字母</span><br><span class="line">&#123;&#39;a&#39;, &#39;c&#39;, &#39;r&#39;, &#39;d&#39;, &#39;b&#39;, &#39;m&#39;, &#39;z&#39;, &#39;l&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; a &amp; b                              # a 和 b 都有的字母</span><br><span class="line">&#123;&#39;a&#39;, &#39;c&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; a ^ b                              # 存在于 a 或 b 但不同时存在的字母</span><br><span class="line">&#123;&#39;r&#39;, &#39;d&#39;, &#39;b&#39;, &#39;m&#39;, &#39;z&#39;, &#39;l&#39;&#125;</span><br></pre></td></tr></table></figure><p>从集合中添加或弹出元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; &#123;&#39;a&#39;,&#39;e&#39;,&#39;h&#39;,&#39;g&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; a.pop()</span><br><span class="line">&#39;h&#39;</span><br><span class="line">&gt;&gt;&gt; a.add(&#39;c&#39;)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;c&#39;, &#39;e&#39;, &#39;g&#39;, &#39;a&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典是是无序的键值对（key:value）集合，同一个字典内的键必须是互不相同的。一对大括号 {} 创建一个空字典。初始化字典时，在大括号内放置一组逗号分隔的键：值对，这也是字典输出的方式。我们使用键来检索存储在字典中的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data &#x3D; &#123;&#39;kushal&#39;:&#39;Fedora&#39;, &#39;kart_&#39;:&#39;Debian&#39;, &#39;Jace&#39;:&#39;Mac&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#39;kushal&#39;: &#39;Fedora&#39;, &#39;Jace&#39;: &#39;Mac&#39;, &#39;kart_&#39;: &#39;Debian&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; data[&#39;kart_&#39;]</span><br><span class="line">&#39;Debian&#39;</span><br></pre></td></tr></table></figure><p>创建新的键值对很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data[&#39;parthan&#39;] &#x3D; &#39;Ubuntu&#39;</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#39;kushal&#39;: &#39;Fedora&#39;, &#39;Jace&#39;: &#39;Mac&#39;, &#39;kart_&#39;: &#39;Debian&#39;, &#39;parthan&#39;: &#39;Ubuntu&#39;&#125;</span><br></pre></td></tr></table></figure><p>使用 del 关键字删除任意指定的键值对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; del data[&#39;kushal&#39;]</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#39;Jace&#39;: &#39;Mac&#39;, &#39;kart_&#39;: &#39;Debian&#39;, &#39;parthan&#39;: &#39;Ubuntu&#39;</span><br></pre></td></tr></table></figure><p>使用 in 关键字查询指定的键是否存在于字典中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;ShiYanLou&#39; in data</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>必须知道的是，字典中的键必须是不可变类型，比如你不能使用列表作为键。</p><p>dict() 可以从包含键值对的元组中创建字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dict(((&#39;Indian&#39;,&#39;Delhi&#39;),(&#39;Bangladesh&#39;,&#39;Dhaka&#39;)))</span><br><span class="line">&#123;&#39;Indian&#39;: &#39;Delhi&#39;, &#39;Bangladesh&#39;: &#39;Dhaka&#39;&#125;</span><br></pre></td></tr></table></figure><p>如果你想要遍历一个字典，使用字典的 items() 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#39;Kushal&#39;: &#39;Fedora&#39;, &#39;Jace&#39;: &#39;Mac&#39;, &#39;kart_&#39;: &#39;Debian&#39;, &#39;parthan&#39;: &#39;Ubuntu&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; for x, y in data.items():</span><br><span class="line">...     print(&quot;&#123;&#125; uses &#123;&#125;&quot;.format(x, y))</span><br><span class="line">...</span><br><span class="line">Kushal uses Fedora</span><br><span class="line">Jace uses Mac</span><br><span class="line">kart_ uses Debian</span><br><span class="line">parthan uses Ubuntu</span><br></pre></td></tr></table></figure><p>许多时候我们需要往字典中的元素添加数据，我们首先要判断这个元素是否存在，不存在则创建一个默认值。如果在循环里执行这个操作，每次迭代都需要判断一次，降低程序性能。</p><p>我们可以使用 dict.setdefault(key, default) 更有效率的完成这个事情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data &#x3D; &#123;&#125;</span><br><span class="line">&gt;&gt;&gt; data.setdefault(&#39;names&#39;, []).append(&#39;Ruby&#39;)</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#39;names&#39;: [&#39;Ruby&#39;]&#125;</span><br><span class="line">&gt;&gt;&gt; data.setdefault(&#39;names&#39;, []).append(&#39;Python&#39;)</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#39;names&#39;: [&#39;Ruby&#39;, &#39;Python&#39;]&#125;</span><br><span class="line">&gt;&gt;&gt; data.setdefault(&#39;names&#39;, []).append(&#39;C&#39;)</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#39;names&#39;: [&#39;Ruby&#39;, &#39;Python&#39;, &#39;C&#39;]&#125;</span><br></pre></td></tr></table></figure><p>试图索引一个不存在的键将会抛出一个 keyError 错误。我们可以使用 dict.get(key, default) 来索引键，如果键不存在，那么返回指定的 default 值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data[&#39;foo&#39;]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &#39;foo&#39;</span><br><span class="line">&gt;&gt;&gt; data.get(&#39;foo&#39;, 0)</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>如果你想要在遍历列表（或任何序列类型）的同时获得元素索引值，你可以使用 enumerate()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i, j in enumerate([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]):</span><br><span class="line">...     print(i, j)</span><br><span class="line">...</span><br><span class="line">0 a</span><br><span class="line">1 b</span><br><span class="line">2 c</span><br></pre></td></tr></table></figure><p>你也许需要同时遍历两个序列类型，你可以使用 zip() 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [&#39;Pradeepto&#39;, &#39;Kushal&#39;]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [&#39;OpenSUSE&#39;, &#39;Fedora&#39;]</span><br><span class="line">&gt;&gt;&gt; for x, y in zip(a, b):</span><br><span class="line">...     print(&quot;&#123;&#125; uses &#123;&#125;&quot;.format(x, y))</span><br><span class="line">...</span><br><span class="line">Pradeepto uses OpenSUSE</span><br><span class="line">Kushal uses Fedora</span><br></pre></td></tr></table></figure><h3 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h3><h4 id="students-py"><a href="#students-py" class="headerlink" title="students.py"></a>students.py</h4><p>这是一个判断学生成绩是否达标的程序，要求输入学生数量，以及各个学生物理、数学、历史三科的成绩，如果总成绩小于 120，程序打印 “failed”，否则打印 “passed”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">n &#x3D; int(input(&quot;Enter the number of students: &quot;))</span><br><span class="line">data &#x3D; &#123;&#125; # 用来存储数据的字典变量</span><br><span class="line">Subjects &#x3D; (&#39;Physics&#39;, &#39;Maths&#39;, &#39;History&#39;) # 所有科目</span><br><span class="line">for i in range(0, n):</span><br><span class="line">    name &#x3D; input(&#39;Enter the name of the student &#123;&#125;: &#39;.format(i + 1)) # 获得学生名称</span><br><span class="line">    marks &#x3D; []</span><br><span class="line">    for x in Subjects:</span><br><span class="line">        marks.append(int(input(&#39;Enter marks of &#123;&#125;: &#39;.format(x)))) # 获得每一科的分数</span><br><span class="line">    data[name] &#x3D; marks</span><br><span class="line">for x, y in data.items():</span><br><span class="line">    total &#x3D;  sum(y)</span><br><span class="line">    print(&quot;&#123;&#125;&#39;s total marks &#123;&#125;&quot;.format(x, total))</span><br><span class="line">    if total &lt; 120:</span><br><span class="line">        print(x, &quot;failed :(&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(x, &quot;passed :)&quot;)</span><br></pre></td></tr></table></figure><h4 id="matrixmul-py"><a href="#matrixmul-py" class="headerlink" title="matrixmul.py"></a>matrixmul.py</h4><p>这个例子里我们计算两个矩阵的 Hadamard 乘积。要求输入矩阵的行/列数（在这里假设我们使用的是 n × n 的矩阵）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">n &#x3D; int(input(&quot;Enter the value of n: &quot;))</span><br><span class="line">print(&quot;Enter values for the Matrix A&quot;)</span><br><span class="line">a &#x3D; []</span><br><span class="line">for i in range(n):</span><br><span class="line">    a.append([int(x) for x in input().split()])</span><br><span class="line">print(&quot;Enter values for the Matrix B&quot;)</span><br><span class="line">b &#x3D; []</span><br><span class="line">for i in range(n):</span><br><span class="line">    b.append([int(x) for x in input().split()])</span><br><span class="line">c &#x3D; []</span><br><span class="line">for i in range(n):</span><br><span class="line">    c.append([a[i][j] * b[j][i] for j in range(n)])</span><br><span class="line"># 此处不把第一个 for 循环也放到列表推导式是因为</span><br><span class="line"># 矩阵每一行生成一个列表方便后面的打印。</span><br><span class="line">print(&quot;After matrix multiplication&quot;)</span><br><span class="line">print(&quot;-&quot; * 7 * n)</span><br><span class="line">for x in c:</span><br><span class="line">    for y in x:</span><br><span class="line">        print(str(y).rjust(5), end&#x3D;&#39; &#39;)</span><br><span class="line">        # rjust() Python rjust() 返回一个原字符串右对齐,</span><br><span class="line">        # 并使用空格填充至长度 width 的新字符串。</span><br><span class="line">        # 如果指定的长度小于字符串的长度则返回原字符串</span><br><span class="line">        # str.rjust(width[, fillchar]) fillchar 可以指定填充的字符</span><br><span class="line">    print()</span><br><span class="line">print(&quot;-&quot; * 7 * n)</span><br></pre></td></tr></table></figure><p>运行如下：<br><img src="https://dn-anything-about-doc.qbox.me/document-uid212737labid2041timestamp1471396732735.png/wm"></p><p>这里我们使用了几次列表推导式。[int(x) for x in input().split()] 首先通过 input() 获得用户输入的字符串，再使用 split() 分割字符串得到一系列的数字字符串，然后用 int() 从每个数字字符串创建对应的整数值。我们也使用了 [a[i][j] * b[j][i] for j in range(n)] 来得到矩阵乘积的每一行数据。</p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 循环</title>
      <link href="2017/07/10/Python%20%E5%BE%AA%E7%8E%AF/"/>
      <url>2017/07/10/Python%20%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>Python 循环</p><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>while 语句的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while condition:</span><br><span class="line">    statement1</span><br><span class="line">    statement2</span><br></pre></td></tr></table></figure><p>想要多次执行的代码必须以正确的缩进放在 while 语句下面。在表达式 condition 为真的时候它们才会执行。同 if-else 一样，非零值为真。让我们写一个简单的代码，它按顺序打印 0 到 10 的数字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; n &#x3D; 0</span><br><span class="line">&gt;&gt;&gt; while n &lt; 11:</span><br><span class="line">...     print(n)</span><br><span class="line">...     n +&#x3D; 1</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>在第一行我们使 n = 0，然后在 while 语句中把条件设置为 n &lt; 11，这意味着在 while 语句下面缩进的所有行将会被执行，直到 n 的值大于等于11。在循环里我们只是打印 n 的值然后令它增一。</p><h4 id="斐波那契（Fibonacci）数列"><a href="#斐波那契（Fibonacci）数列" class="headerlink" title="斐波那契（Fibonacci）数列"></a>斐波那契（Fibonacci）数列</h4><p>让我们来试试打印斐波那契数列。这个数列前两项为 1，之后的每一个项都是前两项之和。所以这个数列看起来就像这样：1,1,2,3,5,8,13 ……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">a, b &#x3D; 0, 1</span><br><span class="line">while b &lt; 100:</span><br><span class="line">    print(b)</span><br><span class="line">    a, b &#x3D; b, a + b</span><br></pre></td></tr></table></figure><p>第一行代码中我们初始化 a 和 b。当 b 的值小于 100 的时候，循环执行代码。循环里我们首先打印 b 的值，然后在下一行将 a + b 的值赋值给 b，b 的值赋值给 a。</p><p>学习其他语言的同学在这里可能有些困惑，你可以这样理解，Python 中赋值语句执行时会先对赋值运算符右边的表达式求值，然后将这个值赋值给左边的变量。</p><p>默认情况下，print() 除了打印你提供的字符串之外，还会打印一个换行符，所以每调用一次 print() 就会换一次行，如同上面一样。</p><p>你可以通过 print() 的另一个参数 end 来替换这个换行符，就像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">a, b &#x3D; 0, 1</span><br><span class="line">while b &lt; 100:</span><br><span class="line">    print(b, end&#x3D;&#39; &#39;)</span><br><span class="line">    a, b &#x3D; b, a + b</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><h4 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h4><p>我们来写一个程序计算幂级数：e^x = 1 + x + x^2 / 2! + x^3 / 3! + … + x^n / n! （0 &lt; x &lt; 1）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">x &#x3D; float(input(&quot;Enter the value of x: &quot;))</span><br><span class="line">n &#x3D; term &#x3D; num &#x3D; 1</span><br><span class="line">result &#x3D; 1.0</span><br><span class="line">while n &lt;&#x3D; 100:</span><br><span class="line">    term *&#x3D; x &#x2F; n</span><br><span class="line">    result +&#x3D; term</span><br><span class="line">    n +&#x3D; 1</span><br><span class="line">    if term &lt; 0.0001:</span><br><span class="line">        break</span><br><span class="line">print(&quot;No of Times&#x3D; &#123;&#125; and Sum&#x3D; &#123;&#125;&quot;.format(n, result))</span><br></pre></td></tr></table></figure><p>在这个程序里我们介绍一个新的关键字 break，它可以终止最里面的循环。这个例子里我们在 if 语句里使用 break ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if term &lt; 0.0001:</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><p>这意味着如果 term 的值小于 0.0001 ，那么终止循环。</p><h3 id="乘法表"><a href="#乘法表" class="headerlink" title="乘法表"></a>乘法表</h3><p>这个例子里我们打印 10 以内的乘法表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">i &#x3D; 1</span><br><span class="line">print(&quot;-&quot; * 50)</span><br><span class="line">while i &lt; 11:</span><br><span class="line">    n &#x3D; 1</span><br><span class="line">    while n &lt;&#x3D; 10:</span><br><span class="line">        print(&quot;&#123;:4d&#125;&quot;.format(i * n), end&#x3D;&#39; &#39;)</span><br><span class="line">        n +&#x3D; 1</span><br><span class="line">    print()</span><br><span class="line">    i +&#x3D; 1</span><br><span class="line">print(&quot;-&quot; * 50)</span><br></pre></td></tr></table></figure><p>这里我们在 while 循环里使用了另一个 while 循环，这被称为嵌套循环。你应该已经看到一条有趣的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;-&quot; * 50)</span><br></pre></td></tr></table></figure><p>字符串若是乘上整数 n，将返回由 n 个此字符串拼接起来的新字符串。</p><p>下面是一些例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;s&#39; * 10</span><br><span class="line">&#39;ssssssssss&#39;</span><br><span class="line">&gt;&gt;&gt; print(&quot;*&quot; * 10)</span><br><span class="line">**********</span><br><span class="line">&gt;&gt;&gt; print(&quot;#&quot; * 20)</span><br><span class="line">####################</span><br><span class="line">&gt;&gt;&gt; print(&quot;--&quot; * 20)</span><br><span class="line">----------------------------------------</span><br><span class="line">&gt;&gt;&gt; print(&quot;-&quot; * 40)</span><br><span class="line">----------------------------------------</span><br></pre></td></tr></table></figure><h3 id="一些打印-的例子"><a href="#一些打印-的例子" class="headerlink" title="一些打印 * 的例子"></a>一些打印 * 的例子</h3><p>这里是一些你可以在大学的实验报告里经常看到的例子。</p><h4 id="设计-1"><a href="#设计-1" class="headerlink" title="设计 1"></a>设计 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">row &#x3D; int(input(&quot;Enter the number of rows: &quot;))</span><br><span class="line">n &#x3D; row</span><br><span class="line">while n &gt;&#x3D; 0:</span><br><span class="line">    x &#x3D;  &quot;*&quot; * n</span><br><span class="line">    print(x)</span><br><span class="line">    n -&#x3D; 1</span><br></pre></td></tr></table></figure><h4 id="设计-2"><a href="#设计-2" class="headerlink" title="设计 2"></a>设计 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">n &#x3D; int(input(&quot;Enter the number of rows: &quot;))</span><br><span class="line">i &#x3D; 1</span><br><span class="line">while i &lt;&#x3D; n:</span><br><span class="line">    print(&quot;*&quot; * i)</span><br><span class="line">    i +&#x3D; 1</span><br></pre></td></tr></table></figure><h4 id="设计-3"><a href="#设计-3" class="headerlink" title="设计 3"></a>设计 3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">row &#x3D; int(input(&quot;Enter the number of rows: &quot;))</span><br><span class="line">n &#x3D; row</span><br><span class="line">while n &gt;&#x3D; 0:</span><br><span class="line">    x &#x3D; &quot;*&quot; * n</span><br><span class="line">    y &#x3D; &quot; &quot; * (row - n)</span><br><span class="line">    print(y + x)</span><br><span class="line">    n -&#x3D; 1</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>在继续学习循环之前，我们先学习一个叫做列表的数据结构。它可以写作中括号之间的一列逗号分隔的值。列表的元素不必是同一类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [ 1, 342, 223, &#39;India&#39;, &#39;Fedora&#39;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 342, 223, &#39;India&#39;, &#39;Fedora&#39;]</span><br></pre></td></tr></table></figure><p>你可以将上面的列表想象为一堆有序的盒子，盒子包含有上面提到的值，每个盒子都有自己的编号（红色的数字），编号从零开始，你可以通过编号访问每一个盒子里面的值。对于列表，这里的编号称为索引。</p><p><img src="https://labfile.oss.aliyuncs.com/courses/596/Welcome%20to%20Python%20for%20you%20and%20me%20-%20%E5%BE%AA%E7%8E%AF_img_1.png"></p><p>我们像下面这样通过索引来访问列表中的每一个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[4]</span><br><span class="line">&#39;Fedora&#39;</span><br></pre></td></tr></table></figure><p>如果我们使用负数的索引，那将会从列表的末尾开始计数，像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">&#39;Fedora&#39;</span><br></pre></td></tr></table></figure><p>你甚至可以把它切成不同的部分，这个操作称为切片，例子在下面给出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a[0:-1]</span><br><span class="line">[1, 342, 223, &#39;India&#39;]</span><br><span class="line">&gt;&gt;&gt; a[2:-2]</span><br><span class="line">[223]</span><br></pre></td></tr></table></figure><p>切片并不会改变正在操作的列表，切片操作返回其子列表，这意味着下面的切片操作返回列表一个新的（浅）拷贝副本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a[:]</span><br><span class="line">[1, 342, 223, &#39;India&#39;, &#39;Fedora&#39;]</span><br></pre></td></tr></table></figure><p>切片的索引有非常有用的默认值；省略的第一个索引默认为零，省略的第二个索引默认为切片的字符串的大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a[:-2]</span><br><span class="line">[1, 342, 223]</span><br><span class="line">&gt;&gt;&gt; a[-2:]</span><br><span class="line">[&#39;India&#39;, &#39;Fedora&#39;]</span><br></pre></td></tr></table></figure><p>有个办法可以很容易地记住切片的工作方式：切片时的索引是在两个元素之间 。左边第一个元素的索引为 0，而长度为 n 的列表其最后一个元素的右界索引为 n。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> +---+-----+-----+---------+----------+</span><br><span class="line"> | 1 | 342 | 223 | &#39;India&#39; | &#39;Fedora&#39; |</span><br><span class="line"> +---+-----+-----+---------+----------+</span><br><span class="line"> 0   1     2     3         4          5</span><br><span class="line">-6  -5    -4    -3        -2         -1</span><br></pre></td></tr></table></figure><p>上面的第一行数字给出列表中的索引点 0…6。第二行给出相应的负索引。切片是从 i 到 j 两个数值表示的边界之间的所有元素。</p><p>对于非负索引，如果上下都在边界内，切片长度就是两个索引之差。例如 a[2:4] 是 2。</p><p>试图使用太大的索引会导致错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a[32]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">&gt;&gt;&gt; a[-10]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>Python 能够优雅地处理那些没有意义的切片索引：一个过大的索引值(即大于列表实际长度)将被列表实际长度所代替，当上边界比下边界大时(即切片左值大于右值)就返回空列表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a[2:32]</span><br><span class="line">[223, &#39;India&#39;, &#39;Fedora&#39;]</span><br><span class="line">&gt;&gt;&gt; a[32:]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>切片操作还可以设置步长，就像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a[1::2]</span><br><span class="line">[342, &#39;India&#39;]</span><br></pre></td></tr></table></figure><p>它的意思是，从切片索引 1 到列表末尾，每隔两个元素取值。</p><p>列表也支持连接这样的操作，它返回一个新的列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a + [36, 49, 64, 81, 100]</span><br><span class="line">[1, 342, 223, &#39;India&#39;, &#39;Fedora&#39;, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>列表允许修改元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; cubes &#x3D; [1, 8, 27, 65, 125]</span><br><span class="line">&gt;&gt;&gt; cubes[3] &#x3D; 64</span><br><span class="line">&gt;&gt;&gt; cubes</span><br><span class="line">[1, 8, 27, 64, 125]</span><br></pre></td></tr></table></figure><p>也可以对切片赋值，此操作可以改变列表的尺寸，或清空它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; letters &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</span><br><span class="line">&gt;&gt;&gt; letters</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</span><br><span class="line">&gt;&gt;&gt; # 替换某些值</span><br><span class="line">&gt;&gt;&gt; letters[2:5] &#x3D; [&#39;C&#39;, &#39;D&#39;, &#39;E&#39;]</span><br><span class="line">&gt;&gt;&gt; letters</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;f&#39;, &#39;g&#39;]</span><br><span class="line">&gt;&gt;&gt; # 现在移除他们</span><br><span class="line">&gt;&gt;&gt; letters[2:5] &#x3D; []</span><br><span class="line">&gt;&gt;&gt; letters</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;f&#39;, &#39;g&#39;]</span><br><span class="line">&gt;&gt;&gt; # 通过替换所有元素为空列表来清空这个列表</span><br><span class="line">&gt;&gt;&gt; letters[:] &#x3D; []</span><br><span class="line">&gt;&gt;&gt; letters</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>细心的同学可能发问了，前面不是说过切片操作不改变列表么？严格来说，这里并不算真正的切片操作，只是上面代码中赋值运算符左边的这种操作与切片操作形式一样而已。</p><p>要检查某个值是否存在于列表中，你可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [&#39;ShiYanLou&#39;, &#39;is&#39;, &#39;cool&#39;]</span><br><span class="line">&gt;&gt;&gt; &#39;cool&#39; in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &#39;Linux&#39; in a</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>这意味着我们可以将上面的语句使用在 if 子句中的表达式。通过内建函数 len() 我们可以获得列表的长度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>如果你想要检查列表是否为空，请这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if list_name: # 列表不为空</span><br><span class="line">    pass</span><br><span class="line">else: # 列表为空</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>列表是允许嵌套的（创建一个包含其它列表的列表），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; n &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; x &#x3D; [a, n]</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [1, 2, 3]]</span><br><span class="line">&gt;&gt;&gt; x[0]</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; x[0][1]</span><br><span class="line">&#39;b&#39;</span><br></pre></td></tr></table></figure><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>通过 for 语句我们可以使用 for 循环。Python 里的 for 循环与 C 语言中的不同。这里的 for 循环遍历任何序列（比如列表和字符串）中的每一个元素。下面给出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [&#39;ShiYanLou&#39;, &#39;is&#39;, &#39;powerful&#39;]</span><br><span class="line">&gt;&gt;&gt; for x in a:</span><br><span class="line">...     print(x)</span><br><span class="line">...</span><br><span class="line">ShiYanLou</span><br><span class="line">is</span><br><span class="line">powerful</span><br></pre></td></tr></table></figure><p>我们也能这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">&gt;&gt;&gt; for x in a[::2]:</span><br><span class="line">...     print(x)</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="range-函数"><a href="#range-函数" class="headerlink" title="range() 函数"></a>range() 函数</h4><p>如果你需要一个数值序列，内置函数 range() 会很方便，它生成一个等差数列（并不是列表）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(5):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; range(1, 5)      </span><br><span class="line">range(1, 5)</span><br><span class="line">&gt;&gt;&gt; list(range(1, 5))</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; list(range(1, 15, 3))</span><br><span class="line">[1, 4, 7, 10, 13]</span><br><span class="line">&gt;&gt;&gt; list(range(4, 15, 2))</span><br><span class="line">[4, 6, 8, 10, 12, 14]</span><br></pre></td></tr></table></figure><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p>如同 break ，我们可以在循环中使用另一个语句 continue。它会跳过其后的代码回到循环开始处执行。这意味着它可以帮助你跳过部分循环。在下面的例子中，我们要求用户输入一个整数，如果输入的是负数，那么我们会再次要求输入，如果输入的是整数，我们计算这个数的平方。用户输入 0 来跳出这个无限循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">while True:</span><br><span class="line">    n &#x3D; int(input(&quot;Please enter an Integer: &quot;))</span><br><span class="line">    if n &lt; 0:</span><br><span class="line">        continue # 这会返回到循环开始处执行</span><br><span class="line">    elif n &#x3D;&#x3D; 0:</span><br><span class="line">        break</span><br><span class="line">    print(&quot;Square is &quot;, n ** 2)</span><br><span class="line">print(&quot;Goodbye&quot;)</span><br></pre></td></tr></table></figure><h3 id="循环的-else-语句"><a href="#循环的-else-语句" class="headerlink" title="循环的 else 语句"></a>循环的 else 语句</h3><p>我们可以在循环后面使用可选的 else 语句。它将会在循环完毕后执行，除非有 break 语句终止了循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(0, 5):</span><br><span class="line">...     print(i)</span><br><span class="line">... else:</span><br><span class="line">...     print(&quot;Bye bye&quot;)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">Bye bye</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 控制流 If-else</title>
      <link href="2017/07/09/Python%20%E6%8E%A7%E5%88%B6%E6%B5%81%20If-else/"/>
      <url>2017/07/09/Python%20%E6%8E%A7%E5%88%B6%E6%B5%81%20If-else/</url>
      
        <content type="html"><![CDATA[<p>Python 控制流 If-else</p><h3 id="If-语句"><a href="#If-语句" class="headerlink" title="If 语句"></a>If 语句</h3><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if expression:</span><br><span class="line">    do this</span><br></pre></td></tr></table></figure><p>如果表达式 expression 得值为真（不为零的任何值都为真），程序将执行缩进后的内容。务必要使用正确的缩进，在表达式为真的情况将会执行缩进的所有行。一个简单的例子，程序接受用户输入的一个数并且检查这个数是否小于 100。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">number &#x3D; int(input(&quot;Enter a number: &quot;))</span><br><span class="line">if number &lt; 100:</span><br><span class="line">    print(&quot;The number is less than 100&quot;)</span><br></pre></td></tr></table></figure><h3 id="Else-语句"><a href="#Else-语句" class="headerlink" title="Else 语句"></a>Else 语句</h3><p>在上面的例子中，我们想要这样做：如果输入数大于 100 则打印 “Greater than”。我们使用 else 语句来做到这一点，它将在 if 语句未满足的情况时工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">number &#x3D; int(input(&quot;Enter a number: &quot;))</span><br><span class="line">if number &lt; 100:</span><br><span class="line">    print(&quot;The number is less than 100&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;The number is greater than 100&quot;)</span><br></pre></td></tr></table></figure><p>另一个非常基础的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x &#x3D; int(input(&quot;Please enter an integer: &quot;))</span><br><span class="line">&gt;&gt;&gt; if x &lt; 0:</span><br><span class="line">...      x &#x3D; 0</span><br><span class="line">...      print(&#39;Negative changed to zero&#39;)</span><br><span class="line">... elif x &#x3D;&#x3D; 0:</span><br><span class="line">...      print(&#39;Zero&#39;)</span><br><span class="line">... elif x &#x3D;&#x3D; 1:</span><br><span class="line">...      print(&#39;Single&#39;)</span><br><span class="line">... else:</span><br><span class="line">...      print(&#39;More&#39;)</span><br></pre></td></tr></table></figure><p>在上面的例子中，elif 是 else if 的缩写。</p><h3 id="真值检测"><a href="#真值检测" class="headerlink" title="真值检测"></a>真值检测</h3><p>检测真值的优雅方式是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if x:</span><br><span class="line">    pass</span><br><span class="line">不要像下面这样做：</span><br><span class="line"></span><br><span class="line">if x &#x3D;&#x3D; True:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 运算符和表达式</title>
      <link href="2017/07/09/Python%20%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2017/07/09/Python%20%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Python 运算符和表达式</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符是一些符号，它告诉 Python 解释器去做一些数学或逻辑操作。一些基本的数学操作符如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 2 + 3</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; 23.0 - 3</span><br><span class="line">20.0</span><br><span class="line">&gt;&gt;&gt; 22 &#x2F; 12</span><br><span class="line">1.8333333333333333</span><br></pre></td></tr></table></figure><p>只要有任意一个操作数是浮点数，结果就会是浮点数。</p><p>进行除法运算时若是除不尽，结果将会是小数，这很自然，如果要进行整除，使用 // 运算符，它将返回商的整数部分。</p><p>% 是求余运算符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 14 % 3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="整数运算示例"><a href="#整数运算示例" class="headerlink" title="整数运算示例"></a>整数运算示例</h3><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">days &#x3D; int(input(&quot;Enter days: &quot;))</span><br><span class="line">months &#x3D; days &#x2F;&#x2F; 30</span><br><span class="line">days &#x3D; days % 30</span><br><span class="line">print(&quot;Months &#x3D; &#123;&#125; Days &#x3D; &#123;&#125;&quot;.format(months, days))</span><br></pre></td></tr></table></figure><p>运行程序：</p><p>在开始获得用户输入的天数，然后获得月份数和天数，最后把这些数打印出来。你可以使用更容易的办法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">days &#x3D; int(input(&quot;Enter days: &quot;))</span><br><span class="line">print(&quot;Months &#x3D; &#123;&#125; Days &#x3D; &#123;&#125;&quot;.format(*divmod(days, 30)))</span><br></pre></td></tr></table></figure><ul><li><code>divmod(num1, num2)</code> 返回一个元组，这个元组包含两个值，第一个是 num1 和 num2 相整除得到的值，第二个是 num1 和 num2 求余得到的值。</li><li>然后我们用 <code>*</code> 运算符拆封这个元组，得到这两个值。</li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>你可以使用下面的运算符实现关系运算。</p><p>关系运算符</p><table><thead><tr><th>Operator</th><th>Meaning</th></tr></thead><tbody><tr><td>&lt;</td><td>Is less than</td></tr><tr><td>&lt;=</td><td>Is less than or equal to</td></tr></tbody></table><blockquote><p>| Is greater than<br>= | Is greater than or equal to<br>== | Is equal to<br>!= | Is not equal to</p></blockquote><p>举一些例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1 &lt; 2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 3 &gt; 34</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 23 &#x3D;&#x3D; 45</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 34 !&#x3D; 323</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>对于逻辑 与，或，非，我们使用 and，or，not 这几个关键字。</p><p>逻辑运算符 and 和 or 也称作短路运算符：它们的参数从左向右解析，一旦结果可以确定就停止。例如，如果 A 和 C 为真而 B 为假，A and B and C 不会解析 C 。作用于一个普通的非逻辑值时，短路运算符的返回值通常是能够最先确定结果的那个操作数。</p><p>关系运算可以通过逻辑运算符 and 和 or 组合，比较的结果可以用 not 来取反意。逻辑运算符的优先级又低于关系运算符，在它们之中，not 具有最高的优先级，or 优先级最低，所以 A and not B or C 等于 (A and (notB)) or C。当然，括号也可以用于比较表达式。</p><p>下面是一些例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 and 4</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; 0 and 4</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; False or 3 or 0</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 2 &gt; 1 and not 3 &gt; 5 or 4</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="简写运算符"><a href="#简写运算符" class="headerlink" title="简写运算符"></a>简写运算符</h2><p>x op= expression 为简写运算的语法形式。其等价于 x = x op expression ，举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 12</span><br><span class="line">&gt;&gt;&gt; a +&#x3D; 13</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; a &#x2F;&#x3D; 3</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">8.333333333333334</span><br><span class="line">&gt;&gt;&gt; a +&#x3D; (26 * 32)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">840.3333333333334</span><br></pre></td></tr></table></figure><p>shorthand.py 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">N &#x3D; 100</span><br><span class="line">a &#x3D; 2</span><br><span class="line">while a &lt; N:</span><br><span class="line">    print(str(a))</span><br><span class="line">    a *&#x3D; a</span><br></pre></td></tr></table></figure><p>运行之：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;shorthand.py</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>通常我们书写表达式的时候，会在每一个运算符左右都放一个空格，这样使代码更可读，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; 234 * (45 - 56 &#x2F; 34)</span><br></pre></td></tr></table></figure><p>一个用于展示表达式的例子，注意其中运算符的优先级。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">a &#x3D; 9</span><br><span class="line">b &#x3D; 12</span><br><span class="line">c &#x3D; 3</span><br><span class="line">x &#x3D; a - b &#x2F; 3 + c * 2 - 1</span><br><span class="line">y &#x3D; a - b &#x2F; (3 + c) * (2 - 1)</span><br><span class="line">z &#x3D; a - (b &#x2F; (3 + c) * 2) - 1</span><br><span class="line">print(&quot;X &#x3D; &quot;, x)</span><br><span class="line">print(&quot;Y &#x3D; &quot;, y)</span><br><span class="line">print(&quot;Z &#x3D; &quot;, z)</span><br></pre></td></tr></table></figure><p>运行之：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;evaluationexp.py</span><br><span class="line">X &#x3D;  10</span><br><span class="line">Y &#x3D;  7</span><br><span class="line">Z &#x3D;  4</span><br></pre></td></tr></table></figure><p>第一个计算的是 x，步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">9 - 12 &#x2F; 3 + 3 * 2 -1</span><br><span class="line">9 - 4 + 3 * 2 - 1</span><br><span class="line">9 - 4 + 6 - 1</span><br><span class="line">5 + 6 - 1</span><br><span class="line">11 - 1</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>我们可以手动的执行类型转换。</p><table><thead><tr><th>类型转换函数</th><th>转换路径</th></tr></thead><tbody><tr><td>float(string)</td><td>字符串 -&gt; 浮点值</td></tr><tr><td>int(string)</td><td>字符串 -&gt; 整数值</td></tr><tr><td>str(integer)</td><td>整数值 -&gt; 字符串</td></tr><tr><td>str(float)</td><td>浮点值 -&gt; 字符串</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 8.126768</span><br><span class="line">&gt;&gt;&gt; str(a)</span><br><span class="line">&#39;8.126768&#39;</span><br></pre></td></tr></table></figure><h2 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h2><h3 id="evaluateequ-py"><a href="#evaluateequ-py" class="headerlink" title="evaluateequ.py"></a>evaluateequ.py</h3><p>这个程序计算数列 1/x+1/(x+1)+1/(x+2)+ … +1/n，我们设 x = 1，n = 10。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">sum &#x3D; 0</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    sum +&#x3D; 1 &#x2F; i</span><br><span class="line">    print(&quot;&#123;:2d&#125; &#123;:6.4f&#125;&quot;.format(i , sum))</span><br></pre></td></tr></table></figure><h3 id="quadraticequation-py"><a href="#quadraticequation-py" class="headerlink" title="quadraticequation.py"></a>quadraticequation.py</h3><p>这个程序用来求解二次方程式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import math</span><br><span class="line">a &#x3D; int(input(&quot;Enter value of a: &quot;))</span><br><span class="line">b &#x3D; int(input(&quot;Enter value of b: &quot;))</span><br><span class="line">c &#x3D; int(input(&quot;Enter value of c: &quot;))</span><br><span class="line">d &#x3D; b * b - 4 * a * c</span><br><span class="line">if d &lt; 0:</span><br><span class="line">    print(&quot;ROOTS are imaginary&quot;)</span><br><span class="line">else:</span><br><span class="line">    root1 &#x3D; (-b + math.sqrt(d)) &#x2F; (2 * a)</span><br><span class="line">    root2 &#x3D; (-b - math.sqrt(d)) &#x2F; (2 * a)</span><br><span class="line">    print(&quot;Root 1 &#x3D; &quot;, root1)</span><br><span class="line">    print(&quot;Root 2 &#x3D; &quot;, root2)</span><br></pre></td></tr></table></figure><h3 id="salesmansalary-py"><a href="#salesmansalary-py" class="headerlink" title="salesmansalary.py"></a>salesmansalary.py</h3><p>这个程序计算以为数码相机销售人员的工资。他的基本工资是 1500，每售出一台相机他可以得到 200 并且获得 2% 的抽成。程序要求输入相机数量及单价。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">basic_salary &#x3D; 1500</span><br><span class="line">bonus_rate &#x3D; 200</span><br><span class="line">commision_rate &#x3D; 0.02</span><br><span class="line">numberofcamera &#x3D; int(input(&quot;Enter the number of inputs sold: &quot;))</span><br><span class="line">price &#x3D; float(input(&quot;Enter the total prices: &quot;))</span><br><span class="line">bonus &#x3D; (bonus_rate * numberofcamera)</span><br><span class="line">commision &#x3D; (commision_rate * numberofcamera * price)</span><br><span class="line">print(&quot;Bonus        &#x3D; &#123;:6.2f&#125;&quot;.format(bonus))</span><br><span class="line">print(&quot;Commision    &#x3D; &#123;:6.2f&#125;&quot;.format(commision))</span><br><span class="line">print(&quot;Gross salary &#x3D; &#123;:6.2f&#125;&quot;.format(basic_salary + bonus + commision))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 变量和数据类型</title>
      <link href="2017/07/09/Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2017/07/09/Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Python 变量和数据类型</p><h2 id="关键字和标识符"><a href="#关键字和标识符" class="headerlink" title="关键字和标识符"></a>关键字和标识符</h2><p>下列的标识符是 Python3 的关键字，并且不能用于通常的标识符。关键字必须完全按照下面拼写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">False               def                 if                  raise</span><br><span class="line">None                del                 import              return</span><br><span class="line">True                elif                in                  try</span><br><span class="line">and                 else                is                  while</span><br><span class="line">as                  except              lambda              with</span><br><span class="line">assert              finally             nonlocal            yield</span><br><span class="line">break               for                 not                 </span><br><span class="line">class               from                or                  </span><br><span class="line">continue            global              pass</span><br></pre></td></tr></table></figure><p>这些内容可以在 Python3 解释器中得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; help()</span><br><span class="line">help&gt; keywords</span><br></pre></td></tr></table></figure><p>在 Python 中 我们不需要为变量指定数据类型。所以你可以直接写出 abc = 1 ，这样变量 abc 就是整数类型。如果你写出 abc = 1.0 ，那么变量 abc 就是浮点类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 13</span><br><span class="line">&gt;&gt;&gt; b &#x3D; 23</span><br><span class="line">&gt;&gt;&gt; a + b</span><br><span class="line">36</span><br></pre></td></tr></table></figure><p>通过上面的例子你应该理解了如何在 Python 中定义变量，也就是只需要输入变量名和值就行了。Python 也能操作字符串，它们用单引号或双引号括起来，就像下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;ShiYanLou&#39;</span><br><span class="line">&#39;ShiYanLou&#39; </span><br><span class="line">&gt;&gt;&gt; &#39;ShiYanLou\&#39;s best&#39; </span><br><span class="line">&quot;ShiYanLou&#39;s best&quot; </span><br><span class="line">&gt;&gt;&gt; &quot;Hello World!&quot; </span><br><span class="line">&#39;Hello World!&#39;</span><br></pre></td></tr></table></figure><h2 id="从键盘读取输入"><a href="#从键盘读取输入" class="headerlink" title="从键盘读取输入"></a>从键盘读取输入</h2><p>通常情况下，Python 的代码中是不需要从键盘读取输入的。不过我们还是可以在 Python 中使用函数 input() 来做到这一点，input() 有一个用于打印在屏幕上的可选字符串参数，返回用户输入的字符串。</p><p>我们来写一个程序，它将会从键盘读取一个数字并且检查这个数字是否小于 100。这个程序名称是 testhundred.py。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">number &#x3D; int(input(&quot;Enter an integer: &quot;))</span><br><span class="line">if number &lt; 100:</span><br><span class="line">    print(&quot;Your number is smaller than 100&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Your number is greater than 100&quot;)</span><br></pre></td></tr></table></figure><p>如果 number 小于 100，输出“Your number is smaller than 100”，如果大于 100，输出“Your number is greater than 100”。</p><p>程序运行起来就像这样:</p><p>(运行时别忘记给文件添加可执行权限，如何添加权限请回想上节实验内容，程序运行时若报错权限不够，为文件添加权限即可)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;testhundred.py</span><br><span class="line">Enter an integer: 13</span><br><span class="line">Your number is smaller than 100</span><br><span class="line">$ .&#x2F;testhundred.py</span><br><span class="line">Enter an integer: 123</span><br><span class="line">Your number is greater than 100</span><br></pre></td></tr></table></figure><p>下一个程序我们来计算投资：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">amount &#x3D; float(input(&quot;Enter amount: &quot;))  # 输入数额</span><br><span class="line">inrate &#x3D; float(input(&quot;Enter Interest rate: &quot;))  # 输入利率</span><br><span class="line">period &#x3D; int(input(&quot;Enter period: &quot;))  # 输入期限</span><br><span class="line">value &#x3D; 0</span><br><span class="line">year &#x3D; 1</span><br><span class="line">while year &lt;&#x3D; period:</span><br><span class="line">    value &#x3D; amount + (inrate * amount)</span><br><span class="line">    print(&quot;Year &#123;&#125; Rs. &#123;:.2f&#125;&quot;.format(year, value))</span><br><span class="line">    amount &#x3D; value</span><br><span class="line">    year &#x3D; year + 1</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;investment.py</span><br><span class="line">Enter amount: 10000</span><br><span class="line">Enter Interest rate: 0.14</span><br><span class="line">Enter period: 5</span><br><span class="line">Year 1 Rs. 11400.00</span><br><span class="line">Year 2 Rs. 12996.00</span><br><span class="line">Year 3 Rs. 14815.44</span><br><span class="line">Year 4 Rs. 16889.60</span><br><span class="line">Year 5 Rs. 19254.15</span><br></pre></td></tr></table></figure><p><code>while year &lt;= period: </code>的意思是，当 year 的值小于等于 period 的值时，下面的语句将会一直循环执行下去，直到 year 大于 period 时停止循环。</p><p><code>Year &#123;&#125; Rs. &#123;:.2f&#125;&quot;.format(year, value)</code> 称为字符串格式化，大括号和其中的字符会被替换成传入 <code>str.format() </code>的参数，也即 year 和 value。其中 {:.2f} 的意思是替换为 2 位精度的浮点数。</p><h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><p>一些关于变量和数据类型的例子。</p><h3 id="求-N-个数字的平均值"><a href="#求-N-个数字的平均值" class="headerlink" title="求 N 个数字的平均值"></a>求 N 个数字的平均值</h3><p>下面的程序用来求 N 个数字的平均值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">N &#x3D; 10</span><br><span class="line">sum &#x3D; 0</span><br><span class="line">count &#x3D; 0</span><br><span class="line">while count &lt; N:</span><br><span class="line">    number &#x3D; float(input())</span><br><span class="line">    sum &#x3D; sum + number</span><br><span class="line">    count &#x3D; count + 1</span><br><span class="line">average &#x3D; sum &#x2F; N</span><br><span class="line">print(&quot;N &#x3D; &#123;&#125;, Sum &#x3D; &#123;&#125;&quot;.format(N, sum))</span><br><span class="line">print(&quot;Average &#x3D; &#123;:.2f&#125;&quot;.format(average))</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;averagen.py</span><br><span class="line">1.2</span><br><span class="line">3.4</span><br><span class="line">3.5</span><br><span class="line">33.2</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">2.4</span><br><span class="line">4</span><br><span class="line">5.5</span><br><span class="line">N &#x3D; 10, Sum &#x3D; 65.2</span><br><span class="line">Average &#x3D; 6.52</span><br></pre></td></tr></table></figure><h3 id="温度转换"><a href="#温度转换" class="headerlink" title="温度转换"></a>温度转换</h3><p>在下面的程序里，我们使用公式 C = (F - 32) / 1.8 将华氏温度转为摄氏温度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">fahrenheit &#x3D; 0</span><br><span class="line">print(&quot;Fahrenheit Celsius&quot;)</span><br><span class="line">while fahrenheit &lt;&#x3D; 250:</span><br><span class="line">    celsius &#x3D; (fahrenheit - 32) &#x2F; 1.8 # 转换为摄氏度</span><br><span class="line">    print(&quot;&#123;:5d&#125; &#123;:7.2f&#125;&quot;.format(fahrenheit , celsius))</span><br><span class="line">    fahrenheit &#x3D; fahrenheit + 25</span><br></pre></td></tr></table></figure><p><code>&#123;:5d&#125;</code> 的意思是替换为 <code>5</code> 个字符宽度的整数，宽度不足则使用空格填充。</p><p>运行程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;temperature.py</span><br><span class="line">Fahrenheit Celsius</span><br><span class="line">    0  -17.78</span><br><span class="line">   25   -3.89</span><br><span class="line">   50   10.00</span><br><span class="line">   75   23.89</span><br><span class="line">  100   37.78</span><br><span class="line">  125   51.67</span><br><span class="line">  150   65.56</span><br><span class="line">  175   79.44</span><br><span class="line">  200   93.33</span><br><span class="line">  225  107.22</span><br><span class="line">  250  121.11</span><br></pre></td></tr></table></figure><h2 id="单行定义多个变量或赋值"><a href="#单行定义多个变量或赋值" class="headerlink" title="单行定义多个变量或赋值"></a>单行定义多个变量或赋值</h2><p>你甚至可以在一行内将多个值赋值给多个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a , b &#x3D; 45, 54</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">45</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">54</span><br></pre></td></tr></table></figure><p>这个技巧用来交换两个数的值非常方便。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; b , a</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">54</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">45</span><br></pre></td></tr></table></figure><p>要明白这是怎么工作的，你需要学习元组（tuple）这个数据类型。我们是用逗号创建元组。在赋值语句的右边我们创建了一个元组，我们称这为元组封装（tuple packing），赋值语句的左边我们则做的是元组拆封 （tuple unpacking）。</p><p>下面是另一个元组拆封的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data &#x3D; (&quot;shiyanlou&quot;, &quot;China&quot;, &quot;Python&quot;)</span><br><span class="line">&gt;&gt;&gt; name, country, language &#x3D; data</span><br><span class="line">&gt;&gt;&gt; name</span><br><span class="line">&#39;shiyanlou&#39;</span><br><span class="line">&gt;&gt;&gt; country</span><br><span class="line">&#39;China&#39;</span><br><span class="line">&gt;&gt;&gt; language</span><br><span class="line">&#39;Python&#39;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始 Python 之旅</title>
      <link href="2017/07/08/%E5%BC%80%E5%A7%8B%20Python%20%E4%B9%8B%E6%97%85/"/>
      <url>2017/07/08/%E5%BC%80%E5%A7%8B%20Python%20%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p>开始 Python 之旅</p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p>Python 是一个脚本语言，你可以在 Python 解释器中直接写代码或者将代码写到一个文件里，然后执行这个文件（即脚本文件）。</p><p>首先，我们从使用解释器开始，打开终端，键入<code>python3</code> 并回车。这个时候解释器便工作于交互模式。</p><p>作为我们第一个 Python 代码，我们将打印经典的 “Hello World!”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;Hello World!&quot;)</span><br><span class="line">Hello World!</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>欣赏完自己的杰作后，按 Ctrl + D 输入一个 EOF 字符来退出解释器，你也可以键入 exit() 来退出解释器。</p><h2 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h2><p>作为正式的程序员，你可能想要将上述的代码写到一个源文件。那么我们来创建一个 helloworld.py 文件，用你喜欢的任何编辑器来创建这个文件，我使用 Vim ，你可以使用基于 GUI 的工具，如实验楼环境桌面上的 gedit。</p><p>我们建议使用 Vim，在这里我们简单的使用它，你可以在实验楼的课程 Vim编辑器 里深入学习。</p><p>键入 vim helloworld.py 来启动 Vim 并编辑 helloworld.py，启动后不要乱按键。</p><p>然后按 i 键进入插入模式，此时你可以看到左下角有 “插入” 两个字，现在你可以键入下面的代码了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">print(&quot;Hello World!&quot;)</span><br></pre></td></tr></table></figure><p>其中第一行的前两个字符 <code>#!</code> 称为 <code>Shebang</code> ，目的是告诉 shell 使用 Python 解释器执行其下面的代码。</p><p>然后按 Esc 键退出插入模式，再键入 :wq 回车，Vim 就会保存文件并退出。</p><p>要运行脚本文件 helloworld.py，还要为文件添加可执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x helloworld.py</span><br></pre></td></tr></table></figure><p>然后执行脚本文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;helloworld.py</span><br></pre></td></tr></table></figure><h2 id="代码风格建议"><a href="#代码风格建议" class="headerlink" title="代码风格建议"></a>代码风格建议</h2><p>在 Python 中，空格很重要，我们使用空格将标识符区分开，行开始处的空格我们称之为缩进，如果你的缩进是错误的，Python 解释器会抛出错误。例如下面情形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 12</span><br><span class="line">&gt;&gt;&gt;   a &#x3D; 12</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    a &#x3D; 12</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure><p>这是因为第二行开始处出现了多余的空格，所以需要经常检查代码的缩进。</p><p>如果你在代码中混用制表符和空格，这种缩进错误会很常见。</p><p>所以如果是用空格，就一直用空格缩进，不要使用制表符。</p><p>建议遵守以下约定：</p><ul><li>使用 4 个空格来缩进</li><li>永远不要混用空格和制表符</li><li>在函数之间空一行</li><li>在类之间空两行</li><li>字典，列表，元组以及参数列表中，在 , 后添加一个空格。对于字典，: 后面也添加一个空格</li><li>在赋值运算符和比较运算符周围要有空格（参数列表中除外），但是括号里侧不加空格：<code>a = f(1, 2) + g(3, 4)</code></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释是一些文本用来解释此处代码是做什么的，写注释是为了使他人更容易理解代码。</p><p>Python 的注释以 # 字符开始的，在 # 字符到行尾之间的所有东西都被程序忽略为注释，也就说对程序没有任何影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; # 这是一个注释</span><br><span class="line">&gt;&gt;&gt; # 下面这一行是求两数之和</span><br><span class="line">&gt;&gt;&gt; a &#x3D; 12 + 34</span><br><span class="line">&gt;&gt;&gt; print(a) # 这里也是注释 :)</span><br></pre></td></tr></table></figure><p>注释主要面向的人群是开发人员和维护代码库的人员，所以如果你写了一些复杂代码，你应该写足够的注释在里面，以便让其他任何人能够通过你的注释读懂代码。你应该总是在 # 后跟一个空格，然后再写注释。你也可以做一些标准的注释，像下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># FIXME -- fix these code later</span><br><span class="line"># TODO -- in future you have to do this</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块是包含了我们能复用的代码的文件，包含了不同的函数定义，变量。模块文件通常以 .py 为扩展名。</p><p>Python 本身在默认安装时就带有大量的模块。我们之后将会用到其中的一部分。在使用模块前先导入它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import math</span><br><span class="line">&gt;&gt;&gt; print(math.e)</span><br><span class="line">2.71828182846</span><br></pre></td></tr></table></figure><p>我们会在模块这个实验里学习更多有关模块的知识。</p>]]></content>
      
      
      <categories>
          
          <category> Python3 简明教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 查找替换</title>
      <link href="2017/07/08/Vim%20%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/"/>
      <url>2017/07/08/Vim%20%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>Vim 查找替换</p><h2 id="字符的替换及撤销-Undo操作"><a href="#字符的替换及撤销-Undo操作" class="headerlink" title="字符的替换及撤销(Undo操作)"></a>字符的替换及撤销(Undo操作)</h2><h3 id="替换和撤销-Undo-命令"><a href="#替换和撤销-Undo-命令" class="headerlink" title="替换和撤销(Undo)命令"></a>替换和撤销(Undo)命令</h3><p>替换和Undo命令都是针对普通模式下的操作</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>r+&lt;待替换字母&gt;</td><td>将游标所在字母替换为指定字母</td></tr><tr><td>R</td><td>连续替换，直到按下Esc</td></tr><tr><td>cc</td><td>替换整行，即删除游标所在行，并进入插入模式</td></tr><tr><td>cw</td><td>替换一个单词，即删除一个单词，并进入插入模式</td></tr><tr><td>C(大写)</td><td>替换游标以后至行末</td></tr><tr><td>~</td><td>反转游标所在字母大小写</td></tr><tr><td>u{n}</td><td>撤销一次或n次操作</td></tr><tr><td>U(大写)</td><td>撤销当前行的所有修改</td></tr><tr><td>Ctrl+r</td><td>redo，即撤销undo的操作</td></tr></tbody></table><p>打开文件进行编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim practice_2</span><br><span class="line"># 输入以下文本</span><br><span class="line">www.shiyanlou.com</span><br></pre></td></tr></table></figure><p>然后依次进行如下操作</p><ul><li>输入fa 跳转到第一个a字符</li><li>输入r，并且输入b，a字符被b字符替换（实用）</li><li>输入R替换字符，输入新字符串，输入完按ESC回到普通模式（实用）</li><li>输入cc替换整行字符，输入新字符串，输入完按ESC回到普通模式</li><li>输入cw 替换一个英文字(word)，输入完按ESC回到普通模式（实用）</li><li>输入~，翻转游标所在字符的大小写</li><li>输入C 替换至行尾，即游标所在处以后的字都会被替换，输入完按ESC回到普通模式</li><li>输入u 撤销上一次的操作</li></ul><p>最后可以尝试下输入更多行的文本内容，并进行跳转到指定行的操作：</p><ul><li>输入2G，跳转到2行</li></ul><h2 id="快速缩进"><a href="#快速缩进" class="headerlink" title="快速缩进"></a>快速缩进</h2><h3 id="使用命令进行快速调整缩进操作"><a href="#使用命令进行快速调整缩进操作" class="headerlink" title="使用命令进行快速调整缩进操作"></a>使用命令进行快速调整缩进操作</h3><p>这一小节学习如何在vim中进行快速缩进，缩进操作均在普通模式下有效</p><p>打开文件进行编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim protocols</span><br></pre></td></tr></table></figure><ul><li>普通模式下输入15G，跳转到15行</li><li>普通模式下输入<code>&gt;&gt;</code> 整行将向右缩进（使用，用于格式化代码超爽）</li><li>普通模式下输入<code>&lt;&lt;</code> 整行向左回退</li><li>普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数</li></ul><h3 id="shiftwidth命令"><a href="#shiftwidth命令" class="headerlink" title="shiftwidth命令"></a>shiftwidth命令</h3><p>shiftwidth命令是指上一节<code>&gt;&gt;</code>命令产生的缩进（可以简写成sw）</p><p>普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数</p><p>获取目前的设定值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set shiftwidth?</span><br></pre></td></tr></table></figure><p>设置缩进为10个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set shiftwidth&#x3D;10</span><br></pre></td></tr></table></figure><p>输入ESC回到普通模式，再次尝试&gt;&gt;看缩进量是否变化</p><h3 id="调整文本位置"><a href="#调整文本位置" class="headerlink" title="调整文本位置"></a>调整文本位置</h3><p>命令行模式下输入:ce(center)命令使本行内容居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:ce</span><br></pre></td></tr></table></figure><p>命令行模式下输入:ri(right)命令使本行文本靠右</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:ri</span><br></pre></td></tr></table></figure><p>命令行模式下输入:le(left)命令使本行内容靠左</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:le</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h3><p>普通模式下输入/然后键入需要查找的字符串 按回车后就会进行查找。</p><p>？与/功能相同，只不过？是向上而/是向下查找。</p><p>进入查找之后，输入n和N可以继续查找</p><p>n表示继续查找，N反向查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim protocols</span><br></pre></td></tr></table></figure><ul><li>普通模式下输入<code>/icmp</code>查找字符串icmp</li><li>普通模式下输入<code>n</code>查找下一个icmp</li><li>普通模式下输入<code>？tcp</code>向上查找字符串tcp</li><li>普通模式下输入<code>N</code>查找上一个出现的tcp</li></ul><h3 id="高级查找"><a href="#高级查找" class="headerlink" title="高级查找"></a>高级查找</h3><ul><li>普通模式下输入<code>\*</code>寻找游标所在处的单词</li><li>普通模式下输入<code>\#</code>同上，但 <code>\#</code> 是向前（上）找，<code>\*</code>则是向后（下）找</li><li>普通模式下输入<code>g\*</code>同<code>\*</code> ，但部分符合该单词即可</li><li>普通模式下输入<code>g\#</code>同<code>\#</code> ，但部分符合该单词即可</li></ul><p>以上查找n,N 的继续查找命令依然可以用</p>]]></content>
      
      
      <categories>
          
          <category> Vim 编辑器 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 高级功能入门换</title>
      <link href="2017/07/08/Vim%20%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD%E5%85%A5%E9%97%A8/"/>
      <url>2017/07/08/Vim%20%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Vim 高级功能入门</p><h2 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h2><h3 id="使用vim编辑多个文件"><a href="#使用vim编辑多个文件" class="headerlink" title="使用vim编辑多个文件"></a>使用vim编辑多个文件</h3><p>编辑多个文件有两种形式，一种是在进入vim前使用的参数就是多个文件。另一种就是进入vim后再编辑其他的文件。</p><p>同时创建两个新文件并编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim 1.txt 2.txt</span><br></pre></td></tr></table></figure><p>默认进入1.txt文件的编辑界面</p><p>命令行模式下输入:n编辑2.txt文件，可以加!即:n!强制切换，之前一个文件的输入没有保存，仅仅切换到另一个文件<br>命令行模式下输入:N编辑1.txt文件，可以加!即:N!强制切换，之前文件内的输入没有保存，仅仅是切换到另一个文件</p><h3 id="进入vim后打开新文件"><a href="#进入vim后打开新文件" class="headerlink" title="进入vim后打开新文件"></a>进入vim后打开新文件</h3><ul><li>命令行模式下输入:e 3.txt 打开新文件3.txt</li><li>命令行模式下输入:e# 回到前一个文件</li><li>命令行模式下输入:ls可以列出以前编辑过的文档</li><li>命令行模式下输入:b 2.txt（或者编号）可以直接进入文件2.txt编辑</li><li>命令行模式下输入:bd 2.txt（或者编号）可以删除以前编辑过的列表中的文件项目</li><li>命令行模式下输入:e! 4.txt，新打开文件4.txt，放弃正在编辑的文件</li><li>命令行模式下输入:f 显示正在编辑的文件名</li><li>命令行模式下输入:f new.txt，改变正在编辑的文件名字为new.txt</li></ul><h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><p>如果因为断电等原因造成文档没有保存，可以采用恢复方式，vim -r进入文档后，输入:ewcover 1.txt来恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim -r 1.txt</span><br></pre></td></tr></table></figure><h2 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h2><h3 id="可视模式命令简介"><a href="#可视模式命令简介" class="headerlink" title="可视模式命令简介"></a>可视模式命令简介</h3><ul><li>在普通模式下输入v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v会后就会取消选取。</li><li>在普通模式下输入Shift+v（小写），进入行选择模式，按下V之后就会把整行选取，您可以上下移动光标选更多的行，同样，再按一次Shift+v就可以取消选取。</li><li>在普通模式下输入 Ctrl+v（小写），这是区域选择模式，可以进行矩形区域选择，再按一次Ctrl+v取消选取。</li><li>在可视模式下输入d删除选取区域内容</li><li>在可视模式下输入y复制选取区域内容</li></ul><h3 id="可视模式命令练习"><a href="#可视模式命令练习" class="headerlink" title="可视模式命令练习"></a>可视模式命令练习</h3><p>拷贝练习文件到当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp &#x2F;etc&#x2F;protocols .</span><br></pre></td></tr></table></figure><p>打开练习文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim protocols</span><br></pre></td></tr></table></figure><ul><li>在普通模式下9G跳转到第9行,输入Shift+v（小写V），进入可视模式进行行选择，选中5行，按下&gt;&gt;缩进，将5行整体缩进一个shiftwidth</li><li>在普通模式下输入 Ctrl+v（小写V），进入可视模式进行矩形区域选择，选中第一列字符然后x删除整列</li></ul><h2 id="视窗操作"><a href="#视窗操作" class="headerlink" title="视窗操作"></a>视窗操作</h2><h3 id="视窗操作简介"><a href="#视窗操作简介" class="headerlink" title="视窗操作简介"></a>视窗操作简介</h3><p>vim可以在一个界面里打开多个窗口进行编辑，这些编辑窗口称为vim的视窗。</p><p>打开方法有很多种，例如可以使用在命令行模式下输入:new 打开一个新的vim视窗，并进入视窗编辑一个新文件（普通模式下输入Ctrl+w也可以,但是Ctrl+w在chrome下会与chrome关闭标签页的快捷键冲突，所以使用该快捷键你可以在IE或其它浏览器进行练习），除了:new命令，下述列举的多种方法也可以在命令模式或普通模式下打开新的视窗：</p><ul><li>命令行模式下输入:sp 1.txt 打开新的水平分屏视窗来编辑1.txt</li><li>命令行模式下输入:vsp 2.txt 打开新的垂直分屏视窗来编辑2.txt</li><li>普通模式下Ctrl-w s 将当前窗口分割成两个水平的窗口</li><li>普通模式下Ctrl-w v 将当前窗口分割成两个垂直的窗口</li><li>普通模式下Ctrl-w q 即 :q 结束分割出来的视窗。如果在新视窗中有输入需要使用强制符！即:q!</li><li>普通模式下Ctrl-w o 打开一个视窗并且隐藏之前的所有视窗</li><li>普通模式下Ctrl-w j 移至下面视窗</li><li>普通模式下Ctrl-w k 移至上面视窗</li><li>普通模式下Ctrl-w h 移至左边视窗</li><li>普通模式下Ctrl-w l 移至右边视窗</li><li>普通模式下Ctrl-w J 将当前视窗移至下面</li><li>普通模式下Ctrl-w K 将当前视窗移至上面</li><li>普通模式下Ctrl-w H 将当前视窗移至左边</li><li>普通模式下Ctrl-w L 将当前视窗移至右边</li><li>普通模式下Ctrl-w - 减小视窗的高度</li><li>普通模式下Ctrl-w + 增加视窗的高度</li></ul><h3 id="视窗操作练习"><a href="#视窗操作练习" class="headerlink" title="视窗操作练习"></a>视窗操作练习</h3><p>打开练习文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim 1.txt</span><br></pre></td></tr></table></figure><ul><li>命令行模式下输入:new 打开一个新的vim视窗</li><li>命令行模式下输入:vsp 2.txt 打开新的横向视窗来编辑2.txt</li><li>命令行模式下输入:vsp 3.txt 打开新的横向视窗来编辑3.txt</li><li>如果使用非chrome浏览器可以使用Ctrl+w进行视窗间的跳转</li><li>分别在不同视窗的命令行模式下输入:q!退出多视窗编辑</li></ul><h2 id="文档加密"><a href="#文档加密" class="headerlink" title="文档加密"></a>文档加密</h2><h3 id="创建加密文档"><a href="#创建加密文档" class="headerlink" title="创建加密文档"></a>创建加密文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim -x file1</span><br></pre></td></tr></table></figure><p>输入您的密码</p><p>确认密码</p><p>这样在下一次打开时，vim就会要求你输入密码</p><h2 id="在vim执行外部命令"><a href="#在vim执行外部命令" class="headerlink" title="在vim执行外部命令"></a>在vim执行外部命令</h2><p>在命令行模式中输入!可以执行外部的shell命令</p><ul><li>:!ls 用于显示当前目录的内容</li><li>:!rm FILENAME用于删除名为 FILENAME 的文件</li><li>:w FILENAME可将当前 VIM 中正在编辑的文件另存为 FILENAME 文件\</li></ul><h2 id="帮助系统"><a href="#帮助系统" class="headerlink" title="帮助系统"></a>帮助系统</h2><h3 id="vim中的查看帮助"><a href="#vim中的查看帮助" class="headerlink" title="vim中的查看帮助"></a>vim中的查看帮助</h3><ul><li>普通模式下按F1打开vim自己预设的帮助文档</li><li>命令行模式下输入:h shiftwidth 打开名为shiftwidth的帮助文件</li><li>命令行模式下输入:ver 显示版本及参数</li></ul><h2 id="功能设定"><a href="#功能设定" class="headerlink" title="功能设定"></a>功能设定</h2><h3 id="vim的功能设定"><a href="#vim的功能设定" class="headerlink" title="vim的功能设定"></a>vim的功能设定</h3><p>可以在编辑文件的时候进行功能设定，如命令行模式下输入:set nu（显示行数），设定值退出vim后不会保存。要永久保存配置需要修改vim配置文件。</p><p>vim的配置文件~/.vimrc(实验楼环境中配置文件在/etc/vim/vimrc)，可以打开文件进行修改，不过务必小心不要影响vim正常使用</p><h3 id="获取目前的设定"><a href="#获取目前的设定" class="headerlink" title="获取目前的设定"></a>获取目前的设定</h3><ul><li>命令行模式下输入:set或者:se显示所有修改过的配置</li><li>命令行模式下输入:set all 显示所有的设定值</li><li>命令行模式下输入:set option? 显示option的设定值</li><li>命令行模式下输入:set nooption 取消当期设定值</li></ul><h3 id="set功能的说明"><a href="#set功能的说明" class="headerlink" title="set功能的说明"></a>set功能的说明</h3><ul><li>命令行模式下输入:set autoindent(ai) 设置自动缩进</li><li>命令行模式下输入:set autowrite(aw) 设置自动存档，默认未打开</li><li>命令行模式下输入:set background=dark或light，设置背景风格</li><li>命令行模式下输入:set backup(bk) 设置自动备份，默认未打开</li><li>命令行模式下输入: set cindent(cin) 设置C语言风格缩进</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vim 编辑器 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 文档编辑</title>
      <link href="2017/07/08/Vim%20%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91/"/>
      <url>2017/07/08/Vim%20%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>Vim 文档编辑</p><h2 id="vim-重复命令"><a href="#vim-重复命令" class="headerlink" title="vim 重复命令"></a>vim 重复命令</h2><h3 id="重复执行上次命令"><a href="#重复执行上次命令" class="headerlink" title="重复执行上次命令"></a>重复执行上次命令</h3><p>在普通模式下.(小数点)表示重复上一次的命令操作</p><p>拷贝测试文件到本地目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp &#x2F;etc&#x2F;protocols .</span><br></pre></td></tr></table></figure><p>打开文件进行编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim protocols</span><br></pre></td></tr></table></figure><p>普通模式下输入x，删除第一个字符，输入.(小数点)会再次删除一个字符，除此之外也可以重复dd的删除操作</p><h3 id="执行指定次数相同的命令"><a href="#执行指定次数相同的命令" class="headerlink" title="执行指定次数相同的命令"></a>执行指定次数相同的命令</h3><p>进入普通模式输入<code>N&lt;command&gt;</code>，N表示重复后面的次数，下面来练习以下：</p><p>打开文件文件进行编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim protocols</span><br></pre></td></tr></table></figure><p>下面你可以依次进行如下操作练习：</p><ul><li>输入10x，删除10个连续字符</li><li>输入3dd，将会删除3行文本</li></ul><p>在普通模式下，你还可以使用dw或者daw(delete a word)删除一个单词，所以你可以很容易的联想到dnw(n替换为相应数字)表示删除n个单词</p><h2 id="游标的快速跳转"><a href="#游标的快速跳转" class="headerlink" title="游标的快速跳转"></a>游标的快速跳转</h2><p>普通模式下，下列命令可以让光标快速调转到指定位置，我们分别讨论快速实现行间跳转和行内跳转</p><h3 id="行间跳转"><a href="#行间跳转" class="headerlink" title="行间跳转"></a>行间跳转</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>nG(n Shift+g)</td><td>游标移动到第 n 行(如果默认没有显示行号，请先进入命令模式，输入:set nu以显示行号)</td></tr><tr><td>gg</td><td>游标移动到到第一行</td></tr><tr><td>G(Shift+g)</td><td>到最后一行</td></tr></tbody></table><p>还是来练习一下吧：</p><p>使用vim打开练习文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim protocols</span><br></pre></td></tr></table></figure><p>依次进行如下操作练习：</p><ul><li>快速跳转到第9行，然后将其该行删除</li><li>回到第一行，向下删除8行</li><li>跳转到文档末，然后删除该行</li></ul><p>小技巧：你在完成依次跳转后，可以使用Ctrl+o快速回到上一次(跳转前)光标所在位置,这个技巧很实用，比如当你在写代码时，忽然想起有个bug，需要修改，这时候你跳过去改好了，只需要按下Ctrl+o就可以回到你之前的位置。vim中会用很多类似的小技巧就等着你去发掘。</p><h3 id="行内跳转"><a href="#行内跳转" class="headerlink" title="行内跳转"></a>行内跳转</h3><p>普通模式下使用下列命令在行内按照单词为单位进行跳转</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>到下一个单词的开头</td></tr><tr><td>e</td><td>到下一个单词的结尾</td></tr><tr><td>b</td><td>到前一个单词的开头</td></tr><tr><td>ge</td><td>到前一个单词的结尾</td></tr><tr><td>0或^</td><td>到行头</td></tr><tr><td>$</td><td>到行尾</td></tr><tr><td>f&lt;字母&gt;</td><td>向后搜索&lt;字母&gt;并跳转到第一个匹配的位置(非常实用)</td></tr><tr><td>F&lt;字母&gt;</td><td>向前搜索&lt;字母&gt;并跳转到第一个匹配的位置</td></tr><tr><td>t&lt;字母&gt;</td><td>向后搜索&lt;字母&gt;并跳转到第一个匹配位置之前的一个字母(不常用)</td></tr><tr><td>T&lt;字母&gt;</td><td>向前搜索&lt;字母&gt;并跳转到第一个匹配位置之后的一个字母(不常用)</td></tr></tbody></table><p>依次进行如下操作练习：</p><ul><li>在普通模式下，任意跳转到一行，使用w跳转到一个单词的开头，然后使用dw删除这个单词</li><li>在普通模式下，使用e跳转到一个单词的结尾，并使用~将游标所在字母变成大写或小写</li></ul><h2 id="复制粘贴和剪切"><a href="#复制粘贴和剪切" class="headerlink" title="复制粘贴和剪切"></a>复制粘贴和剪切</h2><h3 id="复制及粘贴文本"><a href="#复制及粘贴文本" class="headerlink" title="复制及粘贴文本"></a>复制及粘贴文本</h3><p>普通模式中使用y复制</p><ul><li>普通模式中，yy复制游标所在的整行（3yy表示复制3行）</li><li>普通模式中，y^ 复制至行首，或y0。不含光标所在处字符。</li><li>普通模式中，y$ 复制至行尾。含光标所在处字符。</li><li>普通模式中，yw 复制一个单词。</li><li>普通模式中，y2w 复制两个单词。</li><li>普通模式中，yG 复制至文本末。</li><li>普通模式中，y1G 复制至文本开头。</li></ul><p>普通模式中使用p粘贴</p><ul><li>普通模式中，p(小写)代表粘贴至光标后（下）</li><li>普通模式中，P(大写)代表粘贴至光标前（上）</li></ul><h3 id="剪切及粘贴"><a href="#剪切及粘贴" class="headerlink" title="剪切及粘贴"></a>剪切及粘贴</h3><p>其实前面讲得dd删除命令就是剪切，你每次dd删除文档内容后，便可以使用p来粘贴，也这一点可以让我们实现一个很爽快的功能——交换上下行：</p><p><code>ddp</code>,就这么简单，即实现了快速交换光标所在行与它下面的行</p>]]></content>
      
      
      <categories>
          
          <category> Vim 编辑器 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 快速入门</title>
      <link href="2017/07/08/Vim%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2017/07/08/Vim%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Vim 快速入门</p><h2 id="vim模式介绍"><a href="#vim模式介绍" class="headerlink" title="vim模式介绍"></a>vim模式介绍</h2><p>Vim具有6种基本模式和5种派生模式，我们这里只简单介绍下6种基本模式：</p><h3 id="普通模式-Normal-mode"><a href="#普通模式-Normal-mode" class="headerlink" title="普通模式(Normal mode)"></a>普通模式(Normal mode)</h3><blockquote><p>在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。这正好和许多新用户期待的操作方式相反（大多数编辑器默认模式为插入模式）。</p><p>Vim强大的编辑能来自于其普通模式命令。普通模式命令往往需要一个操作符结尾。例如普通模式命令dd删除当前行，但是第一个”d”的后面可以跟另外的移动命令来代替第二个d，比如用移动到下一行的”j”键就可以删除当前行和下一行。另外还可以指定命令重复次数，2dd（重复dd两次），和dj的效果是一样的。用户学习了各种各样的文本间移动／跳转的命令和其他的普通模式的编辑命令，并且能够灵活组合使用的话，能够比那些没有模式的编辑器更加高效的进行文本编辑。</p><p>在普通模式中，有很多方法可以进入插入模式。比较普通的方式是按a（append／追加）键或者i（insert／插入）键。</p></blockquote><h3 id="插入模式-Insert-mode"><a href="#插入模式-Insert-mode" class="headerlink" title="插入模式(Insert mode)"></a>插入模式(Insert mode)</h3><blockquote><p>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。</p><p>在插入模式中，可以按ESC键回到普通模式。</p></blockquote><h3 id="可视模式-Visual-mode"><a href="#可视模式-Visual-mode" class="headerlink" title="可视模式(Visual mode)"></a>可视模式(Visual mode)</h3><blockquote><p>这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的”文本对象”也能和移动命令一样用在这个模式中。</p></blockquote><h3 id="选择模式-Select-mode"><a href="#选择模式-Select-mode" class="headerlink" title="选择模式(Select mode)"></a>选择模式(Select mode)</h3><blockquote><p>这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。</p></blockquote><h3 id="命令行模式-Command-line-mode"><a href="#命令行模式-Command-line-mode" class="headerlink" title="命令行模式(Command line mode)"></a>命令行模式(Command line mode)</h3><blockquote><p>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（:键），搜索（/和?键）或者过滤命令（!键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。</p></blockquote><h3 id="Ex模式-Ex-mode"><a href="#Ex模式-Ex-mode" class="headerlink" title="Ex模式(Ex mode)"></a>Ex模式(Ex mode)</h3><blockquote><p>这和命令行模式比较相似，在使用:visual命令离开Ex模式前，可以一次执行多条命令。</p><p>这其中我们常用到就是普通模式、插入模式和命令行模式，本课程也只涉及这三个常用模式的内容</p></blockquote><h2 id="三种常用模式的切换"><a href="#三种常用模式的切换" class="headerlink" title="三种常用模式的切换"></a>三种常用模式的切换</h2><p>vim启动进入普通模式，处于插入模式或命令行模式时只需要按Esc或者Ctrl+[(这在vim课程环境中不管用)即可进入普通模式。普通模式中按i（插入）或a（附加）键都可以进入插入模式，普通模式中按:进入命令行模式。命令行模式中输入wq回车后保存并退出vim。</p><h2 id="进入vim"><a href="#进入vim" class="headerlink" title="进入vim"></a>进入vim</h2><h3 id="使用vim命令进入vim界面"><a href="#使用vim命令进入vim界面" class="headerlink" title="使用vim命令进入vim界面"></a>使用vim命令进入vim界面</h3><p>vim后面加上你要打开的已存在的文件名或者不存在（则作为新建文件）的文件名。</p><p>打开Xfce终端，输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim practice_1.txt</span><br></pre></td></tr></table></figure><p>直接使用vim也可以打开vim编辑器，但是不会打开任何文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim</span><br></pre></td></tr></table></figure><p>进入命令行模式后输入:e 文件路径 同样可以打开相应文件。</p><h3 id="游标移动"><a href="#游标移动" class="headerlink" title="游标移动"></a>游标移动</h3><p>在进入vim后，按下i键进入插入模式。在该模式下您可以输入文本信息,下面请输入如下三行信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12345678</span><br><span class="line">abcdefghijk</span><br><span class="line">shiyanlou.com</span><br></pre></td></tr></table></figure><p>按Esc进入普通模式，在该模式下使用方向键或者h,j,k,l键可以移动游标。</p><table><thead><tr><th>按键</th><th>说明</th></tr></thead><tbody><tr><td>h</td><td>左</td></tr><tr><td>l</td><td>右（小写L）</td></tr><tr><td>j</td><td>下</td></tr><tr><td>k</td><td>上</td></tr><tr><td>w</td><td>移动到下一个单词</td></tr><tr><td>b</td><td>移动到上一个单词</td></tr></tbody></table><p>请尝试在普通模式下使用方向键移动光标到shiyanlou这几个字母上面。</p><h2 id="进入插入模式"><a href="#进入插入模式" class="headerlink" title="进入插入模式"></a>进入插入模式</h2><p>在普通模式下使用下面的键将进入插入模式，并可以从相应的位置开始输入</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>在当前光标处进行编辑</td></tr><tr><td>I</td><td>在行首插入</td></tr><tr><td>A</td><td>在行末插入</td></tr><tr><td>a</td><td>在光标后插入编辑</td></tr><tr><td>o</td><td>在当前行后插入一个新行</td></tr><tr><td>O</td><td>在当前行前插入一个新行</td></tr><tr><td>cw</td><td>替换从光标所在位置后到一个单词结尾的字符</td></tr></tbody></table><p>请尝试不同的从普通模式进入插入模式的方法，在最后一行shiyanlou前面加上www.，注意每次要先回到普通模式才能切换成以不同的方式进入插入模式</p><h2 id="保存文档"><a href="#保存文档" class="headerlink" title="保存文档"></a>保存文档</h2><p>从普通模式输入:进入命令行模式，输入w回车，保存文档。输入:w 文件名可以将文档另存为其他文件名或存到其它路径下</p><h2 id="退出vim"><a href="#退出vim" class="headerlink" title="退出vim"></a>退出vim</h2><h3 id="命令行模式下退出vim"><a href="#命令行模式下退出vim" class="headerlink" title="命令行模式下退出vim"></a>命令行模式下退出vim</h3><p>从普通模式输入:进入命令行模式，输入wq回车，保存并退出编辑</p><p>以下为其它几种退出方式：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:q!</td><td>强制退出，不保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:wq!</td><td>强制保存并退出</td></tr><tr><td>:w &lt;文件路径&gt;</td><td>另存为</td></tr><tr><td>:saveas 文件路径</td><td>另存为</td></tr><tr><td>:x</td><td>保存并退出</td></tr><tr><td>:wq</td><td>保存并退出</td></tr></tbody></table><h3 id="普通模式下退出vim"><a href="#普通模式下退出vim" class="headerlink" title="普通模式下退出vim"></a>普通模式下退出vim</h3><p>普通模式下输入Shift+zz即可保存退出vim</p><h2 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h2><h3 id="普通模式下删除vim文本信息"><a href="#普通模式下删除vim文本信息" class="headerlink" title="普通模式下删除vim文本信息"></a>普通模式下删除vim文本信息</h3><p>进入普通模式，使用下列命令可以进行文本快速删除：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>删除游标所在的字符</td></tr><tr><td>X</td><td>删除游标所在前一个字符</td></tr><tr><td>Delete</td><td>同x</td></tr><tr><td>dd</td><td>删除整行</td></tr><tr><td>dw</td><td>删除一个单词（不适用中文）</td></tr><tr><td>d$或D</td><td>删除至行尾</td></tr><tr><td>d^</td><td>删除至行首</td></tr><tr><td>dG</td><td>删除到文档结尾处</td></tr><tr><td>d1G</td><td>删至文档首部</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vim 编辑器 （实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挑战：初始化 Git 仓库</title>
      <link href="2017/07/07/%E6%8C%91%E6%88%98%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%20Git%20%E4%BB%93%E5%BA%93/"/>
      <url>2017/07/07/%E6%8C%91%E6%88%98%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%20Git%20%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>挑战：初始化 Git 仓库</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>对应上一章文档中的内容，来创建我们第一个本地 Git 仓库。我们需要设置个人的 Git 信息，包括 username 和 email。另外需要对本地 Git 仓库进行初始化操作以及增加一些项目文件。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>设置 Git 信息；</li><li>完成本地 Git 仓库的初始化操作；</li><li>设置关联到远程仓库；</li><li>创建 README.md 文件并进行 commit（不需要 push 到远程仓库）；</li></ul><h3 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h3><ul><li>本地 Git 仓库目录固定为 <code>/home/shiyanlou/HelloGit/</code>。</li><li>远程仓库地址固定为 <code>git@shiyanlou.com/HelloGit.git</code>，远程版本库名称为 <code>origin</code>。</li><li>需要在本地目录中创建 <code>README.md</code> ，文件名为 <code>README.md</code>。并在其中增加文本 <code>Hello World</code>。</li></ul><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><code>git init</code>, <code>git commit</code> 命令练习。</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yeureka&quot;</span><br><span class="line">git config --global user.email &quot;yijinyanggg@gmail.com&quot;</span><br><span class="line">mkdir HelloGit</span><br><span class="line">cd HelloGit</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@shiyanlou.com&#x2F;HelloGit.git</span><br><span class="line">echo &quot;Hello World&quot; &gt;&gt; README.md</span><br><span class="line">git add README.md # 或者 git add *</span><br><span class="line">git commit -m &quot;add readme.md&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git 实战教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 基本用法（下）</title>
      <link href="2017/07/07/Git%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>2017/07/07/Git%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Git 基本用法（下）</p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>在进行该实验之前，可以先clone一个练习项目gitproject:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;shiyanlou&#x2F;gitproject</span><br></pre></td></tr></table></figure><p>本节中的实验操作都是在该项目中完成。</p><h2 id="比较内容"><a href="#比较内容" class="headerlink" title="比较内容"></a>比较内容</h2><h3 id="比较提交-Git-Diff"><a href="#比较提交-Git-Diff" class="headerlink" title="比较提交 - Git Diff"></a>比较提交 - Git Diff</h3><p>现在我们对项目做些修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd gitproject</span><br><span class="line"># 向README文件添加一行</span><br><span class="line">$ echo &quot;new line&quot; &gt;&gt; README.md</span><br><span class="line"># 添加新的文件file1</span><br><span class="line">$ echo &quot;new file&quot; &gt;&gt; file1</span><br></pre></td></tr></table></figure><p>使用git status查看当前修改的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#39;origin&#x2F;master&#39;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   README.md</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">    file1</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>可以看到一个文件修改了，另外一个文件添加了。如何查看修改的文件内容呢，那就需要使用git diff命令。git diff命令的作用是比较修改的或提交的文件内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a&#x2F;README.md b&#x2F;README.md</span><br><span class="line">index 21781dd..410e719 100644</span><br><span class="line">--- a&#x2F;README.md</span><br><span class="line">+++ b&#x2F;README.md</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> gitproject</span><br><span class="line"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">+new line</span><br></pre></td></tr></table></figure><p>上面的命令执行后需要使用q退出。命令输出当前工作目录中修改的内容，并不包含新加文件，请注意这些内容还没有添加到本地缓存区。</p><p>将修改内容添加到本地缓存区，通配符可以把当前目录下所有修改的新增的文件都自动添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add *</span><br></pre></td></tr></table></figure><p>再执行git diff会发现没有任何内容输出，说明当前目录的修改都被添加到了缓存区，如何查看缓存区内与上次提交之间的差别呢？需要使用–cached参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached</span><br><span class="line">diff --git a&#x2F;README.md b&#x2F;README.md</span><br><span class="line">index 21781dd..410e719 100644</span><br><span class="line">--- a&#x2F;README.md</span><br><span class="line">+++ b&#x2F;README.md</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> gitproject</span><br><span class="line"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">+new line</span><br><span class="line">diff --git a&#x2F;file1 b&#x2F;file1</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..fa49b07</span><br><span class="line">--- &#x2F;dev&#x2F;null</span><br><span class="line">+++ b&#x2F;file1</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+new file</span><br></pre></td></tr></table></figure><p>可以看到输出中已经包含了新加文件的内容，因为file1已经添加到了缓存区。</p><p>最后我们提交代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &#39;update code&#39;</span><br></pre></td></tr></table></figure><p>提交后git diff与git diff –cached都不会有任何输出了。</p><h3 id="比较分支"><a href="#比较分支" class="headerlink" title="比较分支"></a>比较分支</h3><p>可以用 git diff 来比较项目中任意两个分支的差异。</p><p>我们首先创建一个新的分支test，并在该分支上提交一些修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建test分支并切换到该分支</span><br><span class="line">$ git branch test</span><br><span class="line">$ git checkout test</span><br><span class="line"># 添加新的一行到file1</span><br><span class="line">$ echo &quot;branch test&quot; &gt;&gt; file1</span><br><span class="line"># 创建新的文件file2</span><br><span class="line">$ echo &quot;new file2&quot; &gt;&gt; file2</span><br><span class="line"># 提交所有修改</span><br><span class="line">$ git add *</span><br><span class="line">$ git commit -m &#39;update test branch&#39;</span><br></pre></td></tr></table></figure><p>然后，我们查看test分支和master之间的差别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git diff master test</span><br><span class="line">diff --git a&#x2F;file1 b&#x2F;file1</span><br><span class="line">index fa49b07..17059cd 100644</span><br><span class="line">--- a&#x2F;file1</span><br><span class="line">+++ b&#x2F;file1</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> new file</span><br><span class="line">+branch test</span><br><span class="line">diff --git a&#x2F;file2 b&#x2F;file2</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..80e7991</span><br><span class="line">--- &#x2F;dev&#x2F;null</span><br><span class="line">+++ b&#x2F;file2</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+new file2</span><br></pre></td></tr></table></figure><p>git diff 是一个难以置信的有用的工具，可以找出你项目上任意两个提交点间的差异。可以使用git help diff详细查看其他参数和功能。</p><h3 id="更多的比较选项"><a href="#更多的比较选项" class="headerlink" title="更多的比较选项"></a>更多的比较选项</h3><p>如果你要查看当前的工作目录与另外一个分支的差别，你可以用下面的命令执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 切换到master</span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line"># 查看与test分支的区别</span><br><span class="line">$ git diff test</span><br><span class="line">diff --git a&#x2F;file1 b&#x2F;file1</span><br><span class="line">index 17059cd..fa49b07 100644</span><br><span class="line">--- a&#x2F;file1</span><br><span class="line">+++ b&#x2F;file1</span><br><span class="line">@@ -1,2 +1 @@</span><br><span class="line"> new file</span><br><span class="line">-branch test</span><br><span class="line">diff --git a&#x2F;file2 b&#x2F;file2</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index 80e7991..0000000</span><br><span class="line">--- a&#x2F;file2</span><br><span class="line">+++ &#x2F;dev&#x2F;null</span><br><span class="line">@@ -1 +0,0 @@</span><br><span class="line">-new file2</span><br></pre></td></tr></table></figure><p>你也以加上路径限定符，来只比较某一个文件或目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git diff test file1</span><br><span class="line">diff --git a&#x2F;file1 b&#x2F;file1</span><br><span class="line">index 17059cd..fa49b07 100644</span><br><span class="line">--- a&#x2F;file1</span><br><span class="line">+++ b&#x2F;file1</span><br><span class="line">@@ -1,2 +1 @@</span><br><span class="line"> new file</span><br><span class="line">-branch test</span><br></pre></td></tr></table></figure><p>上面这条命令会显示你当前工作目录下的file1与test分支之间的差别。</p><p>–stat 参数可以统计一下有哪些文件被改动，有多少行被改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git diff test --stat</span><br><span class="line"> file1 | 1 -</span><br><span class="line"> file2 | 1 -</span><br><span class="line"> 2 files changed, 2 deletions(-)</span><br></pre></td></tr></table></figure><h2 id="分布式的工作流程"><a href="#分布式的工作流程" class="headerlink" title="分布式的工作流程"></a>分布式的工作流程</h2><h3 id="分布式的工作流程-1"><a href="#分布式的工作流程-1" class="headerlink" title="分布式的工作流程"></a>分布式的工作流程</h3><p> 你目前的项目在/home/shiyanlou/gitproject目录下，这是我们的git 仓库(repository)，另一个用户也想与你协作开发。他的工作目录在这台机器上，如何让他提交代码到你的git仓库呢？</p><p>首先，我们假设另一个用户也用shiyanlou用户登录，只是工作在不同的目录下开发代码，实际工作中不太可能发生，大部分情况都是多个用户，这个假设只是为了让实验简化。</p><p>该用户需要从git仓库进行克隆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进入到临时目录</span><br><span class="line">$ cd &#x2F;tmp</span><br><span class="line"># 克隆git仓库</span><br><span class="line">$ git clone &#x2F;home&#x2F;shiyanlou&#x2F;gitproject myrepo</span><br><span class="line">$ ls -l myrepo</span><br><span class="line">-rw-rw-r-- 1 shiyanlou shiyanlou 31 Dec 22 08:24 README.md</span><br><span class="line">-rw-rw-r-- 1 shiyanlou shiyanlou  9 Dec 22 08:24 file1</span><br></pre></td></tr></table></figure><p>这就建了一个新的叫”myrepo”的目录，这个目录里包含了一份gitproject仓库的克隆。这份克隆和原始的项目一模一样，并且拥有原始项目的历史记录。</p><p>在myrepo做了一些修改并且提交:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cd myrepo</span><br><span class="line"></span><br><span class="line"># 添加新的文件newfile</span><br><span class="line">$ echo &quot;newcontent&quot; &gt; newfile</span><br><span class="line"></span><br><span class="line"># 提交修改</span><br><span class="line">$ git add newfile</span><br><span class="line">$ git commit -m &quot;add newfile&quot;</span><br></pre></td></tr></table></figure><p>myrepo修改完成后，如果我们想合并这份修改到gitproject的git仓库该如何做呢？</p><p>可以在仓库/home/shiyanlou/gitproject中把myrepo的修改给拉 (pull)下来。执行下面几条命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;home&#x2F;shiyanlou&#x2F;gitproject</span><br><span class="line">$ git pull &#x2F;tmp&#x2F;myrepo master</span><br><span class="line">remote: Counting objects: 5, done.</span><br><span class="line">remote: Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3&#x2F;3), done.</span><br><span class="line">From &#x2F;tmp&#x2F;myrepo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Updating 8bb57aa..866c452</span><br><span class="line">Fast-forward</span><br><span class="line"> newfile | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 newfile</span><br><span class="line"></span><br><span class="line"># 查看当前目录文件</span><br><span class="line">$ ls                                                                                                    [8:28:02]</span><br><span class="line">README.md  file1  newfile</span><br></pre></td></tr></table></figure><p>这就把myrepo的主分支合并到了gitproject的当前分支里了。</p><p>如果gitproject在myrepo修改文件内容的同时也做了修改的话，可能需要手工去修复冲突。</p><p>如果你要经常操作远程分支(remote branch),你可以定义它们的缩写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add myrepo &#x2F;tmp&#x2F;myrepo</span><br></pre></td></tr></table></figure><p>git pull命令执行两个操作: 它从远程分支(remote branch)抓取修改git fetch的内容，然后把它合并git merge进当前的分支。</p><p>gitproject里可以用git fetch 来执行git pull前半部分的工作， 但是这条命令并不会把抓下来的修改合并到当前分支里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch myrepo</span><br><span class="line">From &#x2F;tmp&#x2F;myrepo</span><br><span class="line"> * [new branch]      master     -&gt; myrepo&#x2F;master</span><br></pre></td></tr></table></figure><p>获取后，我们可以通过git log查看远程分支做的所有修改，由于我们已经合并了所有修改，所以不会有任何输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p master..myrepo&#x2F;master</span><br></pre></td></tr></table></figure><p>当检查完修改后，gitproject可以把修改合并到它的主分支中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge myrepo&#x2F;master</span><br><span class="line">Already up-to-date.</span><br></pre></td></tr></table></figure><p>如果我们在myrepo目录下执行git pull会发生什么呢？</p><p>myrepo会从克隆的位置拉取代码并更新本地仓库，就是把gitproject上的修改同步到本地:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 进入到gitproject</span><br><span class="line">$ cd &#x2F;home&#x2F;shiyanlou&#x2F;gitproject</span><br><span class="line"></span><br><span class="line"># 添加一行内容到newfile</span><br><span class="line">$ echo &quot;gitproject: new line&quot; &gt;&gt; newfile</span><br><span class="line"></span><br><span class="line"># 提交修改</span><br><span class="line">$ git commit -a -m &#39;add newline to newfile&#39;</span><br><span class="line">[master 8c31532] add newline to newfile</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line"># 进入myrepo目录</span><br><span class="line">$ cd &#x2F;tmp&#x2F;myrepo</span><br><span class="line"></span><br><span class="line"># 同步gitproject的所有修改</span><br><span class="line">$ git pull</span><br><span class="line">remote: Counting objects: 6, done.</span><br><span class="line">remote: Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3&#x2F;3), done.</span><br><span class="line">From &#x2F;home&#x2F;shiyanlou&#x2F;gitproject</span><br><span class="line">   8bb57aa..8c31532  master     -&gt; origin&#x2F;master</span><br><span class="line">Updating 866c452..8c31532</span><br><span class="line">Fast-forward</span><br><span class="line"> newfile | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>因为myrepo是从gitproject仓库克隆的，那么他就不需要指定gitproject仓库的地 址。因为Git把gitproject仓库的地址存储到myrepo的配置文件中，这个地址就是在git pull时默认使用的远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --get remote.origin.url</span><br><span class="line">&#x2F;home&#x2F;shiyanlou&#x2F;gitproject</span><br></pre></td></tr></table></figure><p>如果myrepo和gitproject在不同的主机上，可以通过ssh协议来执行clone 和pull操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone localhost:&#x2F;home&#x2F;shiyanlou&#x2F;gitproject test</span><br></pre></td></tr></table></figure><p>这个命令会提示你输入shiyanlou用户的密码，用户密码随机，可以点击屏幕上方的SSH按钮查看。</p><h3 id="公共Git仓库"><a href="#公共Git仓库" class="headerlink" title="公共Git仓库"></a>公共Git仓库</h3><p>开发过程中，通常大家都会使用一个公共的仓库，并clone到自己的开发环境中，完成一个阶段的代码后可以告诉目标仓库的维护者来pull自己的代码。</p><p>如果你和维护者都在同一台机器上有帐号，那么你们可以互相从对 方的仓库目录里直接拉所作的修改，git命令里的仓库地址也可以是本地的某个目录名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &#x2F;path&#x2F;to&#x2F;repository</span><br><span class="line">$ git pull &#x2F;path&#x2F;to&#x2F;other&#x2F;repository</span><br></pre></td></tr></table></figure><p>也可以是一个ssh地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone ssh:&#x2F;&#x2F;yourhost&#x2F;~you&#x2F;repository</span><br></pre></td></tr></table></figure><h3 id="将修改推到一个公共仓库"><a href="#将修改推到一个公共仓库" class="headerlink" title="将修改推到一个公共仓库"></a>将修改推到一个公共仓库</h3><p>通过http或是git协议，其它维护者可以通过远程访问的方式抓取(fetch)你最近的修改，但是他们 没有写权限。如何将本地私有仓库的最近修改主动上传到公共仓库中呢？</p><p>最简单的办法就是用git push命令，推送本地的修改到远程Git仓库，执行下面的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push ssh:&#x2F;&#x2F;yourserver.com&#x2F;~you&#x2F;proj.git master:master</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">$ git push ssh:&#x2F;&#x2F;yourserver.com&#x2F;~you&#x2F;proj.git master</span><br></pre></td></tr></table></figure><p>git push命令的目地仓库可以是ssh或http/https协议访问。</p><h3 id="当推送代码失败时要怎么办"><a href="#当推送代码失败时要怎么办" class="headerlink" title="当推送代码失败时要怎么办"></a>当推送代码失败时要怎么办</h3><p>如果推送(push)结果不是快速向前fast forward，可能会报像下面一样的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: remote &#39;refs&#x2F;heads&#x2F;master&#39; is not an ancestor of</span><br><span class="line">local  &#39;refs&#x2F;heads&#x2F;master&#39;.</span><br><span class="line">Maybe you are not up-to-date and need to pull first?</span><br><span class="line">error: failed to push to &#39;ssh:&#x2F;&#x2F;yourserver.com&#x2F;~you&#x2F;proj.git&#39;</span><br></pre></td></tr></table></figure><p>这种情况通常是因为没有使用git pull获取远端仓库的最新更新，在本地修改的同时，远端仓库已经变化了（其他协作者提交了代码），此时应该先使用git pull合并最新的修改后再执行git push：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">$ git push ssh:&#x2F;&#x2F;yourserver.com&#x2F;~you&#x2F;proj.git master</span><br></pre></td></tr></table></figure><h2 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h2><h3 id="轻量级标签"><a href="#轻量级标签" class="headerlink" title="轻量级标签"></a>轻量级标签</h3><p>我们可以用 git tag不带任何参数创建一个标签(tag)指定某个提交(commit):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 进入到gitproject目录</span><br><span class="line">$ cd &#x2F;home&#x2F;shiyanlou&#x2F;gitproject</span><br><span class="line"></span><br><span class="line"># 查看git提交记录</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 选择其中一个记录标志位stable-1的标签，注意需要将后面的8c315325替换成仓库下的真实提交内，commit的名称很长，通常我们只需要写前面8位即可</span><br><span class="line">$ git tag stable-1 8c315325</span><br><span class="line"></span><br><span class="line"># 查看当前所有tag</span><br><span class="line">$ git tag</span><br><span class="line">stable-1</span><br></pre></td></tr></table></figure><p>这样，我们可以用stable-1 作为提交 8c315325 的代称。</p><p>前面这样创建的是一个“轻量级标签”。</p><p>如果你想为一个tag添加注释，或是为它添加一个签名, 那么我们就需要创建一个 “标签对象”。</p><h3 id="标签对象"><a href="#标签对象" class="headerlink" title="标签对象"></a>标签对象</h3><p>git tag中使用-a， -s 或是 -u三个参数中任意一个，都会创建一个标签对象，并且需要一个标签消息(tag message)来为tag添加注释。 如果没有-m 或是 -F 这些参数，命令执行时会启动一个编辑器来让用户输入标签消息。</p><p>当这样的一条命令执行后，一个新的对象被添加到Git对象库中，并且标签引用就指向了一个标签对象，而不是指向一个提交，这就是与轻量级标签的区别。</p><p>下面是一个创建标签对象的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a stable-2 8c315325 -m &quot;stable 2&quot;</span><br><span class="line">$ git tag</span><br><span class="line">stable-1</span><br><span class="line">stable-2</span><br></pre></td></tr></table></figure><h3 id="签名的标签"><a href="#签名的标签" class="headerlink" title="签名的标签"></a>签名的标签</h3><p>签名标签可以让提交和标签更加完整可信。如果你配有GPG key，那么你就很容易创建签名的标签。首先你要在你的 .git/config 或 ~/.gitconfig 里配好key。</p><p>下面是示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    signingkey &#x3D; &lt;gpg-key-id&gt;</span><br></pre></td></tr></table></figure><p>你也可以用命令行来配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config (--global) user.signingkey &lt;gpg-key-id&gt;</span><br></pre></td></tr></table></figure><p>现在你可以在创建标签的时候使用-s 参数来创建“签名的标签”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -s stable-1 1b2e1d63ff</span><br></pre></td></tr></table></figure><p>如果没有在配置文件中配GPG key,你可以用-u参数直接指定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -u &lt;gpg-key-id&gt; stable-1 1b2e1d63ff</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节学习了下面知识点：</p><ul><li>git diff</li><li>分布式的工作流程</li><li>git tag</li></ul><p>对于初学者，如果不想深入git强大的高级功能的话，学完这个实验就可以了，因为后续实验内容用到的比较少，并且理解难度大。如果仍然感兴趣，建议使用一段时间git后再仔细学习后续实验，会有更好的收获。</p>]]></content>
      
      
      <categories>
          
          <category> Git 实战教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 基本用法（上）</title>
      <link href="2017/07/07/Git%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>2017/07/07/Git%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Git 基本用法（上）</p><h2 id="git的初始化"><a href="#git的初始化" class="headerlink" title="git的初始化"></a>git的初始化</h2><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><p>使用Git的第一件事就是设置你的名字和email,这些就是你在提交commit时的签名，每次提交记录里都会包含这些信息。使用git config命令进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Scott Chacon&quot;</span><br><span class="line">$ git config --global user.email &quot;schacon@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>执行了上面的命令后,会在家目录(/home/shiyanlou)下建立一个叫.gitconfig 的文件（该文件为隐藏文件，需要使用ls -al查看到）. 内容一般像下面这样，可以使用vim或cat查看文件内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~&#x2F;.gitconfig</span><br><span class="line">[user]</span><br><span class="line">        email &#x3D; schacon@gmail.com</span><br><span class="line">        name &#x3D; Scott Chacon</span><br></pre></td></tr></table></figure><p>上面的配置文件就是Git全局配置的文件，一般配置方法是git config –global &lt;配置名称&gt; &lt;配置的值&gt;。</p><p>如果你想使项目里的某个值与前面的全局设置有区别(例如把私人邮箱地址改为工作邮箱)，你可以在项目中使用git config 命令不带 –global 选项来设置. 这会在你当前的项目目录下创建 .git/config，从而使用针对当前项目的配置。</p><h3 id="获得一个Git仓库"><a href="#获得一个Git仓库" class="headerlink" title="获得一个Git仓库"></a>获得一个Git仓库</h3><p>既然我们现在把一切都设置好了，那么我们需要一个Git仓库。有两种方法可以得到它：一种是从已有的Git仓库中clone (克隆，复制)；还有一种是新建一个仓库，把未进行版本控制的文件进行版本控制。</p><h4 id="Clone一个仓库"><a href="#Clone一个仓库" class="headerlink" title="Clone一个仓库"></a>Clone一个仓库</h4><p>为了得到一个项目的拷贝(copy),我们需要知道这个项目仓库的地址(Git URL). Git能在许多协议下使用，所以Git URL可能以ssh://, http(s)://, git://. 有些仓库可以通过不只一种协议来访问。</p><p>我们在github.com上提供了一个名字为gitproject的供大家测试的公有仓库，这个仓库可以使用下面方式进行clone：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;shiyanlou&#x2F;gitproject</span><br></pre></td></tr></table></figure><p>clone操作完成后，会发现当前目录下多了一个gitproject文件夹，这个文件夹里的内容就是我们刚刚clone下来的代码。由于当前`gitproject仅是测试项目，里面仅有一个README.md文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd gitproject&#x2F;</span><br><span class="line">(master)$ ls </span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><p>细心的同学可以发现在命令提示符$前面多了个(master)。这是由于实验楼的Linux使用的是zsh Shell，zsh会判断当前的目录是否有Git仓库，如果是的话则自动把目前所在的git分支显示在提示符中。Git 分支的概念我们会在稍后介绍。</p><h4 id="初始化一个新的仓库"><a href="#初始化一个新的仓库" class="headerlink" title="初始化一个新的仓库"></a>初始化一个新的仓库</h4><p>可以对一个已存在的文件夹用下面的命令让它置于Git的版本控制管理之下。</p><p>创建代码目录project：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;home&#x2F;shiyanlou&#x2F;</span><br><span class="line">$ mkdir project</span><br></pre></td></tr></table></figure><p>进入到代码目录，创建并初始化Git仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd project</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>Git会输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Initialized empty Git repository in &#x2F;home&#x2F;shiyanlou&#x2F;project&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure><p>通过ls -la命令会发现project目录下会有一个名叫.git 的目录被创建，这意味着一个仓库被初始化了。可以进入到.git目录查看下有哪些内容。</p><h2 id="正常的工作流程"><a href="#正常的工作流程" class="headerlink" title="正常的工作流程"></a>正常的工作流程</h2><p>git的基本流程如下：</p><ul><li>创建或修改文件</li><li>使用git add命令添加新创建或修改的文件到本地的缓存区（Index）</li><li>使用git commit命令提交到本地代码库</li><li>（可选，有的时候并没有可以同步的远端代码库）使用git push命令将本地代码库同步到远端代码库</li></ul><p>进入我们刚才建立的project目录，分别创建文件file1，file2，file3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd project</span><br><span class="line">$ touch file1 file2 file3</span><br></pre></td></tr></table></figure><p>修改文件，可以使用vim编辑内容，也可以直接echo添加测试内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;test&quot; &gt;&gt; file1</span><br><span class="line">$ echo &quot;test&quot; &gt;&gt; file2</span><br><span class="line">$ echo &quot;test&quot; &gt;&gt; file3</span><br></pre></td></tr></table></figure><p>此时可以使用git status命令查看当前git仓库的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">   (use &quot;git add &lt;file&gt;...&quot;) to include in what will be committed)</span><br><span class="line"></span><br><span class="line">       file1</span><br><span class="line">       file2</span><br><span class="line">       file3</span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><p>可以发现，有三个文件处于untracked状态，下一步我们就需要用git add命令将他们加入到缓存区（Index）。</p><p>使用git add命令将新建的文件添加到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1 file2 file3</span><br></pre></td></tr></table></figure><p>然后再次执行git status就会发现新的变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">    (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">       new file: file1</span><br><span class="line">       new file: file2</span><br><span class="line">       new file: file3</span><br></pre></td></tr></table></figure><p>你现在为commit做好了准备，你可以使用 git diff 命令再加上 –cached 参数，看看缓存区中哪些文件被修改了。进入到git diff –cached界面后需要输入q才可以退出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached</span><br></pre></td></tr></table></figure><p>如果没有–cached参数，git diff 会显示当前你所有已做的但没有加入到索引里的修改。</p><p>如果你要做进一步的修改, 那就继续做, 做完后就把新修改的文件加入到缓存区中。</p><p>当所有新建，修改的文件都被添加到了缓存区，我们就要使用git commit提交到本地仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;add 3 files&quot;</span><br></pre></td></tr></table></figure><p>需要使用-m添加本次修改的注释，完成后就会记录一个新的项目版本。除了用git add 命令，我们还可以用下面的命令将所有没有加到缓存区的修改也一起提交，但-a命令不会添加新建的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a -m &quot;add 3 files&quot;</span><br></pre></td></tr></table></figure><p>再次输入git status查看状态，会发现当前的代码库已经没有待提交的文件了，缓存区已经被清空。</p><p>至此，我们完成了第一次代码提交，这次提交的代码中我们创建了三个新文件。需要注意的是如果是修改文件，也需要使用git add命令添加到缓存区才可以提交。如果是删除文件，则直接使用git rm命令删除后会自动将已删除文件的信息添加到缓存区，git commit提交后就会将本地仓库中的对应文件删除。</p><p>这个时候如果本地的仓库连接到了远程Git服务器，可以使用下面的命令将本地仓库同步到远端服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>这时候可能需要你输入在Git服务器上的用户名和密码。</p><h2 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h2><p>Git的分支可以让你在主线（master分支）之外进行代码提交，同时又不会影响代码库主线。分支的作用体现在多人协作开发中，比如一个团队开发软件，你负责独立的一个功能需要一个月的时间来完成，你就可以创建一个分支，只把该功能的代码提交到这个分支，而其他同事仍然可以继续使用主线开发，你每天的提交不会对他们造成任何影响。当你完成功能后，测试通过再把你的功能分支合并到主线。</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>一个Git仓库可以维护很多开发分支。现在我们来创建一个新的叫 experimental的分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch experimental</span><br></pre></td></tr></table></figure><p>运行git branch命令可以查看当前的分支列表，以及目前的开发环境处在哪个分支上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line"> experimental</span><br><span class="line">* master</span><br><span class="line">experimental</span><br></pre></td></tr></table></figure><p>分支是你刚才创建的，master分支是Git系统默认创建的主分支。星号标识了你当工作在哪个分支下，输入git checkout 分支名可以切换到其他分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout experimental</span><br><span class="line">Switched to branch &#39;experimental&#39;</span><br></pre></td></tr></table></figure><p>切换到experimental分支，切换完成后，先编辑里面的一个文件，再提交(commit)改动，最后切换回 “master”分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 修改文件file1</span><br><span class="line">$ echo &quot;update&quot; &gt;&gt; file1</span><br><span class="line"># 查看当前状态</span><br><span class="line">$ git status</span><br><span class="line"># 添加并提交file1的修改</span><br><span class="line">$ git add file1</span><br><span class="line">$ git commit -m &quot;update file1&quot;</span><br><span class="line"># 查看file1的内容</span><br><span class="line">$ cat file1</span><br><span class="line">test</span><br><span class="line">update</span><br><span class="line"># 切换到master分支</span><br><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure><p>查看下file1中的内容会发现刚才做的修改已经看不到了。因为刚才的修改时在experimental分支下，现在切换回了master分支，目录下的文件都是master分支上的文件了。</p><p>现在可以在master分支下再作一些不同的修改:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 修改文件file2</span><br><span class="line">$ echo &quot;update again&quot; &gt;&gt; file2</span><br><span class="line"># 查看当前状态</span><br><span class="line">$ git status</span><br><span class="line"># 添加并提交file2的修改</span><br><span class="line">$ git add file2</span><br><span class="line">$ git commit -m &quot;update file2 on master&quot;</span><br><span class="line"># 查看file2的内容</span><br><span class="line">$ cat file2</span><br><span class="line">test</span><br><span class="line">update again</span><br></pre></td></tr></table></figure><p>这时，两个分支就有了各自不同的修改，分支的内容都已经不同，如何将多个分支进行合并呢？</p><p>可以通过下面的git merge命令来合并experimental到主线分支master:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 切换到master分支</span><br><span class="line">$ git checkout master</span><br><span class="line"># 将experimental分支合并到master</span><br><span class="line">$ git merge  -m &#39;merge experimental branch&#39; experimental</span><br></pre></td></tr></table></figure><p>-m参数仍然是需要填写合并的注释信息。</p><p>由于两个branch修改了两个不同的文件，所以合并时不会有冲突，执行上面的命令后合并就完成了。</p><p>如果有冲突，比如两个分支都改了一个文件file3，则合并时会失败。首先我们在master分支上修改file3文件并提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 切换到master分支</span><br><span class="line">$ git checkout master</span><br><span class="line"># 修改file3文件</span><br><span class="line">$ echo &quot;master: update file3&quot; &gt;&gt; file3</span><br><span class="line"># 提交到master分支</span><br><span class="line">$ git commit -a -m &#39;update file3 on master&#39;</span><br></pre></td></tr></table></figure><p>然后切换到experimental，修改file3并提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 切换到experimental分支</span><br><span class="line">$ git checkout experimental</span><br><span class="line"># 修改file3文件</span><br><span class="line">$ echo &quot;experimental: update file3&quot; &gt;&gt; file3</span><br><span class="line"># 提交到experimental分支</span><br><span class="line">$ git commit -a -m &#39;update file3 on experimental&#39;</span><br></pre></td></tr></table></figure><p>切换到master进行合并：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge experimental</span><br><span class="line">Auto-merging file3</span><br><span class="line">CONFLICT (content): Merge conflict in file3</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>合并失败后先用git status查看状态，会发现file3显示为both modified，查看file3内容会发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat file3</span><br><span class="line">test</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">master: update file3</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">experimental: update file3</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; experimental</span><br></pre></td></tr></table></figure><p>上面的内容也可以使用git diff查看，先前已经提到git diff不加参数可以显示未提交到缓存区中的修改内容。</p><p>可以看到冲突的内容都被添加到了file3中，我们使用vim编辑这个文件，去掉git自动产生标志冲突的&lt;&lt;&lt;&lt;&lt;&lt;等符号后，根据需要只保留我们需要的内容后保存，然后使用git add file3和git commit命令来提交合并后的file3内容，这个过程是手动解决冲突的流程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 编辑冲突文件</span><br><span class="line">$ vim file3</span><br><span class="line"># 提交修改后的文件</span><br><span class="line">$ git add file3</span><br><span class="line">$ git commit -m &#39;merge file3&#39;</span><br></pre></td></tr></table></figure><p>当我们完成合并后，不再需要experimental时，可以使用下面的命令删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d experimental</span><br></pre></td></tr></table></figure><p>git branch -d只能删除那些已经被当前分支的合并的分支. 如果你要强制删除某个分支的话就用git branch –D</p><h3 id="撒销一个合并"><a href="#撒销一个合并" class="headerlink" title="撒销一个合并"></a>撒销一个合并</h3><p>如果你觉得你合并后的状态是一团乱麻，想把当前的修改都放弃，你可以用下面的命令回到合并之前的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line"># 查看file3的内容，已经恢复到合并前的master上的文件内容</span><br><span class="line">$ cat file3</span><br></pre></td></tr></table></figure><h3 id="快速向前合并"><a href="#快速向前合并" class="headerlink" title="快速向前合并"></a>快速向前合并</h3><p>还有一种需要特殊对待的情况，在前面没有提到。通常，一个合并会产生一个合并提交(commit), 把两个父分支里的每一行内容都合并进来。</p><p>但是，如果当前的分支和另一个分支没有内容上的差异，就是说当前分支的每一个提交(commit)都已经存在另一个分支里了，git 就会执行一个“快速向前”(fast forward)操作；git 不创建任何新的提交(commit),只是将当前分支指向合并进来的分支。</p><h2 id="Git日志"><a href="#Git日志" class="headerlink" title="Git日志"></a>Git日志</h2><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>git log命令可以显示所有的提交(commit)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><p>如果提交的历史纪录很长，回车会逐步显示，输入q可以退出。</p><p>git log有很多选项，可以使用git help log查看，例如下面的命令就是找出所有从”v2.5“开始在fs目录下的所有Makefile的修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log v2.5.. Makefile fs&#x2F;</span><br></pre></td></tr></table></figure><p>Git会根据git log命令的参数，按时间顺序显示相关的提交(commit)。</p><h3 id="日志统计"><a href="#日志统计" class="headerlink" title="日志统计"></a>日志统计</h3><p>如果用–stat选项使用’git log’,它会显示在每个提交(commit)中哪些文件被修改了, 这些文件分别添加或删除了多少行内容，这个命令相当于打印详细的提交记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --stat</span><br></pre></td></tr></table></figure><h3 id="格式化日志"><a href="#格式化日志" class="headerlink" title="格式化日志"></a>格式化日志</h3><p>你可以按你的要求来格式化日志输出。–pretty 参数可以使用若干表现格式，如oneline:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty&#x3D;oneline</span><br></pre></td></tr></table></figure><p>或者你也可以使用 short 格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty&#x3D;short</span><br></pre></td></tr></table></figure><p>你也可用medium,full,fuller,email 或raw。 如果这些格式不完全符合你的需求， 你也可以用–pretty=format参数定义格式。</p><p>–graph 选项可以可视化你的提交图(commit graph)，会用ASCII字符来画出一个很漂亮的提交历史(commit history)线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty&#x3D;oneline</span><br></pre></td></tr></table></figure><h3 id="日志排序"><a href="#日志排序" class="headerlink" title="日志排序"></a>日志排序</h3><p>日志记录可以按不同的顺序来显示。如果你要指定一个特定的顺序，可以为git log命令添加顺序参数。</p><p>按默认情况，提交会按逆时间顺序显示，可以指定 <code>--topo-order</code> 参数，让提交按拓扑顺序来显示(就是子提交在它们的父提交前显示):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty&#x3D;format:&#39;%h : %s&#39; --topo-order --graph</span><br></pre></td></tr></table></figure><p>你也可以用 <code>--reverse</code> 参数来逆向显示所有提交日志。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节讲解了几个基本命令：</p><ul><li>git config：配置相关信息</li><li>git clone：复制仓库</li><li>git init：初始化仓库</li><li>git add：添加更新内容到索引中</li><li>git diff：比较内容</li><li>git status：获取当前项目状况</li><li>git commit：提交</li><li>git branch：分支相关</li><li>git checkout：切换分支</li><li>git merge：合并分支</li><li>git reset：恢复版本</li><li>git log：查看日志</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git 实战教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 介绍</title>
      <link href="2017/07/06/Git%20%E4%BB%8B%E7%BB%8D/"/>
      <url>2017/07/06/Git%20%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>Git 介绍</p><h2 id="git诞生"><a href="#git诞生" class="headerlink" title="git诞生"></a>git诞生</h2><p>略</p><h2 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h2><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而大家工作的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始工作，工作完成，再把自己的修订推送给中央服务器。这类系统，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。<br><img src="https://dn-anything-about-doc.qbox.me/userid1labid485time1423114955957"><br>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。<br><img src="https://dn-anything-about-doc.qbox.me/userid1labid485time1423115040073"><br>许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。</p>]]></content>
      
      
      <categories>
          
          <category> Git 实战教程（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 日志系统</title>
      <link href="2017/07/06/Linux%20%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
      <url>2017/07/06/Linux%20%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>Linux 日志系统</p><h2 id="常见的日志"><a href="#常见的日志" class="headerlink" title="常见的日志"></a>常见的日志</h2><p>日志是一个系统管理员，一个运维人员，甚至是开发人员不可或缺的东西，系统用久了偶尔也会出现一些错误，我们需要日志来给系统排错，在一些网络应用服务不能正常工作的时候，我们需要用日志来做问题定位，日志还是过往时间的记录本，我们可以通过它知道我们是否被不明用户登陆过等等。</p><p>在 Linux 中大部分的发行版都内置使用 syslog 系统日志，那么通过前期的课程我们了解到常见的日志一般存放在 <code>/var/log</code> 中，我们来看看其中有哪些日志</p><p>根据图中所显示的日志，我们可以根据服务对象粗略的将日志分为两类</p><ul><li>系统日志</li><li>应用日志</li></ul><p>系统日志主要是存放系统内置程序或系统内核之类的日志信息如 alternatives.log 、btmp 等等，应用日志主要是我们装的第三方应用所产生的日志如 tomcat7 、apache2 等等。</p><p>接下来我们来看看常见的系统日志有哪些，他们都记录了怎样的信息</p><table><thead><tr><th>日志名称</th><th>记录信息</th></tr></thead><tbody><tr><td>alternatives.log</td><td>系统的一些更新替代信息记录</td></tr><tr><td>apport.log</td><td>应用程序崩溃信息记录</td></tr><tr><td>apt/history.log</td><td>使用 apt-get 安装卸载软件的信息记录</td></tr><tr><td>apt/term.log</td><td>使用 apt-get 时的具体操作，如 package 的下载、打开等</td></tr><tr><td>auth.log</td><td>登录认证的信息记录</td></tr><tr><td>boot.log</td><td>系统启动时的程序服务的日志信息</td></tr><tr><td>btmp</td><td>错误登陆的信息记录</td></tr><tr><td>Consolekit/history</td><td>控制台的信息记录</td></tr><tr><td>dist-upgrade</td><td>dist-upgrade 这种更新方式的信息记录</td></tr><tr><td>dmesg</td><td>启动时，显示屏幕上内核缓冲信息,与硬件有关的信息</td></tr><tr><td>dpkg.log</td><td>dpkg 命令管理包的日志。</td></tr><tr><td>faillog</td><td>用户登录失败详细信息记录</td></tr><tr><td>fontconfig.log</td><td>与字体配置有关的信息记录</td></tr><tr><td>kern.log</td><td>内核产生的信息记录，在自己修改内核时有很大帮助</td></tr><tr><td>lastlog</td><td>用户的最近信息记录</td></tr><tr><td>wtmp</td><td>登录信息的记录。wtmp可以找出谁正在登陆进入系统，谁使用命令显示这个文件或信息等</td></tr><tr><td>syslog</td><td>系统信息记录</td></tr></tbody></table><p>而在本实验环境中没有 apport.log 是因为 apport 这个应用程序需要读取一些内核的信息来收集判断其他应用程序的信息，从而记录应用程序的崩溃信息。而在本实验环境中的我们没有这个权限，所以将 apport 从内置应用值剔除，自然而然就没有它的日志信息了。</p><p>只闻其名，不见其人，我们并不能明白这些日志记录的内容。首先我们来看 alternatives.log 中的信息，在本实验环境中没有任何日志输出是因为刚刚启动的系统中并没有任何的更新迭代。我可以看看从其他地方截取过来的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives 2016-07-02 13:36:16: run with --install &#x2F;usr&#x2F;bin&#x2F;x-www-browser x-www-browser &#x2F;usr&#x2F;bin&#x2F;google-chrome-stable 200</span><br><span class="line">update-alternatives 2016-07-02 13:36:16: run with --install &#x2F;usr&#x2F;bin&#x2F;gnome-www-browser gnome-www-browser &#x2F;usr&#x2F;bin&#x2F;google-chrome-stable 200</span><br><span class="line">update-alternatives 2016-07-02 13:36:16: run with --install &#x2F;usr&#x2F;bin&#x2F;google-chrome google-chrome &#x2F;usr&#x2F;bin&#x2F;google-chrome-stable 200</span><br></pre></td></tr></table></figure><p>我们可以从中得到信息有程序作用，日期，命令，成功与否的返回码</p><p>我们用这样的命令来看看 auth.log 中的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less auth.log</span><br></pre></td></tr></table></figure><p>我们可以从中得到的信息有日期与 ip 地址的来源以及登陆的用户与工具</p><p>在 apt 文件夹中的日志信息，其中有两个日志文件 history.log 与 term.log，两个日志文件的区别在于 history.log 主要记录了进行了那个操作，相关的依赖有哪些，而 term.log 则是较为具体的一些操作，主要就是下载包，打开包，安装包等等的细节操作。</p><p>我们通过这样的例子就可以很明显的看出区别，在本实验环境中因为是刚启动的环境，所以两个日志中的信息都是空的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">less &#x2F;var&#x2F;log&#x2F;apt&#x2F;history.log</span><br><span class="line"></span><br><span class="line">less &#x2F;var&#x2F;log&#x2F;apt&#x2F;term.log</span><br></pre></td></tr></table></figure><p>然后我们来安装 git 这个程序，因为本实验环境中本有预装 git 所以这里真正执行的操作是一个更新的操作，但这并不影响</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>成功的执行之后我们再来查看两个日志的内容变化</p><p>其他的日志格式也都类似与之前我们所查看的日志，主要便是时间，操作。而这其中有两个比较特殊的日志，其查看的方式比较与众不同，因为这两个日志并不是 ASCII 文件而是被编码成了二进制文件，所以我们并不能直接使用 less、cat、more 这样的工具来查看，这两个日志文件是 wtmp，lastlog</p><p>我们查看的方法是使用 last 与 lastlog 工具来提取其中的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">last wtmp</span><br><span class="line">last lastlog</span><br><span class="line">lastlog --help</span><br><span class="line">lastlog -u shiyanlou</span><br></pre></td></tr></table></figure><h2 id="配置的日志"><a href="#配置的日志" class="headerlink" title="配置的日志"></a>配置的日志</h2><p>这些日志是如何产生的？通过上面的例子我们可以看出大部分的日志信息似乎格式都很类似，并且都出现在这个文件夹中。</p><p>这样的实现可以通过两种方式：</p><ul><li>一种是由软件开发商自己来自定义日志格式然后指定输出日志位置；</li><li>一种方式就是 Linux 提供的日志服务程序，而我们这里系统日志是通过 syslog 来实现，提供日志管理服务。</li></ul><p>syslog 是一个系统日志记录程序，在早期的大部分 Linux 发行版都是内置 syslog，让其作为系统的默认日志收集工具，虽然时代的进步与发展，syslog 已经年老体衰跟不上时代的需求，所以他被 rsyslog 所代替了，较新的 Ubuntu、Fedora 等等都是默认使用 rsyslog 作为系统的日志收集工具</p><p>rsyslog的全称是 rocket-fast system for log，它提供了高性能，高安全功能和模块化设计。rsyslog 能够接受从各种各样的来源，将其输入，输出的结果到不同的目的地。rsyslog 可以提供超过每秒一百万条消息给目标文件。</p><p>这样能实时收集日志信息的程序是有其守护进程的，如 rsyslog 的守护进程便是 rsyslogd</p><p>因为一些原因本实验环境中默认并没有打开这个服务，我们可以手动开启这项服务，然后来查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service rsyslog start</span><br><span class="line"></span><br><span class="line">ps aux | grep syslog</span><br></pre></td></tr></table></figure><p>既然它是一个服务，那么它便是可以配置，为我们提供一些我们自定义的服务</p><p>首先我们来看 rsyslog 的配置文件是什么样子的，而 rsyslog 的配置文件有两个，</p><ul><li><p>一个是 /etc/rsyslog.conf</p></li><li><p>一个是 /etc/rsyslog.d/50-default.conf。</p><p>第一个主要是配置的环境，也就是 rsyslog 的加载什么模块，文件的所属者等；而第二个主要是配置的 Filter Conditions</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;rsyslog.conf </span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;rsyslog.d&#x2F;50-default.conf</span><br></pre></td></tr></table></figure><p><img src="https://dn-simplecloud.qbox.me/1135081469416361678-wm"><br>通过这个简单的流程图我们可以知道 rsyslog 主要是由 Input、Output、Parser 这样三个模块构成的，并且了解到数据的简单走向，首先通过 Input module 来收集消息，然后将得到的消息传给 Parser module，通过分析模块的层层处理，将真正需要的消息传给 Output module，然后便输出至日志文件中。</p><p>上文提到过 rsyslog 号称可以提供超过每秒一百万条消息给目标文件，怎么只是这样简单的结构。我们可以通过下图来做更深入的了解<br><img src="http://www.rsyslog.com/doc/dataflow.png"><br>（图片来源于<a href="http://www.rsyslog.com/doc/queues_analogy.html%EF%BC%89">http://www.rsyslog.com/doc/queues_analogy.html）</a></p><p>Rsyslog 架构如图中所示，从图中我们可以很清楚的看见，rsyslog 还有一个核心的功能模块便是 Queue，也正是因为它才能做到如此高的并发。</p><p>第一个模块便是 Input，该模块的主要功能就是从各种各样的来源收集 messages，通过这些接口实现：</p><table><thead><tr><th>接口名</th><th>作用</th></tr></thead><tbody><tr><td>im3195</td><td>RFC3195 Input Module</td></tr><tr><td>imfile</td><td>Text File Input Module</td></tr><tr><td>imgssapi</td><td>GSSAPI Syslog Input Module</td></tr><tr><td>imjournal</td><td>Systemd Journal Input Module</td></tr><tr><td>imklog</td><td>Kernel Log Input Module</td></tr><tr><td>imkmsg</td><td>/dev/kmsg Log Input Module</td></tr><tr><td>impstats</td><td>Generate Periodic Statistics of Internal Counters</td></tr><tr><td>imptcp</td><td>Plain TCP Syslog</td></tr><tr><td>imrelp</td><td>RELP Input Module</td></tr><tr><td>imsolaris</td><td>Solaris Input Module</td></tr><tr><td>imtcp</td><td>TCP Syslog Input Module</td></tr><tr><td>imudp</td><td>UDP Syslog Input Module</td></tr><tr><td>imuxsock</td><td>Unix Socket Input</td></tr></tbody></table><p>而 Output 中也有许多可用的接口，可以通过 man 或者官方的文档查看</p><p>而这些模块接口的使用需要通过 $ModLoad 指令来加载，那么返回上文的图中，配置生效的头两行可以看懂了，默认加载了 imklog、imuxsock 这两个模块</p><p>在配置中 rsyslog 支持三种配置语法格式：</p><ul><li><p>sysklogd</p></li><li><p>legacy rsyslog</p></li><li><p>RainerScript</p><p>sysklogd 是老的简单格式，一些新的语法特性不支持。而 legacy rsyslog 是以 dollar 符($)开头的语法，在 v6 及以上的版本还在支持，就如上文所说的 $ModLoad 还有一些插件和特性只在此语法下支持。而以 $ 开头的指令是全局指令，全局指令是 rsyslogd 守护进程的配置指令，每行只能有一个指令。 RainnerScript 是最新的语法。在官网上 rsyslog 大多推荐这个语法格式来配置</p></li></ul><p>老的语法格式（sysklogd &amp; legacy rsyslog）是以行为单位。新的语法格式（RainnerScript）可以分割多行。</p><p>注释有两种语法:</p><ul><li>井号 #</li><li>C-style <code>/* .. */</code></li></ul><p>执行顺序: 指令在 rsyslog.conf 文件中是从上到下的顺序执行的。</p><p>模板是 rsyslog 一个重要的属性，它可以控制日志的格式，支持类似 template() 语句的基于 string 或 plugin 的模板，通过它我们可以自定义日志格式。</p><p>legacy 格式使用 $template 的语法，不过这个在以后要移除，所以最好使用新格式 template():，以免未来突然不工作了也不知道为什么</p><p>模板定义的形式有四种，适用于不同的输出模块，一般简单的格式，可以使用 string 的形式，复杂的格式，建议使用 list 的形式，使用 list 的形式，可以使用一些额外的属性字段（property statement）</p><p>如果不指定输出模板，rsyslog 会默认使用 RSYSLOG_DEFAULT。若想更深入的学习可以查看官方文档</p><p>了解了 rsyslog 环境的配置文件之后，我们看向 <code>/etc/rsyslog.d/50-default.conf</code> 这个配置文件，这个文件中主要是配置的 Filter Conditions，也就我们在流程图中所看见的 <code>Parser &amp; Filter Engine</code>,它的名字叫 Selectors 是过滤 syslog 的传统方法，他主要由两部分组成，<code>facility</code> 与 <code>priority</code>，其配置格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">facility.priority　　　　　log_location</span><br></pre></td></tr></table></figure><p>其中一个 priority 可以指定多个 facility，多个 facility 之间使用逗号 , 分割开</p><p>rsyslog 通过 Facility 的概念来定义日志消息的来源，以便对日志进行分类，Facility 的种类有：</p><table><thead><tr><th>类别</th><th>解释</th></tr></thead><tbody><tr><td>kern</td><td>内核消息</td></tr><tr><td>user</td><td>用户信息</td></tr><tr><td>mail</td><td>邮件系统消息</td></tr><tr><td>daemon</td><td>系统服务消息</td></tr><tr><td>auth</td><td>认证系统</td></tr><tr><td>authpriv</td><td>权限系统</td></tr><tr><td>syslog</td><td>日志系统自身消息</td></tr><tr><td>cron</td><td>计划安排</td></tr><tr><td>news</td><td>新闻信息</td></tr><tr><td>local0~7</td><td>由自定义程序使用</td></tr></tbody></table><p>而另外一部分 priority 也称之为 serverity level，除了日志的来源以外，对统一源产生日志消息还需要进行优先级的划分，而优先级的类别有一下几种：</p><table><thead><tr><th>类别</th><th>解释</th></tr></thead><tbody><tr><td>emergency</td><td>系统已经无法使用了</td></tr><tr><td>alert</td><td>必须立即处理的问题</td></tr><tr><td>critical</td><td>很严重了</td></tr><tr><td>error</td><td>错误</td></tr><tr><td>warning</td><td>警告信息</td></tr><tr><td>notice</td><td>系统正常，但是比较重要</td></tr><tr><td>informational</td><td>正常</td></tr><tr><td>debug</td><td>debug的调试信息</td></tr><tr><td>panic</td><td>很严重但是已淘汰不常用</td></tr><tr><td>none</td><td>没有优先级，不记录任何日志消息</td></tr></tbody></table><p>我们来看看系统中的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth,authpriv.*       &#x2F;var&#x2F;log&#x2F;auth.log</span><br></pre></td></tr></table></figure><p>这里的意思是 auth 与 authpriv 的所有优先级的信息全都输出于 /var/log/auth.log 日志中</p><p>而其中有类似于这样的配置信息意思有细微的差别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kern.*      -&#x2F;var&#x2F;log&#x2F;kern.log</span><br></pre></td></tr></table></figure><p>- 代表异步写入，也就是日志写入时不需要等待系统缓存的同步，也就是日志还在内存中缓存也可以继续写入无需等待完全写入硬盘后再写入。通常用于写入数据比较大时使用。</p><p>到此我们对 rsyslog 的配置就有了一定的了解，若想更深入学习模板，队列的高级应用，大家可去查看官网的文档,需要注意的是 rsyslog 每个版本之间差异化比较大，学习之前先查看自己所使用的版本，再去查看相关的文档</p><p>与日志相关的还有一个还有常用的命令 logger,logger 是一个 shell 命令接口，可以通过该接口使用 Syslog 的系统日志模块，还可以从命令行直接向系统日志文件写入信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#首先将syslog启动起来</span><br><span class="line">sudo service rsyslog start</span><br><span class="line"></span><br><span class="line">#向 syslog 写入数据</span><br><span class="line">ping 127.0.0.1 | logger -it logger_test -p local3.notice &amp;</span><br><span class="line"></span><br><span class="line">#查看是否有数据写入</span><br><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;syslog</span><br></pre></td></tr></table></figure><p>从图中我们可以看到我们成功的将 ping 的信息写入了 syslog 中，格式也就是使用的 rsyslog 的默认模板</p><p>我们可以通过 man 来查看 logger 的更深入用法，上诉命令中</p><p>参数 | 内容<br>-i | 在每行都记录进程 ID<br>-t | 添加 tag 标签<br>-p | 设置日志的 facility 与 priority</p><h2 id="转储的日志"><a href="#转储的日志" class="headerlink" title="转储的日志"></a>转储的日志</h2><p>在本地的机器中每天都有成百上千条日志被写入文件中，更别说是我们的服务器，每天都会有数十兆甚至更多的日志信息被写入文件中，如果是这样的话，每天看着我们的日志文件不断的膨胀，那岂不是要占用许多的空间，所以有个叫 logrotate 的东西诞生了。</p><p>logrotate 程序是一个日志文件管理工具。用来把旧的日志文件删除，并创建新的日志文件。我们可以根据日志文件的大小，也可以根据其天数来切割日志、管理日志，这个过程又叫做“转储”。</p><p>大多数 Linux 发行版使用 logrotate 或 newsyslog 对日志进行管理。logrotate 程序不但可以压缩日志文件，减少存储空间，还可以将日志发送到指定 E-mail，方便管理员及时查看日志。</p><p>显而易见，logrotate 是基于 CRON 来运行的，其脚本是 /etc/cron.daily/logrotate；同时我们可以在 /etc/logrotate 中找到其配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;logrotate</span><br></pre></td></tr></table></figure><p>这其中的具体意思是什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># see &quot;man logrotate&quot; for details  &#x2F;&#x2F;可以查看帮助文档</span><br><span class="line"># rotate log files weekly</span><br><span class="line">weekly                             &#x2F;&#x2F;设置每周转储一次(daily、weekly、monthly当然可以使用这些参数每天、星期，月 )</span><br><span class="line"># keep 4 weeks worth of backlogs</span><br><span class="line">rotate 4                           &#x2F;&#x2F;最多转储4次</span><br><span class="line"># create new (empty) log files after rotating old ones</span><br><span class="line">create                             &#x2F;&#x2F;当转储后文件不存在时创建它</span><br><span class="line"># uncomment this if you want your log files compressed</span><br><span class="line">compress                          &#x2F;&#x2F;通过gzip压缩方式转储（nocompress可以不压缩）</span><br><span class="line"># RPM packages drop log rotation information into this directory</span><br><span class="line">include &#x2F;etc&#x2F;logrotate.d           &#x2F;&#x2F;其他日志文件的转储方式配置文件，包含在该目录下</span><br><span class="line"># no packages own wtmp -- we&#39;ll rotate them here</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;wtmp &#123;                    &#x2F;&#x2F;设置&#x2F;var&#x2F;log&#x2F;wtmp日志文件的转储参数</span><br><span class="line">    monthly                        &#x2F;&#x2F;每月转储</span><br><span class="line">    create 0664 root utmp          &#x2F;&#x2F;转储后文件不存在时创建它，文件所有者为root，所属组为utmp，对应的权限为0664</span><br><span class="line">    rotate 1                       &#x2F;&#x2F;最多转储一次</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然在 /etc/logrotate.d/ 中有各项应用的 logrotate 配置，还有更多的配置参数，大家可以使用 man 查看，如按文件大小转储，按当前时间格式命名等等参数配置。</p>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 进程管理</title>
      <link href="2017/07/06/Linux%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>2017/07/06/Linux%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Linux 进程管理</p><h2 id="进程的查看"><a href="#进程的查看" class="headerlink" title="进程的查看"></a>进程的查看</h2><p>不管在测试的时候、在实际的生产环境中，还是自己的使用过程中，难免会遇到一些进程异常的情况，所以 Linux 为我们提供了一些工具来查看进程的状态信息。我们可以通过 top 实时得查看进程的状态，以及系统的一些信息（如 CPU、内存信息等），我们还可以通过 ps 来静态查看当前的进程信息，同时我们还可以使用 pstree 来查看当前活跃进程的树形结构。</p><h3 id="top-工具的使用"><a href="#top-工具的使用" class="headerlink" title="top 工具的使用"></a>top 工具的使用</h3><p>top 工具是我们常用的一个查看工具，能实时的查看我们系统的一些关键信息的变化:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ top</span><br></pre></td></tr></table></figure><p>top 是一个在前台执行的程序，所以执行后便进入到这样的一个交互界面，正是因为交互界面我们才可以实时的获取到系统与进程的信息。在交互界面中我们可以通过一些指令来操作和筛选。在此之前我们先来了解显示了哪些信息。</p><p>我们看到 top 显示的第一排，</p><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>top</td><td>表示当前程序的名称</td></tr><tr><td>11:05:18</td><td>表示当前的系统的时间</td></tr><tr><td>up 8 days,17:12</td><td>表示该机器已经启动了多长时间</td></tr><tr><td>1 user</td><td>表示当前系统中只有一个用户</td></tr><tr><td>load average: 0.29,0.20,0.25</td><td>分别对应1、5、15分钟内cpu的平均负载</td></tr></tbody></table><p>load average 在 wikipedia 中的解释是 the system load is a measure of the amount of work that a computer system is doing 也就是对当前 CPU 工作量的度量，具体来说也就是指运行队列的平均长度，也就是等待 CPU 的平均进程数相关的一个计算值。</p><p>我们该如何看待这个load average 数据呢？</p><p>假设我们的系统是单 CPU、单内核的，把它比喻成是一条单向的桥，把CPU任务比作汽车。</p><ul><li>load = 0 的时候意味着这个桥上并没有车，cpu 没有任何任务；</li><li>load &lt; 1 的时候意味着桥上的车并不多，一切都还是很流畅的，cpu 的任务并不多，资源还很充足；</li><li>load = 1 的时候就意味着桥已经被车给沾满了，没有一点空隙，cpu 的已经在全力工作了，所有的资源都被用完了，当然还好，这还在能力范围之内，只是有点慢而已；</li><li>load &gt; 1 的时候就意味着不仅仅是桥上已经被车占满了，就连桥外都被占满了，cpu 已经在全力的工作了，系统资源的用完了，但是还是有大量的进程在请求，在等待。若是这个值大于２，大于３，超过 CPU 工作能力的 2，３。而若是这个值 &gt; 5 说明系统已经在超负荷运作了。</li></ul><p>这是单个 CPU 单核的情况，而实际生活中我们需要将得到的这个值除以我们的核数来看。我们可以通过一下的命令来查看 CPU 的个数与核心数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看物理CPU的个数</span><br><span class="line">#cat &#x2F;proc&#x2F;cpuinfo |grep &quot;physical id&quot;|sort |uniq|wc -l</span><br><span class="line"></span><br><span class="line">#每个cpu的核心数</span><br><span class="line">cat &#x2F;proc&#x2F;cpuinfo |grep &quot;physical id&quot;|grep &quot;0&quot;|wc -l</span><br></pre></td></tr></table></figure><p>通过上面的指数我们可以得知 load 的临界值为 1 ，但是在实际生活中，比较有经验的运维或者系统管理员会将临界值定为0.7。这里的指数都是除以核心数以后的值，不要混淆了</p><ul><li>若是 load &lt; 0.7 并不会去关注他；</li><li>若是 0.7&lt; load &lt; 1 的时候我们就需要稍微关注一下了，虽然还可以应付但是这个值已经离临界不远了；</li><li>若是 load = 1 的时候我们就需要警惕了，因为这个时候已经没有更多的资源的了，已经在全力以赴了；</li><li>若是 load &gt; 5 的时候系统已经快不行了，这个时候你需要加班解决问题了</li></ul><p>通常我们都会先看 15 分钟的值来看这个大体的趋势，然后再看 5 分钟的值对比来看是否有下降的趋势。</p><p>查看 busybox 的代码可以知道，数据是每 5 秒钟就检查一次活跃的进程数，然后计算出该值，然后 load 从 <code>/proc/loadavg</code> 中读取的。而这个 load 的值是如何计算的呢，这是 load 的计算的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#define FSHIFT      11          &#x2F;* nr of bits of precision *&#x2F;</span><br><span class="line">#define FIXED_1     (1&lt;&lt;FSHIFT) &#x2F;* 1.0 as fixed-point(定点) *&#x2F;</span><br><span class="line">#define LOAD_FREQ   (5*HZ)      &#x2F;* 5 sec intervals，每隔5秒计算一次平均负载值 *&#x2F;</span><br><span class="line">#define CALC_LOAD(load, exp, n)     \</span><br><span class="line">         load *&#x3D; exp;               \</span><br><span class="line">         load +&#x3D; n*(FIXED_1 - exp); \</span><br><span class="line">         load &gt;&gt;&#x3D; FSHIFT;</span><br><span class="line"></span><br><span class="line">unsigned long avenrun[3];</span><br><span class="line"></span><br><span class="line">EXPORT_SYMBOL(avenrun);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">* calc_load - given tick count, update the avenrun load estimates.</span><br><span class="line">* This is called while holding a write_lock on xtime_lock.</span><br><span class="line">*&#x2F;</span><br><span class="line">static inline void calc_load(unsigned long ticks)</span><br><span class="line">&#123;</span><br><span class="line">        unsigned long active_tasks; &#x2F;* fixed-point *&#x2F;</span><br><span class="line">        static int count &#x3D; LOAD_FREQ;</span><br><span class="line">        count -&#x3D; ticks;</span><br><span class="line">        if (count &lt; 0) &#123;</span><br><span class="line">                count +&#x3D; LOAD_FREQ;</span><br><span class="line">                active_tasks &#x3D; count_active_tasks();</span><br><span class="line">                CALC_LOAD(avenrun[0], EXP_1, active_tasks);</span><br><span class="line">                CALC_LOAD(avenrun[1], EXP_5, active_tasks);</span><br><span class="line">                CALC_LOAD(avenrun[2], EXP_15, active_tasks);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有兴趣的朋友可以研究一下，是如何计算的。代码中的后面这部分相当于它的计算公式</p></blockquote><p>我们回归正题，来看 top 的第二行数据，基本上第二行是进程的一个情况统计</p><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>Tasks: 26 total</td><td>进程总数</td></tr><tr><td>1 running</td><td>1个正在运行的进程数</td></tr><tr><td>25 sleeping</td><td>25个睡眠的进程数</td></tr><tr><td>0 stopped</td><td>没有停止的进程数</td></tr><tr><td>0 zombie</td><td>没有僵尸进程数</td></tr></tbody></table><p>来看 top 的第三行数据，这一行基本上是 CPU 的一个使用情况的统计了</p><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>Cpu(s): 1.0%us</td><td>用户空间进程占用CPU百分比</td></tr><tr><td>1.0% sy</td><td>内核空间运行占用CPU百分比</td></tr><tr><td>0.0%ni</td><td>用户进程空间内改变过优先级的进程占用CPU百分比</td></tr><tr><td>97.9%id</td><td>空闲CPU百分比</td></tr><tr><td>0.0%wa</td><td>等待输入输出的CPU时间百分比</td></tr><tr><td>0.1%hi</td><td>硬中断(Hardware IRQ)占用CPU的百分比</td></tr><tr><td>0.0%si</td><td>软中断(Software IRQ)占用CPU的百分比</td></tr><tr><td>0.0%st</td><td>(Steal time) 是 hypervisor 等虚拟服务中，虚拟 CPU 等待实际 CPU 的时间的百分比</td></tr></tbody></table><p>CPU 利用率是对一个时间段内 CPU 使用状况的统计，通过这个指标可以看出在某一个时间段内 CPU 被占用的情况，而 Load Average 是 CPU 的 Load，它所包含的信息不是 CPU 的使用率状况，而是在一段时间内 CPU 正在处理以及等待 CPU 处理的进程数情况统计信息，这两个指标并不一样。</p><p>来看 top 的第四行数据，这一行基本上是内存的一个使用情况的统计了：</p><p>内容 | 解释<br>8176740 total | 物理内存总量<br>8032104 used | 使用的物理内存总量<br>144636 free | 空闲内存总量<br>313088 buffers | 用作内核缓存的内存量</p><blockquote><p>注意</p><p>系统的中可用的物理内存最大值并不是 free 这个单一的值，而是 free + buffers + swap 中的 cached 的和</p></blockquote><p>来看 top 的第五行数据，这一行基本上是交换区的一个使用情况的统计了</p><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>total</td><td>交换区总量</td></tr><tr><td>used</td><td>使用的交换区总量</td></tr><tr><td>free</td><td>空闲交换区总量</td></tr><tr><td>cached</td><td>缓冲的交换区总量,内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖</td></tr></tbody></table><p>在下面就是进程的一个情况了</p><table><thead><tr><th>列名</th><th>解释</th></tr></thead><tbody><tr><td>PID</td><td>进程id</td></tr><tr><td>USER</td><td>该进程的所属用户</td></tr><tr><td>PR</td><td>该进程执行的优先级 priority 值</td></tr><tr><td>NI</td><td>该进程的 nice 值</td></tr><tr><td>VIRT</td><td>该进程任务所使用的虚拟内存的总数</td></tr><tr><td>RES</td><td>该进程所使用的物理内存数，也称之为驻留内存数</td></tr><tr><td>SHR</td><td>该进程共享内存的大小</td></tr><tr><td>S</td><td>该进程进程的状态: S=sleep R=running Z=zombie</td></tr><tr><td>%CPU</td><td>该进程CPU的利用率</td></tr><tr><td>%MEM</td><td>该进程内存的利用率</td></tr><tr><td>TIME+</td><td>该进程活跃的总时间</td></tr><tr><td>COMMAND</td><td>该进程运行的名字</td></tr></tbody></table><blockquote><p>注意</p><p>NICE 值叫做静态优先级，是用户空间的一个优先级值，其取值范围是-20至19。这个值越小，表示进程”优先级”越高，而值越大“优先级”越低。nice值中的 -20 到 19，中 -20 优先级最高， 0 是默认的值，而 19 优先级最低</p><p>PR 值表示 Priority 值叫动态优先级，是进程在内核中实际的优先级值，进程优先级的取值范围是通过一个宏定义的，这个宏的名称是 MAX_PRIO，它的值为 140。Linux 实际上实现了 140 个优先级范围，取值范围是从 0-139，这个值越小，优先级越高。而这其中的 0 - 99 是实时进程的值，而 100 - 139 是给用户的。</p><p>其中 PR 中的 100 to 139 值部分有这么一个对应 PR = 20 + (-20 to +19)，这里的 -20 to +19 便是nice值，所以说两个虽然都是优先级，而且有千丝万缕的关系，但是他们的值，他们的作用范围并不相同</p><p>VIRT 任务所使用的虚拟内存的总数，其中包含所有的代码，数据，共享库和被换出 swap空间的页面等所占据空间的总数</p></blockquote><p>在上文我们曾经说过 top 是一个前台程序，所以是一个可以交互的</p><table><thead><tr><th>常用交互命令</th><th>解释</th></tr></thead><tbody><tr><td>q</td><td>退出程序</td></tr><tr><td>I</td><td>切换显示平均负载和启动时间的信息</td></tr><tr><td>P</td><td>根据CPU使用百分比大小进行排序</td></tr><tr><td>M</td><td>根据驻留内存大小进行排序</td></tr><tr><td>i</td><td>忽略闲置和僵死的进程，这是一个开关式命令</td></tr><tr><td>k</td><td>终止一个进程，系统提示输入 PID 及发送的信号值。一般终止进程用 15 信号，不能正常结束则使用 9 信号。安全模式下该命令被屏蔽。</td></tr></tbody></table><p>好好的利用 top 能够很有效的帮助我们观察到系统的瓶颈所在，或者是系统的问题所在</p><h3 id="ps-工具的使用"><a href="#ps-工具的使用" class="headerlink" title="ps 工具的使用"></a>ps 工具的使用</h3><p>ps 也是我们最常用的查看进程的工具之一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux</span><br><span class="line">$ ps axjf</span><br></pre></td></tr></table></figure><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>F</td><td>进程的标志（process flags），当 flags 值为 1 则表示此子程序只是 fork 但没有执行 exec，为 4 表示此程序使用超级管理员 root 权限</td></tr><tr><td>USER</td><td>进程的拥有用户</td></tr><tr><td>PID</td><td>进程的 ID</td></tr><tr><td>PPID</td><td>其父进程的 PID</td></tr><tr><td>SID</td><td>session 的 ID</td></tr><tr><td>TPGID</td><td>前台进程组的 ID</td></tr><tr><td>%CPU</td><td>进程占用的 CPU 百分比</td></tr><tr><td>%MEM</td><td>占用内存的百分比</td></tr><tr><td>NI</td><td>进程的 NICE 值</td></tr><tr><td>VSZ</td><td>进程使用虚拟内存大小</td></tr><tr><td>RSS</td><td>驻留内存中页的大小</td></tr><tr><td>TTY</td><td>终端 ID</td></tr><tr><td>S or STAT</td><td>进程状态</td></tr><tr><td>WCHAN</td><td>正在等待的进程资源</td></tr><tr><td>START</td><td>启动进程的时间</td></tr><tr><td>TIME</td><td>进程消耗CPU的时间</td></tr><tr><td>COMMAND</td><td>命令的名称和参数</td></tr></tbody></table><blockquote><p>TPGID栏写着-1的都是没有控制终端的进程，也就是守护进程</p><p>STAT表示进程的状态，而进程的状态有很多，如下表所示</p></blockquote><table><thead><tr><th>状态</th><th>解释</th></tr></thead><tbody><tr><td>R</td><td>Running.运行中</td></tr><tr><td>S</td><td>Interruptible Sleep.等待调用</td></tr><tr><td>D</td><td>Uninterruptible Sleep.不可中断睡眠</td></tr><tr><td>T</td><td>Stoped.暂停或者跟踪状态</td></tr><tr><td>X</td><td>Dead.即将被撤销</td></tr><tr><td>Z</td><td>Zombie.僵尸进程</td></tr><tr><td>W</td><td>Paging.内存交换</td></tr><tr><td>N</td><td>优先级低的进程</td></tr><tr><td>&lt;</td><td>优先级高的进程</td></tr><tr><td>s</td><td>进程的领导者</td></tr><tr><td>L</td><td>锁定状态</td></tr><tr><td>l</td><td>多线程状态</td></tr></tbody></table><ul><li>| 前台进程</li></ul><blockquote><p>其中的 D 是不能被中断睡眠的状态，处在这种状态的进程不接受外来的任何 signal，所以无法使用 kill 命令杀掉处于D状态的进程，无论是 kill，kill -9 还是 kill -15，一般处于这种状态可能是进程 I/O 的时候出问题了。</p></blockquote><p>使用 -l 参数可以显示自己这次登陆的 bash 相关的进程信息罗列出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -l</span><br></pre></td></tr></table></figure><p>相对来说我们更加常用下面这个命令，他将会罗列出所有的进程信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure><p>若是查找其中的某个进程的话，我们还可以配合着 grep 和正则表达式一起使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep zsh</span><br></pre></td></tr></table></figure><p>此外我们还可以查看时，将连同部分的进程呈树状显示出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps axjf</span><br></pre></td></tr></table></figure><p>当然如果你觉得使用这样的此时没有把你想要的信息放在一起，我们也可以是用这样的命令，来自定义我们所需要的参数显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps －afxo user,ppid,pid,pgid,command</span><br></pre></td></tr></table></figure><h3 id="pstree-工具的使用"><a href="#pstree-工具的使用" class="headerlink" title="pstree 工具的使用"></a>pstree 工具的使用</h3><p>通过 pstree 可以很直接的看到相同的进程数量，最主要的还是我们可以看到所有进程的之间的相关性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pstree</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pstree -up</span><br><span class="line"></span><br><span class="line">#参数选择：</span><br><span class="line">#-A  ：各程序树之间以 ASCII 字元來連接；</span><br><span class="line">#-p  ：同时列出每个 process 的 PID；</span><br><span class="line">#-u  ：同时列出每个 process 的所屬账户名称。</span><br></pre></td></tr></table></figure><h2 id="进程的管理"><a href="#进程的管理" class="headerlink" title="进程的管理"></a>进程的管理</h2><h3 id="kill-命令的掌握"><a href="#kill-命令的掌握" class="headerlink" title="kill 命令的掌握"></a>kill 命令的掌握</h3><p>上个实验中我们讲诉了进程之间是如何衍生，之间又有什么相关性，我们来回顾一下，当一个进程结束的时候或者要异常结束的时候，会向其父进程返回一个或者接收一个 SIGHUP 信号而做出的结束进程或者其他的操作，这个 SIGHUP 信号不仅可以由系统发送，我们可以使用 kill 来发送这个信号来操作进程的结束或者重启等等。</p><p>上节课程我们使用 kill 命令来管理我们的一些 job，这节课我们将尝试用 kill 来操作下一些不属于 job 范畴的进程，直接对 pid 下手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#首先我们使用图形界面打开了 gedit、gvim，用 ps 可以查看到</span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line">#使用9这个信号强制结束 gedit 进程</span><br><span class="line">kill -9 1608</span><br><span class="line"></span><br><span class="line">#我们在查找这个进程的时候就找不到了</span><br><span class="line">ps aux | grep gedit</span><br></pre></td></tr></table></figure><h3 id="进程的执行顺序"><a href="#进程的执行顺序" class="headerlink" title="进程的执行顺序"></a>进程的执行顺序</h3><p>我们在是使用 ps 命令的时候我们可以看到大部分的进程都是处于休眠的状态，如果这些进程都被唤醒，那么该谁最先享受 CPU 的服务，后面的进程又该是一个什么样的顺序呢？进程调度的队列又该如何去排列呢？</p><p>当然就是靠该进程的优先级值来判定进程调度的优先级，而优先级的值就是上文所提到的 PR 与 nice 来控制与体现了</p><p>而 nice 的值我们是可以通过 nice 命令来修改的，而需要注意的是 nice 值可以调整的范围是 -20 ~ 19，其中 root 有着至高无上的权力，既可以调整自己的进程也可以调整其他用户的程序，并且是所有的值都可以用，而普通用户只可以调制属于自己的进程，并且其使用的范围只能是 0 ~ 19，因为系统为了避免一般用户抢占系统资源而设置的一个限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#这个实验在环境中无法做，因为权限不够，可以自己在本地尝试</span><br><span class="line"></span><br><span class="line">#打开一个程序放在后台，或者用图形界面打开</span><br><span class="line">nice -n -5 vim &amp;</span><br><span class="line"></span><br><span class="line">#用 ps 查看其优先级</span><br><span class="line">ps -afxo user,ppid,pid,stat,pri,ni,time,command | grep vim</span><br></pre></td></tr></table></figure><p>我们还可以用 renice 来修改已经存在的进程的优先级，同样因为权限的原因在实验环境中无法尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renice -5 pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 进程概念</title>
      <link href="2017/07/06/Linux%20%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5/"/>
      <url>2017/07/06/Linux%20%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>Linux 进程概念</p><h2 id="概念的理解"><a href="#概念的理解" class="headerlink" title="概念的理解"></a>概念的理解</h2><h3 id="进程与程序概念的理解"><a href="#进程与程序概念的理解" class="headerlink" title="进程与程序概念的理解"></a>进程与程序概念的理解</h3><p>首先程序与进程是什么？程序与进程又有什么区别？</p><blockquote><p>程序（procedure）：不太精确地说，程序就是执行一系列有逻辑、有顺序结构的指令，帮我们达成某个结果。就如我们去餐馆，给服务员说我要牛肉盖浇饭，她执行了做牛肉盖浇饭这么一个程序，最后我们得到了这么一盘牛肉盖浇饭。它需要去执行，不然它就像一本武功秘籍，放在那里等人翻看。</p></blockquote><blockquote><p>进程（process）：进程是程序在一个数据集合上的一次执行过程，在早期的UNIX、Linux 2.4及更早的版本中，它是系统进行资源分配和调度的独立基本单位。同上一个例子，就如我们去了餐馆，给服务员说我要牛肉盖浇饭，她执行了做牛肉盖浇饭这么一个程序，而里面做饭的是一个进程，做牛肉汤汁的是一个进程，把牛肉汤汁与饭混合在一起的是一个进程，把饭端上桌的是一个进程。它就像是我们在看武功秘籍这么一个过程，然后一个篇章一个篇章地去练。</p></blockquote><p>简单来说，程序是为了完成某种任务而设计的软件，比如 vim 是程序。什么是进程呢？进程就是运行中的程序。</p><p>程序只是一些列指令的集合，是一个静止的实体，而进程不同，进程有以下的特性：</p><ul><li>动态性：进程的实质是一次程序执行的过程，有创建、撤销等状态的变化。而程序是一个静态的实体。</li><li>并发性：进程可以做到在一个时间段内，有多个程序在运行中。程序只是静态的实体，所以不存在并发性。</li><li>独立性：进程可以独立分配资源，独立接受调度，独立地运行。</li><li>异步性：进程以不可预知的速度向前推进。</li><li>结构性：进程拥有代码段、数据段、PCB（进程控制块，进程存在的唯一标志）。也正是因为有结构性，进程才可以做到独立地运行。</li></ul><blockquote><p>并发：在一个时间段内，宏观来看有多个程序都在活动，有条不紊的执行（每一瞬间只有一个在执行，只是在一段时间有多个程序都执行过）</p><p>并行：在每一个瞬间，都有多个程序都在同时执行，这个必须有多个 CPU 才行</p></blockquote><p>引入进程是因为传统意义上的程序已经不足以描述 OS 中各种活动之间的动态性、并发性、独立性还有相互制约性。程序就像一个公司，只是一些证书，文件的堆积（静态实体）。而当公司运作起来就有各个部门的区分，财务部，技术部，销售部等等，就像各个进程，各个部门之间可以独立运做，也可以有交互（独立性、并发性）。</p><p>而随着程序的发展越做越大，又会继续细分，从而引入了线程的概念，当代多数操作系统、Linux 2.6及更新的版本中，进程本身不是基本运行单位，而是线程的容器。就像上述所说的，每个部门又会细分为各个工作小组（线程），而工作小组需要的资源需要向上级（进程）申请。</p><blockquote><p>线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。因为线程中几乎不包含系统资源，所以执行更快、更有效率。</p></blockquote><p>简而言之,一个程序至少有一个进程,一个进程至少有一个线程。线程的划分尺度小于进程，使得多线程程序的并发性高。另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p><h2 id="进程的属性"><a href="#进程的属性" class="headerlink" title="进程的属性"></a>进程的属性</h2><h3 id="进程的分类"><a href="#进程的分类" class="headerlink" title="进程的分类"></a>进程的分类</h3><p>大概明白进程是个什么样的存在后，我们需要进一步了解的就是进程分类。可以从两个角度来分：</p><ul><li>以进程的功能与服务的对象来分；</li><li>以应用程序的服务类型来分；</li></ul><p>第一个角度来看，我们可以分为用户进程与系统进程：</p><ul><li>用户进程：通过执行用户程序、应用程序或称之为内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。</li><li>系统进程：通过执行系统内核程序而产生的进程，比如可以执行内存资源分配和进程切换等相对底层的工作；而且该进程的运行不受用户的干预，即使是 root 用户也不能干预系统进程的运行。</li></ul><p>第二角度来看，我们可以将进程分为交互进程、批处理进程、守护进程</p><ul><li>交互进程：由一个 shell 终端启动的进程，在执行过程中，需要与用户进行交互操作，可以运行于前台，也可以运行在后台。</li><li>批处理进程：该进程是一个进程集合，负责按顺序启动其他的进程。</li><li>守护进程：守护进程是一直运行的一种进程，在 Linux 系统启动时启动，在系统关闭时终止。它们独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。例如 httpd 进程，一直处于运行状态，等待用户的访问。还有经常用的 cron（在 centOS 系列为 crond）进程，这个进程为 crontab 的守护进程，可以周期性的执行用户设定的某些任务。</li></ul><h3 id="进程的衍生"><a href="#进程的衍生" class="headerlink" title="进程的衍生"></a>进程的衍生</h3><p>进程有这么多的种类，那么进程之间定是有相关性的，而这些有关联性的进程又是如何产生的，如何衍生的？</p><p>就比如我们启动了终端，就是启动了一个 bash 进程，我们可以在 bash 中再输入 bash 则会再启动一个 bash 的进程，此时第二个 bash 进程就是由第一个 bash 进程创建出来的，他们直接又是个什么关系？</p><p>我们一般称呼第一个 bash 进程是第二 bash 进程的父进程，第二 bash 进程是第一个 bash 进程的子进程，这层关系是如何得来的呢？</p><p>关于父进程与子进程便会提及这两个系统调用 <code>fork()</code> 与 <code>exec()</code></p><blockquote><p>fork-exec是由 Dennis M. Ritchie 创造的</p><p>fork() 是一个系统调用（system call），它的主要作用就是为当前的进程创建一个新的进程，这个新的进程就是它的子进程，这个子进程除了父进程的返回值和 PID 以外其他的都一模一样，如进程的执行代码段，内存信息，文件描述，寄存器状态等等</p><p>exec() 也是系统调用，作用是切换子进程中的执行程序也就是替换其从父进程复制过来的代码段与数据段</p></blockquote><p>子进程就是父进程通过系统调用 fork() 而产生的复制品，fork() 就是把父进程的 PCB 等进程的数据结构信息直接复制过来，只是修改了 PID，所以一模一样，只有在执行 exec() 之后才会不同，而早先的 fork() 比较消耗资源后来进化成 vfork(),效率高了不少，感兴趣的同学可以查查为什么。</p><p>这就是子进程产生的由来。简单的实现逻辑就如下方所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pid_t p;</span><br><span class="line"></span><br><span class="line">p &#x3D; fork();</span><br><span class="line">if (p &#x3D;&#x3D; (pid_t) -1)</span><br><span class="line">        &#x2F;* ERROR *&#x2F;</span><br><span class="line">else if (p &#x3D;&#x3D; 0)</span><br><span class="line">        &#x2F;* CHILD *&#x2F;</span><br><span class="line">else</span><br><span class="line">        &#x2F;* PARENT *&#x2F;</span><br></pre></td></tr></table></figure><p>既然子进程是通过父进程而衍生出来的，那么子进程的退出与资源的回收定然与父进程有很大的相关性。当一个子进程要正常的终止运行时，或者该进程结束时它的主函数 main() 会执行 exit(n); 或者 return n，这里的返回值 n 是一个信号，系统会把这个 SIGCHLD 信号传给其父进程，当然若是异常终止也往往是因为这个信号。</p><p>在将要结束时的子进程代码执行部分已经结束执行了，系统的资源也基本归还给系统了，但若是其进程的进程控制块（PCB）仍驻留在内存中，而它的 PCB 还在，代表这个进程还存在（因为 PCB 就是进程存在的唯一标志，里面有 PID 等消息），并没有消亡，这样的进程称之为僵尸进程（Zombie）。</p><p>如图中第四列标题是 S，S 表示的是进程的状态，而在下属的第三行的 Z 表示的是 Zombie 的意思。（ ps 命令将在后续详解）</p><p>正常情况下，父进程会收到两个返回值：exit code（SIGCHLD 信号）与 reason for termination 。之后，父进程会使用 wait(&amp;status) 系统调用以获取子进程的退出状态，然后内核就可以从内存中释放已结束的子进程的 PCB；而如若父进程没有这么做的话，子进程的 PCB 就会一直驻留在内存中，一直留在系统中成为僵尸进程（Zombie）。</p><p>虽然僵尸进程是已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，在进程列表中保留一个位置，记载该进程的退出状态等信息供其父进程收集，从而释放它。但是 Linux 系统中能使用的 PID 是有限的，如果系统中存在有大量的僵尸进程，系统将会因为没有可用的 PID 从而导致不能产生新的进程。</p><p>另外如果父进程结束（非正常的结束），未能及时收回子进程，子进程仍在运行，这样的子进程称之为孤儿进程。在 Linux 系统中，孤儿进程一般会被 init 进程所“收养”，成为 init 的子进程。由 init 来做善后处理，所以它并不至于像僵尸进程那样无人问津，不管不顾，大量存在会有危害。</p><p>进程 0 是系统引导时创建的一个特殊进程，也称之为内核初始化，其最后一个动作就是调用 fork() 创建出一个子进程运行 /sbin/init 可执行文件,而该进程就是 PID=1 的进程 1，而进程 0 就转为交换进程（也被称为空闲进程），进程 1 （init 进程）是第一个用户态的进程，再由它不断调用 fork() 来创建系统里其他的进程，所以它是所有进程的父进程或者祖先进程。同时它是一个守护程序，直到计算机关机才会停止。</p><p>通过以下的命令我们可以很明显的看到这样的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pstree</span><br></pre></td></tr></table></figure><p>通过以上的显示结果我们可以看的很清楚，init 为所有进程的父进程或者说是祖先进程</p><p>我们还可以使用这样一个命令来看，其中 pid 就是该进程的一个唯一编号，ppid 就是该进程的父进程的 pid，command 表示的是该进程通过执行什么样的命令或者脚本而产生的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps －fxo user,ppid,pid,pgid,command</span><br></pre></td></tr></table></figure><p>可以在图中看见我们执行的 ps 就是由 zsh 通过 fork-exec 创建的子进程而执行的</p><p>使用这样的一个命令我们也能清楚的看见 init 如上文所说是由进程 0 这个初始化进程来创建而出的子进程,而其他的进程基本是由 init 创建的子进程，或者是由它的子进程创建出来的子进程。所以 init 是用户进程的第一个进程也是所有用户进程的父进程或者祖先进程。（ps 命令将在后续课程详解）</p><p>就像一个树状图，而 init 进程就是这棵树的根，其他进程由根不断的发散，开枝散叶</p><h3 id="进程组与-Sessions"><a href="#进程组与-Sessions" class="headerlink" title="进程组与 Sessions"></a>进程组与 Sessions</h3><p>每一个进程都会是一个进程组的成员，而且这个进程组是唯一存在的，他们是依靠 PGID（process group ID）来区别的，而每当一个进程被创建的时候，它便会成为其父进程所在组中的一员。</p><p>一般情况，进程组的 PGID 等同于进程组的第一个成员的 PID，并且这样的进程称为该进程组的领导者,也就是领导进程，进程一般通过使用 getpgrp() 系统调用来寻找其所在组的 PGID，领导进程可以先终结，此时进程组依然存在，并持有相同的PGID，直到进程组中最后一个进程终结。</p><p>与进程组类似，每当一个进程被创建的时候，它便会成为其父进程所在 Session 中的一员，每一个进程组都会在一个 Session 中，并且这个 Session 是唯一存在的，</p><p>Session 主要是针对一个 tty 建立，Session 中的每个进程都称为一个工作(job)。每个会话可以连接一个终端(control terminal)。当控制终端有输入输出时，都传递给该会话的前台进程组。Session 意义在于将多个 jobs 囊括在一个终端，并取其中的一个 job 作为前台，来直接接收该终端的输入输出以及终端信号。 其他 jobs 在后台运行。</p><blockquote><p>前台（foreground）就是在终端中运行，能与你有交互的</p><p>后台（background）就是在终端中运行，但是你并不能与其任何的交互，也不会显示其执行的过程</p></blockquote><h2 id="工作管理"><a href="#工作管理" class="headerlink" title="工作管理"></a>工作管理</h2><p>bash(Bourne-Again shell)支持工作控制（job control）,而 sh（Bourne shell）并不支持。</p><p>并且每个终端或者说 bash 只能管理当前终端的中的 job，不能管理其他终端中的 job。比如我当前存在两个 bash 分别为 bash1、bash2，bash1 只能管理其自己里面的 job 并不能管理 bash2 里面的 job</p><p>我们都知道当一个进程在前台运作时我们可以用 ctrl + c 来终止它，但是若是在后台的话就不行了。</p><p>我们可以通过 &amp; 这个符号，让我们的命令在后台中运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &amp;</span><br></pre></td></tr></table></figure><p>图中所显示的 [1] 236分别是该 job 的 job number 与该进程的 PID，而最后一行的 Done 表示该命令已经在后台执行完毕。</p><p>我们还可以通过 ctrl + z 使我们的当前工作停止并丢到后台中去</p><p>被停止并放置在后台的工作我们可以使用这个命令来查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jobs</span><br></pre></td></tr></table></figure><p>其中第一列显示的为被放置后台 job 的编号，而第二列的 ＋ 表示最近(刚刚、最后)被放置后台的 job，同时也表示预设的工作，也就是若是有什么针对后台 job 的操作，首先对预设的 job，- 表示倒数第二（也就是在预设之前的一个）被放置后台的工作，倒数第三个（再之前的）以后都不会有这样的符号修饰，第三列表示它们的状态，而最后一列表示该进程执行的命令</p><p>我们可以通过这样的一个命令将后台的工作拿到前台来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#后面不加参数提取预设工作，加参数提取指定工作的编号</span><br><span class="line">#ubuntu 在 zsh 中需要 %，在 bash 中不需要 %</span><br><span class="line">fg [%jobnumber]</span><br></pre></td></tr></table></figure><p>之前我们通过 ctrl + z 使得工作停止放置在后台，若是我们想让其在后台运作我们就使用这样一个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#与fg类似，加参则指定，不加参则取预设</span><br><span class="line">bg [%jobnumber]</span><br></pre></td></tr></table></figure><p>既然有方法将被放置在后台的工作提至前台或者让它从停止变成继续运行在后台，当然也有方法删除一个工作，或者重启等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#kill的使用格式如下</span><br><span class="line">kill -signal %jobnumber</span><br><span class="line"></span><br><span class="line">#signal从1-64个信号值可以选择，可以这样查看</span><br><span class="line">kill －l</span><br></pre></td></tr></table></figure><p>其中常用的有这些信号值</p><table><thead><tr><th>信号值</th><th>作用</th></tr></thead><tbody><tr><td>-1</td><td>重新读取参数运行，类似与restart</td></tr><tr><td>-2</td><td>如同 ctrl+c 的操作退出</td></tr><tr><td>-9</td><td>强制终止该任务</td></tr><tr><td>-15</td><td>正常的方式终止该任务</td></tr></tbody></table><blockquote><p>注意</p><p>若是在使用kill＋信号值然后直接加 pid，你将会对 pid 对应的进程进行操作</p><p>若是在使用kill+信号值然后 ％jobnumber，这时所操作的对象是 job，这个数字就是就当前 bash 中后台的运行的 job 的 ID</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下软件安装</title>
      <link href="2017/07/05/Linux%20%E4%B8%8B%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>2017/07/05/Linux%20%E4%B8%8B%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Linux 下软件安装</p><h3 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h3><blockquote><p>注意:如果你在安装一个软件之后，无法立即使用Tab键补全这可命令，你可以尝试先执行 <code>source ~/.zshrc</code>，然后你就可以使用补全操作。</p></blockquote><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><h3 id="apt-包管理工具介绍"><a href="#apt-包管理工具介绍" class="headerlink" title="apt 包管理工具介绍"></a>apt 包管理工具介绍</h3><blockquote><p>APT是Advance Packaging Tool（高级包装工具）的缩写，是Debian及其派生发行版的软件包管理器，APT可以自动下载，配置，安装二进制或者源代码格式的软件包，因此简化了Unix系统上管理软件的过程。APT最早被设计成dpkg的前端，用来处理deb格式的软件包。现在经过APT-RPM组织修改，APT已经可以安装在支持RPM的系统管理RPM包。这个包管理器包含以 apt- 开头的的多个工具，如 apt-get apt-cache apt-cdrom 等，在Debian系列的发行版中使用。</p></blockquote><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h3><p>apt-get 是用于处理 apt 包的公用程序集，我们可以用它来在线安装、卸载和升级软件包等，下面列出一些apt-get包含的常用的一些工具：</p><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>install</td><td>其后加上软件包名，用于安装一个软件包</td></tr><tr><td>update</td><td>从软件源镜像服务器上下载/更新用于更新本地软件源的软件包列表</td></tr><tr><td>upgrade</td><td>升级本地可更新的全部软件包，但存在依赖问题时将不会升级，通常会在更新之前执行一次update</td></tr><tr><td>dist-upgrade</td><td>解决依赖关系并升级(存在一定危险性)</td></tr><tr><td>remove</td><td>移除已安装的软件包，包括与被移除软件包有依赖关系的软件包，但不包含软件包的配置文件</td></tr><tr><td>autoremove</td><td>移除之前被其他软件包依赖，但现在不再被使用的软件包</td></tr><tr><td>purge</td><td>与remove相同，但会完全移除软件包，包含其配置文件</td></tr><tr><td>clean</td><td>移除下载到本地的已经安装的软件包，默认保存在/var/cache/apt/archives/</td></tr><tr><td>autoclean</td><td>移除已安装的软件的旧版本软件包</td></tr></tbody></table><p>下面是一些apt-get常用的参数：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-y</td><td>自动回应是否安装软件包的选项，在一些自动化安装脚本中使用这个参数将十分有用</td></tr><tr><td>-s</td><td>模拟安装</td></tr><tr><td>-q</td><td>静默安装方式，指定多个q或者-q=#,#表示数字，用于设定静默级别，这在你不想要在安装软件包时屏幕输出过多时很有用</td></tr><tr><td>-f</td><td>修复损坏的依赖关系</td></tr><tr><td>-d</td><td>只下载不安装</td></tr><tr><td>–reinstall</td><td>重新安装已经安装但可能存在问题的软件包</td></tr><tr><td>–install-suggests</td><td>同时安装APT给出的建议安装的软件包</td></tr></tbody></table><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install w3m</span><br><span class="line">$ sudo apt-get --reinstall install w3m # 重新安装</span><br></pre></td></tr></table></figure><p>通常我们是使用Tab键补全软件包名。有时候你需要同时安装多个软件包，你还可以使用正则表达式匹配软件包名进行批量安装。</p><h3 id="软件升级"><a href="#软件升级" class="headerlink" title="软件升级"></a>软件升级</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 更新软件源</span><br><span class="line">$ sudo apt-get update</span><br><span class="line"># 升级没有依赖问题的软件包</span><br><span class="line">$ sudo apt-get upgrade</span><br><span class="line"># 升级并解决依赖关系</span><br><span class="line">$ sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove w3m</span><br><span class="line"></span><br><span class="line"># 不保留配置文件的移除</span><br><span class="line">$ sudo apt-get purge w3m</span><br><span class="line"># 或者 sudo apt-get --purge remove</span><br><span class="line"># 移除不再需要的被依赖的软件包</span><br><span class="line">$ sudo apt-get autoremove</span><br></pre></td></tr></table></figure><h3 id="软件搜索"><a href="#软件搜索" class="headerlink" title="软件搜索"></a>软件搜索</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-cache search softname1 softname2 softname3……</span><br></pre></td></tr></table></figure><p>apt-cache 命令是针对本地数据进行相关操作的工具，search 顾名思义在本地的数据库中寻找有关 softname1 softname2 …… 相关软件的信息。</p><h2 id="使用-dpkg"><a href="#使用-dpkg" class="headerlink" title="使用 dpkg"></a>使用 dpkg</h2><h3 id="dpkg-介绍"><a href="#dpkg-介绍" class="headerlink" title="dpkg 介绍"></a>dpkg 介绍</h3><blockquote><p>dpkg 是 Debian 软件包管理器的基础，它被伊恩·默多克创建于 1993 年。dpkg 与 RPM 十分相似，同样被用于安装、卸载和供给和 .deb 软件包相关的信息。</p><p>dpkg 本身是一个底层的工具。上层的工具，像是 APT，被用于从远程获取软件包以及处理复杂的软件包关系。”dpkg”是”Debian Package”的简写</p></blockquote><p>我们经常可以在网络上见到以deb形式打包的软件包，就需要使用dpkg命令来安装。</p><p>dpkg常用参数介绍：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>安装指定deb包</td></tr><tr><td>-R</td><td>后面加上目录名，用于安装该目录下的所有deb安装包</td></tr><tr><td>-r</td><td>remove，移除某个已安装的软件包</td></tr><tr><td>-I</td><td>显示deb包文件的信息</td></tr><tr><td>-s</td><td>显示已安装软件的信息</td></tr><tr><td>-S</td><td>搜索已安装的软件包</td></tr><tr><td>-L</td><td>显示已安装软件包的目录信息</td></tr></tbody></table><h3 id="使用dpkg安装deb软件包"><a href="#使用dpkg安装deb软件包" class="headerlink" title="使用dpkg安装deb软件包"></a>使用dpkg安装deb软件包</h3><p>我们先使用apt-get加上-d参数只下载不安装，下载emacs编辑器的deb包，下载完成后，我们可以查看<code>/var/cache/apt/archives/</code>目录下的内容：</p><p>然后我们将第一个deb拷贝到home目录下，并使用dpkg安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;emacs24_24.3+1-4ubuntu1_amd64.deb ~</span><br><span class="line"># 安装之前参看deb包的信息</span><br><span class="line">$ sudo dpkg -I emacs24_24.3+1-4ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure><p>如你所见，这个包还额外依赖了一些软件包，这意味着，如果主机目前没有这些被依赖的软件包，直接使用dpkg安装可能会存在一些问题，因为dpkg并不能为你解决依赖关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用dpkg安装</span><br><span class="line">$ sudo dpkg -i emacs24_24.3+1-4ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure><p>跟前面预料的一样，这里你可能出现了一些错误：</p><p>我们将如何解决这个错误了，这就要用到apt-get了，使用它的-f参数了，修复依赖关系的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get -f install</span><br></pre></td></tr></table></figure><p>重新安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用dpkg安装</span><br><span class="line">$ sudo dpkg -i emacs24_24.3+1-4ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure><p>没有任何错误，这样我们就安装成功了，然后你可以运行emacs程序</p><h3 id="查看已安装软件包的安装目录"><a href="#查看已安装软件包的安装目录" class="headerlink" title="查看已安装软件包的安装目录"></a>查看已安装软件包的安装目录</h3><p>使用dpkg -L查看deb包目录信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg -L emacs24</span><br></pre></td></tr></table></figure><h2 id="从二进制包安装"><a href="#从二进制包安装" class="headerlink" title="从二进制包安装"></a>从二进制包安装</h2><p>二进制包的安装比较简单，我们需要做的只是将从网络上下载的二进制包解压后放到合适的目录，然后将包含可执行的主程序文件的目录添加进PATH环境变量即可，如果你不知道该放到什么位置，请重新复习第四节关于 Linux 目录结构的内容</p>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 挑战：数据提取</title>
      <link href="2017/07/05/Linux%20%E6%8C%91%E6%88%98%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96/"/>
      <url>2017/07/05/Linux%20%E6%8C%91%E6%88%98%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>Linux 挑战：数据提取</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>小明在做数据分析的时候需要提取文件中关于数字的部分，同时还要提取用户的邮箱部分，但是有的行不是数组也不是邮箱，现在需要你在data2这个文件中帮助他用正则表达式匹配出数字部分和邮箱部分。在这里下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;1&#x2F;data2</span><br></pre></td></tr></table></figure><p>将下载的data2保存在/home/shiyanlou/data2</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol><li>在文件data中匹配数字开头的行，结果写入/home/shiyanlou/num文件</li><li>在文件data中匹配出正确格式的邮箱，结果写入一个名为/home/shiyanlou/mail的文件</li></ol><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li>邮箱的格式</li><li>注意符号.的处理</li></ul><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>2016年tapfun校招面试题</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat data2 | grep -v &#39;[[:lower:]]&#39; &gt; &#x2F;home&#x2F;shiyanlou&#x2F;num </span><br><span class="line">$ cat data2 | grep &#39;.*@.*\.com&#39; &gt; &#x2F;home&#x2F;shiyanlou&#x2F;mail </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 正则表达式基础</title>
      <link href="2017/07/05/Linux%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
      <url>2017/07/05/Linux%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Linux 正则表达式基础</p><h2 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h2><p>一个正则表达式通常被称为一个模式（pattern），为用来描述或者匹配一系列符合某个句法规则的字符串。</p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>|竖直分隔符表示选择，例如”boy|girl”可以匹配”boy”或者”girl”</p><h3 id="数量限定"><a href="#数量限定" class="headerlink" title="数量限定"></a>数量限定</h3><p>数量限定除了我们举例用的*,还有+加号,?问号,如果在一个模式中不加数量限定符则表示出现一次且仅出现一次：</p><ol><li>+表示前面的字符必须出现至少一次(1次或多次)，例如，”goo+gle”,可以匹配”gooogle”,”goooogle”等；</li><li>?表示前面的字符最多出现一次(0次或1次)，例如，”colou?r”,可以匹配”color”或者”colour”;</li><li>*星号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次），例如，“0*42”可以匹配42、042、0042、00042等。</li></ol><h3 id="范围和优先级"><a href="#范围和优先级" class="headerlink" title="范围和优先级"></a>范围和优先级</h3><p>()圆括号可以用来定义模式字符串的范围和优先级，这可以简单的理解为是否将括号内的模式串作为一个整体。例如，”gr(a|e)y”等价于”gray|grey”，（这里体现了优先级，竖直分隔符用于选择a或者e而不是gra和ey），”(grand)?father”匹配father和grandfather（这里体验了范围，?将圆括号内容作为一个整体匹配）。</p><h3 id="语法（部分）"><a href="#语法（部分）" class="headerlink" title="语法（部分）"></a>语法（部分）</h3><p>正则表达式有多种不同的风格，下面列举一些常用的作为 PCRE 子集的适用于perl和python编程语言及grep或egrep的正则表达式匹配规则：(由于markdown表格解析的问题，下面的竖直分隔符用全角字符代替，实际使用时请换回半角字符)</p><blockquote><p>PCRE（Perl Compatible Regular Expressions中文含义：perl语言兼容正则表达式）是一个用 C 语言编写的正则表达式函数库，由菲利普.海泽(Philip Hazel)编写。PCRE是一个轻量级的函数库，比Boost 之类的正则表达式库小得多。PCRE 十分易用，同时功能也很强大，性能超过了 POSIX 正则表达式库和一些经典的正则表达式库。</p></blockquote><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。序列“\\”匹配“\”而“\(”则匹配“(”。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。</td></tr><tr><td>{n}</td><td>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td></tr><tr><td>{n,}</td><td>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td></tr><tr><td>{n,m}</td><td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><ul><li>   | 匹配前面的子表达式零次或多次。例如，zo<em>能匹配“z”、“zo”以及“zoo”。</em>等价于{0,}。</li></ul><ul><li>   | 匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。<br>?    | 匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。<br>?    | 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。<br>.    | 匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“(.｜\n)”的模式。<br>(pattern) |    匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。要匹配圆括号字符，请使用“\(”或“\)”。<br>x｜y    | 匹配x或y。例如，“z｜food”能匹配“z”或“food”。“(z｜f)ood”则匹配“zood”或“food”。<br>[xyz]    | 字符集合（character class）。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。其中特殊字符仅有反斜线\保持特殊含义，用于转义字符。其它特殊字符如星号、加号、各种括号等均作为普通字符。脱字符^如果出现在首位则表示负值字符集合；如果出现在字符串中间就仅作为普通字符。连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。<br>[^xyz]    | 排除型（negate）字符集合。匹配未列出的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。<br>[a-z]    | 字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。<br>[^a-z]    | 排除型的字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>优先级为从上到下从左到右，依次降低：</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>\</td><td>转义符</td></tr><tr><td>(), (?:), (?=), []</td><td>括号和中括号</td></tr><tr><td>*、+、?、{n}、{n,}、{n,m}</td><td>限定符</td></tr><tr><td>^、$、\任何元字符</td><td>定位点和序列</td></tr><tr><td>｜</td><td>选择</td></tr></tbody></table><h2 id="grep模式匹配命令"><a href="#grep模式匹配命令" class="headerlink" title="grep模式匹配命令"></a>grep模式匹配命令</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>grep命令用于打印输出文本中匹配的模式串，它使用正则表达式作为模式匹配的条件。grep支持三种正则表达式引擎，分别用三个参数指定：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-E</td><td>POSIX扩展正则表达式，ERE</td></tr><tr><td>-G</td><td>POSIX基本正则表达式，BRE</td></tr><tr><td>-P</td><td>Perl正则表达式，PCRE</td></tr></tbody></table><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>将二进制文件作为文本来进行匹配</td></tr><tr><td>-c</td><td>统计以模式匹配的数目</td></tr><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>-n</td><td>显示匹配文本所在行的行号</td></tr><tr><td>-v</td><td>反选，输出不匹配行的内容</td></tr><tr><td>-r</td><td>递归匹配查找</td></tr><tr><td>-A n</td><td>n为正整数，表示after的意思，除了列出匹配行之外，还列出后面的n行</td></tr><tr><td>-B n</td><td>n为正整数，表示before的意思，除了列出匹配行之外，还列出前面的n行</td></tr><tr><td>–color=auto</td><td>将输出中的匹配项设置为自动颜色显示</td></tr></tbody></table><blockquote><p>注：在大多数发行版中是默认设置了grep的颜色的，你可以通过参数指定或修改GREP_COLOR环境变量。</p></blockquote><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><h3 id="使用基本正则表达式，BRE"><a href="#使用基本正则表达式，BRE" class="headerlink" title="使用基本正则表达式，BRE"></a>使用基本正则表达式，BRE</h3><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>查找/etc/group文件中以”shiyanlou”为开头的行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;shiyanlou&#39; &#x2F;etc&#x2F;group</span><br><span class="line">$ grep &#39;^shiyanlou&#39; &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure><h4 id="数量"><a href="#数量" class="headerlink" title="数量"></a>数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将匹配以&#39;z&#39;开头以&#39;o&#39;结尾的所有字符串</span><br><span class="line">$ echo &#39;zero\nzo\nzoo&#39; | grep &#39;z.*o&#39;</span><br><span class="line"># 将匹配以&#39;z&#39;开头以&#39;o&#39;结尾，中间包含一个任意字符的字符串</span><br><span class="line">$ echo &#39;zero\nzo\nzoo&#39; | grep &#39;z.o&#39;</span><br><span class="line"># 将匹配以&#39;z&#39;开头,以任意多个&#39;o&#39;结尾的字符串</span><br><span class="line">$ echo &#39;zero\nzo\nzoo&#39; | grep &#39;zo*&#39;</span><br></pre></td></tr></table></figure><p>注意：其中\n为换行符</p><h4 id="选择-1"><a href="#选择-1" class="headerlink" title="选择"></a>选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># grep默认是区分大小写的，这里将匹配所有的小写字母</span><br><span class="line">$ echo &#39;1234\nabcd&#39; | grep &#39;[a-z]&#39;</span><br><span class="line"># 将匹配所有的数字</span><br><span class="line">$ echo &#39;1234\nabcd&#39; | grep &#39;[0-9]&#39;</span><br><span class="line"># 将匹配所有的数字</span><br><span class="line">$ echo &#39;1234\nabcd&#39; | grep &#39;[[:digit:]]&#39;</span><br><span class="line"># 将匹配所有的小写字母</span><br><span class="line">$ echo &#39;1234\nabcd&#39; | grep &#39;[[:lower:]]&#39;</span><br><span class="line"># 将匹配所有的大写字母</span><br><span class="line">$ echo &#39;1234\nabcd&#39; | grep &#39;[[:upper:]]&#39;</span><br><span class="line"># 将匹配所有的字母和数字，包括0-9,a-z,A-Z</span><br><span class="line">$ echo &#39;1234\nabcd&#39; | grep &#39;[[:alnum:]]&#39;</span><br><span class="line"># 将匹配所有的字母</span><br><span class="line">$ echo &#39;1234\nabcd&#39; | grep &#39;[[:alpha:]]&#39;</span><br></pre></td></tr></table></figure><p>下面包含完整的特殊符号及说明：</p><table><thead><tr><th>特殊符号</th><th>说明</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>代表英文大小写字节及数字，亦即 0-9, A-Z, a-z</td></tr><tr><td>[:alpha:]</td><td>代表任何英文大小写字节，亦即 A-Z, a-z</td></tr><tr><td>[:blank:]</td><td>代表空白键与 [Tab] 按键两者</td></tr><tr><td>[:cntrl:]</td><td>代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等</td></tr><tr><td>[:digit:]</td><td>代表数字而已，亦即 0-9</td></tr><tr><td>[:graph:]</td><td>除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键</td></tr><tr><td>[:lower:]</td><td>代表小写字节，亦即 a-z</td></tr><tr><td>[:print:]</td><td>代表任何可以被列印出来的字节</td></tr><tr><td>[:punct:]</td><td>代表标点符号 (punctuation symbol)，亦即：” ‘ ? ! ; : # $…</td></tr><tr><td>[:upper:]</td><td>代表大写字节，亦即 A-Z</td></tr><tr><td>[:space:]</td><td>任何会产生空白的字节，包括空白键, [Tab], CR 等等</td></tr><tr><td>[:xdigit:]</td><td>代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节</td></tr></tbody></table><blockquote><p>注意：之所以要使用特殊符号，是因为上面的[a-z]不是在所有情况下都管用，这还与主机当前的语系有关，即设置在LANG环境变量的值，zh_CN.UTF-8的话[a-z]，即为所有小写字母，其它语系可能是大小写交替的如，”a A b B…z Z”，[a-z]中就可能包含大写字母。所以在使用[a-z]时请确保当前语系的影响，使用[:lower:]则不会有这个问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 排除字符</span><br><span class="line">$ $ echo &#39;geek\ngood&#39; | grep &#39;[^o]&#39;</span><br></pre></td></tr></table></figure><blockquote><p>注意:当^放到中括号内为排除字符，否则表示行首。</p></blockquote><h3 id="使用扩展正则表达式，ERE"><a href="#使用扩展正则表达式，ERE" class="headerlink" title="使用扩展正则表达式，ERE"></a>使用扩展正则表达式，ERE</h3><p>要通过grep使用扩展正则表达式需要加上-E参数，或使用egrep</p><h4 id="数量-1"><a href="#数量-1" class="headerlink" title="数量"></a>数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 只匹配&quot;zo&quot;</span><br><span class="line">$ echo &#39;zero\nzo\nzoo&#39; | grep -E &#39;zo&#123;1&#125;&#39;</span><br><span class="line"># 匹配以&quot;zo&quot;开头的所有单词</span><br><span class="line">$ echo &#39;zero\nzo\nzoo&#39; | grep -E &#39;zo&#123;1,&#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>注意：推荐掌握{n,m}即可，+,?,*，这几个不太直观，且容易弄混淆。</p></blockquote><h4 id="选择-2"><a href="#选择-2" class="headerlink" title="选择"></a>选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配&quot;www.shiyanlou.com&quot;和&quot;www.google.com&quot;</span><br><span class="line">$ echo &#39;www.shiyanlou.com\nwww.baidu.com\nwww.google.com&#39; | grep -E &#39;www\.(shiyanlou|google)\.com&#39;</span><br><span class="line"># 或者匹配不包含&quot;baidu&quot;的内容</span><br><span class="line">$ echo &#39;www.shiyanlou.com\nwww.baidu.com\nwww.google.com&#39; | grep -Ev &#39;www\.baidu\.com&#39;</span><br></pre></td></tr></table></figure><blockquote><p>注意：因为.号有特殊含义，所以需要转义。</p></blockquote><h2 id="sed-流编辑器"><a href="#sed-流编辑器" class="headerlink" title="sed 流编辑器"></a>sed 流编辑器</h2><h3 id="sed常用参数介绍"><a href="#sed常用参数介绍" class="headerlink" title="sed常用参数介绍"></a>sed常用参数介绍</h3><p>sed 命令基本格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed [参数]... [执行命令] [输入文件]...</span><br><span class="line"># 形如：</span><br><span class="line">$ sed -i &#39;1s&#x2F;sad&#x2F;happy&#x2F;&#39; test # 表示将test文件中第一行的&quot;sad&quot;替换为&quot;happy&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>安静模式，只打印受影响的行，默认打印输入数据的全部内容</td></tr><tr><td>-e</td><td>用于在脚本中添加多个执行命令一次执行，在命令行中执行多个命令通常不需要加该参数</td></tr><tr><td>-f filename</td><td>指定执行filename文件中的命令</td></tr><tr><td>-r</td><td>使用扩展正则表达式，默认为标准正则表达式</td></tr><tr><td>-i</td><td>将直接修改输入文件内容，而不是打印到标准输出设备</td></tr></tbody></table><h3 id="sed编辑器的执行命令（这里”执行“解释为名词）"><a href="#sed编辑器的执行命令（这里”执行“解释为名词）" class="headerlink" title="sed编辑器的执行命令（这里”执行“解释为名词）"></a>sed编辑器的执行命令（这里”执行“解释为名词）</h3><p>sed执行命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[n1][,n2]command</span><br><span class="line">[n1][~step]command</span><br><span class="line"># 其中一些命令可以在后面加上作用范围，形如：</span><br><span class="line">$ sed -i &#39;s&#x2F;sad&#x2F;happy&#x2F;g&#39; test # g表示全局范围</span><br><span class="line">$ sed -i &#39;s&#x2F;sad&#x2F;happy&#x2F;4&#39; test # 4表示指定行中的第四个匹配字符串</span><br></pre></td></tr></table></figure><p>其中n1,n2表示输入内容的行号，它们之间为,逗号则表示从n1到n2行，如果为～波浪号则表示从n1开始以step为步进的所有行；command为执行动作，下面为一些常用动作指令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>s</td><td>行内替换</td></tr><tr><td>c</td><td>整行替换</td></tr><tr><td>a</td><td>插入到指定行的后面</td></tr><tr><td>i</td><td>插入到指定行的前面</td></tr><tr><td>p</td><td>打印指定行，通常与-n参数配合使用</td></tr><tr><td>d</td><td>删除指定行</td></tr></tbody></table><h3 id="sed操作举例"><a href="#sed操作举例" class="headerlink" title="sed操作举例"></a>sed操作举例</h3><p>我们先找一个用于练习的文本文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp &#x2F;etc&#x2F;passwd ~</span><br></pre></td></tr></table></figure><h4 id="打印指定行"><a href="#打印指定行" class="headerlink" title="打印指定行"></a>打印指定行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 打印2-5行</span><br><span class="line">$ nl passwd | sed -n &#39;2,5p&#39;</span><br><span class="line"># 打印奇数行</span><br><span class="line">$ nl passwd | sed -n &#39;1~2p&#39;</span><br></pre></td></tr></table></figure><h4 id="行内替换"><a href="#行内替换" class="headerlink" title="行内替换"></a>行内替换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将输入文本中&quot;shiyanlou&quot; 全局替换为&quot;hehe&quot;,并只打印替换的那一行，注意这里不能省略最后的&quot;p&quot;命令</span><br><span class="line">$ sed -n &#39;s&#x2F;shiyanlou&#x2F;hehe&#x2F;gp&#39; passwd</span><br></pre></td></tr></table></figure><blockquote><p>注意： 行内替换可以结合正则表达式使用。</p></blockquote><h4 id="行间替换"><a href="#行间替换" class="headerlink" title="行间替换"></a>行间替换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nl passwd | grep &quot;shiyanlou&quot;</span><br><span class="line"># 删除第21行</span><br><span class="line">$ sed -n &#39;21c\www.shiyanlou.com&#39; passwd</span><br><span class="line">（这里我们只把要删的行打印出来了，并没有真正的删除，如果要删除的话，请使用-i参数）</span><br></pre></td></tr></table></figure><h2 id="awk文本处理语言"><a href="#awk文本处理语言" class="headerlink" title="awk文本处理语言"></a>awk文本处理语言</h2><h3 id="awk介绍"><a href="#awk介绍" class="headerlink" title="awk介绍"></a>awk介绍</h3><blockquote><p>AWK是一种优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一.其名称得自于它的创始人Alfred Aho（阿尔佛雷德·艾侯）、Peter Jay Weinberger（彼得·温伯格）和Brian Wilson Kernighan（布莱恩·柯林汉)姓氏的首个字母.AWK程序设计语言，三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。最简单地说，AWK是一种用于处理文本的编程语言工具。</p></blockquote><p>在大多数linux发行版上面，实际我们使用的是gawk（GNU awk，awk的GNU版本），在我们的环境中ubuntu上，默认提供的是mawk，不过我们通常可以直接使用awk命令（awk语言的解释器），因为系统已经为我们创建好了awk指向mawk的符号链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ll &#x2F;usr&#x2F;bin&#x2F;awk</span><br></pre></td></tr></table></figure><blockquote><p>nawk： 在 20 世纪 80 年代中期，对 awk语言进行了更新，并不同程度地使用一种称为 nawk(new awk) 的增强版本对其进行了替换。许多系统中仍然存在着旧的awk 解释器，但通常将其安装为 oawk (old awk) 命令，而 nawk 解释器则安装为主要的 awk 命令，也可以使用 nawk 命令。Dr. Kernighan 仍然在对 nawk 进行维护，与 gawk 一样，它也是开放源代码的，并且可以免费获得;</p><p>gawk： 是 GNU Project 的awk解释器的开放源代码实现。尽管早期的 GAWK 发行版是旧的 AWK 的替代程序，但不断地对其进行了更新，以包含 NAWK 的特性;</p><p>mawk 也是awk编程语言的一种解释器，mawk遵循 POSIX 1003.2 （草案 11.3）定义的 AWK 语言，包含了一些没有在AWK 手册中提到的特色，同时 mawk 提供一小部分扩展,另外据说mawk是实现最快的awk</p></blockquote><h3 id="awk的一些基础概念"><a href="#awk的一些基础概念" class="headerlink" title="awk的一些基础概念"></a>awk的一些基础概念</h3><p>awk所有的操作都是基于pattern(模式)—action(动作)对来完成的，如下面的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pattern &#123;action&#125;</span><br></pre></td></tr></table></figure><p>你可以看到就如同很多编程语言一样，它将所有的动作操作用一对{}花括号包围起来。其中pattern通常是是表示用于匹配输入的文本的“关系式”或“正则表达式”，action则是表示匹配后将执行的动作。在一个完整awk操作中，这两者可以只有其中一个，如果没有pattern则默认匹配输入的全部文本，如果没有action则默认为打印匹配内容到屏幕。</p><p>awk处理文本的方式，是将文本分割成一些“字段”，然后再对这些字段进行处理，默认情况下，awk以空格作为一个字段的分割符，不过这不是固定了，你可以任意指定分隔符，下面将告诉你如何做到这一点。</p><h3 id="awk命令基本格式"><a href="#awk命令基本格式" class="headerlink" title="awk命令基本格式"></a>awk命令基本格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [-F fs] [-v var&#x3D;value] [-f prog-file | &#39;program text&#39;] [file...]</span><br></pre></td></tr></table></figure><p>其中-F参数用于预先指定前面提到的字段分隔符（还有其他指定字段的方式） ，-v用于预先为awk程序指定变量，-f参数用于指定awk命令要执行的程序文件，或者在不加-f参数的情况下直接将程序语句放在这里，最后为awk需要处理的文本输入，且可以同时输入多个文本文件。</p><h3 id="awk操作体验"><a href="#awk操作体验" class="headerlink" title="awk操作体验"></a>awk操作体验</h3><p>先用vim新建一个文本文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim test</span><br></pre></td></tr></table></figure><p>包含如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I like linux</span><br><span class="line">www.shiyanlou.com</span><br></pre></td></tr></table></figure><h4 id="使用awk将文本内容打印到终端"><a href="#使用awk将文本内容打印到终端" class="headerlink" title="使用awk将文本内容打印到终端"></a>使用awk将文本内容打印到终端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># &quot;quote&gt;&quot; 不用输入</span><br><span class="line">$ awk &#39;&#123;</span><br><span class="line">&gt; print</span><br><span class="line">&gt; &#125;&#39; test</span><br><span class="line"># 或者写到一行</span><br><span class="line">$ awk &#39;&#123;print&#125;&#39; test</span><br></pre></td></tr></table></figure><p>说明:在这个操作中我是省略了pattern，所以awk会默认匹配输入文本的全部内容，然后在”{}”花括号中执行动作，即print打印所有匹配项，这里是全部文本内容</p><h4 id="将test的第一行的每个字段单独显示为一行"><a href="#将test的第一行的每个字段单独显示为一行" class="headerlink" title="将test的第一行的每个字段单独显示为一行"></a>将test的第一行的每个字段单独显示为一行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ awk &#39;&#123;</span><br><span class="line">&gt; if(NR&#x3D;&#x3D;1)&#123;</span><br><span class="line">&gt; print $1 &quot;\n&quot; $2 &quot;\n&quot; $3</span><br><span class="line">&gt; &#125; else &#123;</span><br><span class="line">&gt; print&#125;</span><br><span class="line">&gt; &#125;&#39; test</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">$ awk &#39;&#123;</span><br><span class="line">&gt; if(NR&#x3D;&#x3D;1)&#123;</span><br><span class="line">&gt; OFS&#x3D;&quot;\n&quot;</span><br><span class="line">&gt; print $1, $2, $3</span><br><span class="line">&gt; &#125; else &#123;</span><br><span class="line">&gt; print&#125;</span><br><span class="line">&gt; &#125;&#39; test</span><br></pre></td></tr></table></figure><p>说明:你首先应该注意的是，这里我使用了awk语言的分支选择语句if,它的使用和很多高级语言如C/C++语言基本一致，如果你有这些语言的基础，这里将很好理解。另一个你需要注意的是NR与OFS，这两个是awk内建的变量，NR表示当前读入的记录数，你可以简单的理解为当前处理的行数，OFS表示输出时的字段分隔符，默认为” “空格，如上图所见，我们将字段分隔符设置为\n换行符，所以第一行原本以空格为字段分隔的内容就分别输出到单独一行了。然后是$N其中N为相应的字段号，这也是awk的内建变量，它表示引用相应的字段，因为我们这里第一行只有三个字段，所以只引用到了$3。除此之外另一个这里没有出现的$0，它表示引用当前记录（当前行）的全部内容。</p><h4 id="将test的第二行的以点为分段的字段换成以空格为分隔"><a href="#将test的第二行的以点为分段的字段换成以空格为分隔" class="headerlink" title="将test的第二行的以点为分段的字段换成以空格为分隔"></a>将test的第二行的以点为分段的字段换成以空格为分隔</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F&#39;.&#39; &#39;&#123;</span><br><span class="line">&gt; if(NR&#x3D;&#x3D;2)&#123;</span><br><span class="line">&gt; print $1 &quot;\t&quot; $2 &quot;\t&quot; $3</span><br><span class="line">&gt; &#125;&#125;&#39; test</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">$ awk &#39;</span><br><span class="line">&gt; BEGIN&#123;</span><br><span class="line">&gt; FS&#x3D;&quot;.&quot;</span><br><span class="line">&gt; OFS&#x3D;&quot;\t&quot;  # 如果写为一行，两个动作语句之间应该以&quot;;&quot;号分开  </span><br><span class="line">&gt; &#125;&#123;</span><br><span class="line">&gt; if(NR&#x3D;&#x3D;2)&#123;</span><br><span class="line">&gt; print $1, $2, $3</span><br><span class="line">&gt; &#125;&#125;&#39; test</span><br></pre></td></tr></table></figure><p>说明：这里的-F参数，前面已经介绍过，它是用来预先指定待处理记录的字段分隔符。我们需要注意的是除了指定OFS我们还可以在print 语句中直接打印特殊符号如这里的\t，print打印的非变量内容都需要用””一对引号包围起来。上面另一个版本，展示了实现预先指定变量分隔符的另一种方式，即使用BEGIN，就这个表达式指示了，其后的动作将在所有动作之前执行，这里是FS赋值了新的”.”点号代替默认的” “空格</p><p>注意:首先说明一点，我们在学习和使用awk的时候应该尽可能将其作为一门程序语言来理解，这样将会使你学习起来更容易，所以初学阶段在练习awk时应该尽量按照我那样的方式分多行按照一般程序语言的换行和缩进来输入，而不是全部写到一行（当然这在你熟练了之后是没有任何问题的）。</p><h3 id="awk常用的内置变量"><a href="#awk常用的内置变量" class="headerlink" title="awk常用的内置变量"></a>awk常用的内置变量</h3><table><thead><tr><th>变量名</th><th>说明</th></tr></thead><tbody><tr><td>FILENAME</td><td>当前输入文件名，若有多个文件，则只表示第一个。如果输入是来自标准输入，则为空字符串</td></tr><tr><td>$0</td><td>当前记录的内容</td></tr><tr><td>$N</td><td>N表示字段号，最大值为NF变量的值</td></tr><tr><td>FS</td><td>字段分隔符，由正则表达式表示，默认为” “空格</td></tr><tr><td>RS</td><td>输入记录分隔符，默认为”\n”，即一行为一个记录</td></tr><tr><td>NF</td><td>当前记录字段数</td></tr><tr><td>NR</td><td>已经读入的记录数</td></tr><tr><td>FNR</td><td>当前输入文件的记录数，请注意它与NR的区别</td></tr><tr><td>OFS</td><td>输出字段分隔符，默认为” “空格</td></tr><tr><td>ORS</td><td>输出记录分隔符，默认为”\n”</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 挑战：历史命令</title>
      <link href="2017/07/04/Linux%20%E6%8C%91%E6%88%98%EF%BC%9A%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4/"/>
      <url>2017/07/04/Linux%20%E6%8C%91%E6%88%98%EF%BC%9A%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Linux 挑战：历史命令</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在linux中，对于文本的处理和分析是极为重要的，现在有一个文件叫做data1，同学们可以在这里下载，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;labfile.oss.aliyuncs.com&#x2F;courses&#x2F;1&#x2F;data1</span><br></pre></td></tr></table></figure><p>里面记录是一些命令的记录，现在需要你从里面找出出现频率次数前3的命令并保存在 <code>/home/shiyanlou/result</code>。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol><li>处理文本data</li><li>将结果写入result</li><li>结果包含次数和命令，如“100 ls”</li></ol><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ol><li>cut截取(-c 8- 明白含义吗)</li><li>uniq -dc去重</li><li>sort 的参数选择-k1 -n -r</li></ol><p>答案类似于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat data|....|....|....   &gt;  &#x2F;home&#x2F;shiyanlou&#x2F;result</span><br></pre></td></tr></table></figure><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>2016年百度校招面试题</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut data1 -c 8- | sort -k 1 | uniq -dc | sort -k 1 -n -r | head -3 &gt; &#x2F;home&#x2F;shiyanlou&#x2F;result</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 数据流重定向</title>
      <link href="2017/07/04/Linux%20%E6%95%B0%E6%8D%AE%E6%B5%81%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>2017/07/04/Linux%20%E6%95%B0%E6%8D%AE%E6%B5%81%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>Linux 数据流重定向</p><h2 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h2><h3 id="简单的重定向"><a href="#简单的重定向" class="headerlink" title="简单的重定向"></a>简单的重定向</h3><table><thead><tr><th>文件描述符</th><th>设备文件</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>/dev/stdin</td><td>标准输入</td></tr><tr><td>1</td><td>/dev/stdout</td><td>标准输出</td></tr><tr><td>2</td><td>/dev/stderr</td><td>标准错误</td></tr></tbody></table><blockquote><p>文件描述符：文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于 UNIX、Linux 这样的操作系统。</p></blockquote><p>默认使用终端的标准输入作为命令的输入和标准输出作为命令的输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat </span><br><span class="line"># （按Ctrl+C退出）</span><br></pre></td></tr></table></figure><p>将cat的连续输出（heredoc方式）重定向到一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir Documents</span><br><span class="line">$ cat &gt; Documents&#x2F;test.c &lt;&lt;EOF</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello world\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>将一个文件作为命令的输入，标准输出作为命令的输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat Documents&#x2F;test.c</span><br></pre></td></tr></table></figure><p>将echo命令通过管道传过来的数据作为cat命令的输入，将标准输出作为命令的输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#39;hi&#39; | cat</span><br></pre></td></tr></table></figure><p>将echo命令的输出从默认的标准输出重定向到一个普通文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#39;hello shiyanlou&#39; &gt; redirect</span><br><span class="line">$ cat redirect</span><br></pre></td></tr></table></figure><h3 id="标准错误重定向"><a href="#标准错误重定向" class="headerlink" title="标准错误重定向"></a>标准错误重定向</h3><p>我们经常看到的一个命令的输出通常是同时包含了标准输出和标准错误的结果的。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用cat 命令同时读取两个文件，其中一个存在，另一个不存在</span><br><span class="line">$ cat Documents&#x2F;test.c hello.c</span><br><span class="line"># 你可以看到除了正确输出了前一个文件的内容，还在末尾出现了一条错误信息</span><br><span class="line"># 下面我们将输出重定向到一个文件，根据我们前面的经验，这里将在看不到任何输出了</span><br><span class="line">$ cat Documents&#x2F;test.c hello.c &gt; somefile</span><br><span class="line"># 遗憾的是，这里依然出现了那条错误信息，因为，标准输出和标准错误虽然都指向终端屏幕，实际它们并不一样。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将标准错误重定向到标准输出，再将标准输出重定向到文件，注意要将重定向到文件写到前面</span><br><span class="line">$ cat Documents&#x2F;test.c hello.c &gt;somefile  2&gt;&amp;1</span><br><span class="line"># 注意你应该在输出重定向文件描述符前加上&amp;,否则shell会当做重定向到一个文件名为1的文件中</span><br><span class="line"># 或者只用bash提供的特殊的重定向符号&quot;&amp;&quot;将标准错误和标准输出同时重定向到文件</span><br><span class="line">$ cat Documents&#x2F;test.c hello.c &amp;&gt;somefilehell</span><br></pre></td></tr></table></figure><h3 id="使用tee命令同时重定向到多个文件"><a href="#使用tee命令同时重定向到多个文件" class="headerlink" title="使用tee命令同时重定向到多个文件"></a>使用tee命令同时重定向到多个文件</h3><p>将需要将输出重定向到文件，同时将信息打印在终端，可以使用tee命令来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#39;hello shiyanlou&#39; | tee hello</span><br></pre></td></tr></table></figure><h3 id="永久重定向"><a href="#永久重定向" class="headerlink" title="永久重定向"></a>永久重定向</h3><p>exec命令的作用是使用指定的命令替换当前的 Shell，及使用一个进程替换当前进程，或者指定新的重定向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 先开启一个子 Shell</span><br><span class="line">$ zsh</span><br><span class="line"># 使用exec替换当前进程的重定向，将标准输出重定向到一个文件</span><br><span class="line">$ exec 1&gt;somefile</span><br><span class="line"># 后面你执行的命令的输出都将被重定向到文件中,直到你退出当前子shell，或取消exec的重定向（后面将告诉你怎么做）</span><br><span class="line">$ ls</span><br><span class="line">$ exit</span><br><span class="line">$ cat somefile</span><br></pre></td></tr></table></figure><h3 id="创建输出文件描述符"><a href="#创建输出文件描述符" class="headerlink" title="创建输出文件描述符"></a>创建输出文件描述符</h3><p>默认在 Shell 中可以有9个打开的文件描述符，上面我们使用了也是它默认提供的0,1,2号文件描述符，另外我们还可以使用3-8的文件描述符，只是它们默认没有打开而已，你可以使用下面命令查看当前 Shell 进程中打开的文件描述符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;dev&#x2F;fd&#x2F;;ls -Al</span><br></pre></td></tr></table></figure><p>同样使用exec命令可以创建新的文件描述符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ zsh</span><br><span class="line">$ exec 3&gt;somefile</span><br><span class="line"># 先进入目录，再查看，否则你可能不能得到正确的结果，然后再回到上一次的目录</span><br><span class="line">$ cd &#x2F;dev&#x2F;fd&#x2F;;ls -Al;cd -</span><br><span class="line"># 注意下面的命令&gt;与&amp;之间不应该有空格，如果有空格则会出错</span><br><span class="line">$ echo &quot;this is test&quot; &gt;&amp;3</span><br><span class="line">$ cat somefile</span><br><span class="line">$ exit</span><br></pre></td></tr></table></figure><h3 id="关闭文件描述符"><a href="#关闭文件描述符" class="headerlink" title="关闭文件描述符"></a>关闭文件描述符</h3><p>如上面我们打开的3号文件描述符，可以使用如下操作将它关闭：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ exec 3&gt;&amp;-</span><br><span class="line">$ cd &#x2F;dev&#x2F;fd;ls -Al;cd -</span><br></pre></td></tr></table></figure><h3 id="完全屏蔽命令的输出"><a href="#完全屏蔽命令的输出" class="headerlink" title="完全屏蔽命令的输出"></a>完全屏蔽命令的输出</h3><p>在 Linux 中有一个被称为“黑洞”的设备文件,所以导入它的数据都将被“吞噬”。</p><p>在类 UNIX 系统中，/dev/null，或称空设备，是一个特殊的设备文件，它通常被用于丢弃不需要的输出流，或作为用于输入流的空文件，这些操作通常由重定向完成。读取它则会立即得到一个EOF。<br>我们可以利用设个/dev/null屏蔽命令的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat Documents&#x2F;test.c nefile 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>上面这样的操作将使你得不到任何输出结果。</p><h3 id="使用-xargs-分割参数列表"><a href="#使用-xargs-分割参数列表" class="headerlink" title="使用 xargs 分割参数列表"></a>使用 xargs 分割参数列表</h3><blockquote><p>xargs 是一条 UNIX 和类 UNIX 操作系统的常用命令。它的作用是将参数列表转换成小块分段传递给其他命令，以避免参数列表过长的问题。</p></blockquote><p>这个命令在有些时候十分有用，特别是当用来处理产生大量输出结果的命令如 find，locate 和 grep 的结果，详细用法请参看 man 文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cut -d: -f1 &lt; &#x2F;etc&#x2F;passwd | sort | xargs echo</span><br><span class="line">上面这个命令用于将&#x2F;etc&#x2F;passwd文件按:分割取第一个字段排序后，使用echo命令生成一个列表。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 简单的文本处理</title>
      <link href="2017/07/04/Linux%20%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
      <url>2017/07/04/Linux%20%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Linux 简单的文本处理</p><h2 id="文本处理命令"><a href="#文本处理命令" class="headerlink" title="文本处理命令"></a>文本处理命令</h2><h3 id="tr-命令"><a href="#tr-命令" class="headerlink" title="tr 命令"></a>tr 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用来删除一段文本信息中的某些文字。或者将其进行转换。</span><br><span class="line">$ tr [option]...SET1 [SET2]</span><br></pre></td></tr></table></figure><p>常用选项:</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-d</td><td>删除和set1匹配的字符，注意不是全词匹配也不是按字符顺序匹配</td></tr><tr><td>-s</td><td>去除set1指定的在输入文本中连续并重复的字符</td></tr></tbody></table><p>常用操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 删除 &quot;hello shiyanlou&quot; 中所有的&#39;o&#39;,&#39;l&#39;,&#39;h&#39;</span><br><span class="line">$ echo &#39;hello shiyanlou&#39; | tr -d &#39;olh&#39;</span><br><span class="line"># 将&quot;hello&quot; 中的ll,去重为一个l</span><br><span class="line">$ echo &#39;hello&#39; | tr -s &#39;l&#39;</span><br><span class="line"># 将输入文本，全部转换为大写或小写输出</span><br><span class="line">$ cat &#x2F;etc&#x2F;passwd | tr &#39;[:lower:]&#39; &#39;[:upper:]&#39;</span><br><span class="line"># 上面的&#39;[:lower:]&#39; &#39;[:upper:]&#39;你也可以简单的写作&#39;[a-z]&#39; &#39;[A-Z]&#39;,当然反过来将大写变小写也是可以的</span><br></pre></td></tr></table></figure><h3 id="col-命令"><a href="#col-命令" class="headerlink" title="col 命令"></a>col 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># col 命令可以将Tab换成对等数量的空格键，或反转这个操作</span><br><span class="line">$ col [option]</span><br></pre></td></tr></table></figure><p>常用选项：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-x</td><td>将Tab转换为空格</td></tr><tr><td>-h</td><td>将空格转换为Tab（默认选项）</td></tr></tbody></table><p>操作举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看 &#x2F;etc&#x2F;protocols 中的不可见字符，可以看到很多 ^I ，这其实就是 Tab 转义成可见字符的符号</span><br><span class="line">$ cat -A &#x2F;etc&#x2F;protocols</span><br><span class="line"># 使用 col -x 将 &#x2F;etc&#x2F;protocols 中的 Tab 转换为空格,然后再使用 cat 查看，你发现 ^I 不见了</span><br><span class="line">$ cat &#x2F;etc&#x2F;protocols | col -x | cat -A</span><br></pre></td></tr></table></figure><h3 id="join命令"><a href="#join命令" class="headerlink" title="join命令"></a>join命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用于将两个文件中包含相同内容的那一行合并在一起</span><br><span class="line">$ join [option]... file1 file2</span><br></pre></td></tr></table></figure><p>常用选有：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-t</td><td>指定分隔符，默认为空格</td></tr><tr><td>-i</td><td>忽略大小写的差异</td></tr><tr><td>-1</td><td>指明第一个文件要用哪个字段来对比，，默认对比第一个字段</td></tr><tr><td>-2</td><td>指明第二个文件要用哪个字段来对比，，默认对比第一个字段</td></tr></tbody></table><p>操作举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建两个文件</span><br><span class="line">$ echo &#39;1 hello&#39; &gt; file1</span><br><span class="line">$ echo &#39;1 shiyanlou&#39; &gt; file2</span><br><span class="line">$ join file1 file2</span><br><span class="line"># 将&#x2F;etc&#x2F;passwd与&#x2F;etc&#x2F;shadow两个文件合并，指定以&#39;:&#39;作为分隔符</span><br><span class="line">$ sudo join -t&#39;:&#39; &#x2F;etc&#x2F;passwd &#x2F;etc&#x2F;shadow</span><br><span class="line"># 将&#x2F;etc&#x2F;passwd与&#x2F;etc&#x2F;group两个文件合并，指定以&#39;:&#39;作为分隔符, 分别比对第4和第3个字段</span><br><span class="line">$ sudo join -t&#39;:&#39; -1 4 &#x2F;etc&#x2F;passwd -2 3 &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure><h3 id="paste命令"><a href="#paste命令" class="headerlink" title="paste命令"></a>paste命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在不对比数据的情况下，简单地将多个文件合并一起，以Tab隔开。</span><br><span class="line">paste [option] file...</span><br></pre></td></tr></table></figure><p>常用选项：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-d</td><td>指定合并的分隔符，默认为Tab</td></tr><tr><td>-s</td><td>不合并到一行，每个文件为一行</td></tr></tbody></table><p>操作举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ echo hello &gt; file1</span><br><span class="line">$ echo shiyanlou &gt; file2</span><br><span class="line">$ echo www.shiyanlou.com &gt; file3</span><br><span class="line">$ paste -d &#39;:&#39; file1 file2 file3</span><br><span class="line">$ paste -s file1 file2 file3</span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p>1、在《文件打包与解压缩》一节实验中提到 Windows/dos 与 Linux/UNIX 文本文件一些特殊字符不一致如断行符 Windows  为 CR+LF(\r\n)，Linux/UNIX 为 LF(\n)。</p><p>使用cat -A 文本可以看到文本中包含的不可见特殊字符。Linux 的\n表现出来就是一个$，而 Windows/dos 的表现为 ^M$，可以直接使用dos2unix和unix2dos工具在两种格式之间进行转换，使用file命令可以查看文件的具体类型。</p><p>不过现在希望你在不使用上述两个转换工具的情况下，使用前面学过的命令手动完成 dos 文本格式到 UNIX 文本格式的转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat -A file | tr &#39;$&#39; &#39;^M$&#39;</span><br><span class="line">$ cat -A file | tr &#39;^M$&#39; &#39;$&#39;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令执行顺序控制与管道</title>
      <link href="2017/07/02/Linux%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E7%AE%A1%E9%81%93/"/>
      <url>2017/07/02/Linux%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>Linux 命令执行顺序控制与管道</p><h2 id="命令执行顺序的控制"><a href="#命令执行顺序的控制" class="headerlink" title="命令执行顺序的控制"></a>命令执行顺序的控制</h2><h3 id="顺序执行多条命令"><a href="#顺序执行多条命令" class="headerlink" title="顺序执行多条命令"></a>顺序执行多条命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update;sudo apt-get install some-tool;some-tool</span><br></pre></td></tr></table></figure><h3 id="有选择的执行命令"><a href="#有选择的执行命令" class="headerlink" title="有选择的执行命令"></a>有选择的执行命令</h3><h4 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h4><p>使用which来查找是否安装某个命令，如果找到就执行该命令，否则什么也不做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ which cowsay&gt;&#x2F;dev&#x2F;null &amp;&amp; cowsay -f head-in ohch~</span><br></pre></td></tr></table></figure><p>上面的&amp;&amp;就是用来实现选择性执行的，它表示如果前面的命令执行结果（不是表示终端输出的内容，而是表示命令执行状态的结果）返回0则执行后面的，否则不执行，你可以从$?环境变量获取上一次命令的返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo $?</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title="||"></a>||</h4><p><code>||</code>表示与<code>&amp;&amp;</code>相反的控制效果，当上一条命令执行结果为<code>≠0($?≠0)</code>时则执行它后面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ which cowsay&gt;&#x2F;dev&#x2F;null || echo &quot;cowsay has not been install, please run &#39;sudo apt-get install cowsay&#39; to install&quot;</span><br></pre></td></tr></table></figure><h4 id="组合使用-amp-amp"><a href="#组合使用-amp-amp" class="headerlink" title="组合使用 || &amp;&amp;"></a>组合使用 || &amp;&amp;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ which cowsay&gt;&#x2F;dev&#x2F;null &amp;&amp; echo &quot;exist&quot; || echo &quot;not exist&quot;</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>将前面每一个进程的输出(stdout)直接作为下一个进程的输入(stdin)</p><p>在命令行中由<code>|</code>分隔符表示</p><h3 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h3><p>查看/etc目录下有哪些文件和目录，通过管道将前一个命令(ls)的输出作为下一个命令(less)的输入，然后就可以一行一行地看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al &#x2F;etc | less</span><br></pre></td></tr></table></figure><h3 id="cut-命令，打印每一行的某一字段"><a href="#cut-命令，打印每一行的某一字段" class="headerlink" title="cut 命令，打印每一行的某一字段"></a>cut 命令，打印每一行的某一字段</h3><p>打印/etc/passwd文件中以:为分隔符的第1个字段和第6个字段分别表示用户名和其家目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut &#x2F;etc&#x2F;passwd -d &#39;:&#39; -f 1,6</span><br></pre></td></tr></table></figure><p>打印/etc/passwd文件中每一行的前N个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 前五个（包含第五个）</span><br><span class="line">$ cut &#x2F;etc&#x2F;passwd -c -5</span><br><span class="line"># 前五个之后的（包含第五个）</span><br><span class="line">$ cut &#x2F;etc&#x2F;passwd -c 5-</span><br><span class="line"># 第五个</span><br><span class="line">$ cut &#x2F;etc&#x2F;passwd -c 5</span><br><span class="line"># 2到5之间的（包含第五个）</span><br><span class="line">$ cut &#x2F;etc&#x2F;passwd -c 2-5</span><br></pre></td></tr></table></figure><h3 id="grep-命令，在文本中或-stdin-中查找匹配字符串"><a href="#grep-命令，在文本中或-stdin-中查找匹配字符串" class="headerlink" title="grep 命令，在文本中或 stdin 中查找匹配字符串"></a>grep 命令，在文本中或 stdin 中查找匹配字符串</h3><p><code>grep</code>命令的一般形式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [命令选项]... 用于匹配的表达式 [文件]...</span><br></pre></td></tr></table></figure><p>搜索/home/shiyanlou目录下所有包含”shiyanlou”的所有文本文件，并显示出现在文本中的行号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ grep -rnI &quot;shiyanlou&quot; ~</span><br><span class="line">#-r 参数表示递归搜索子目录中的文件,</span><br><span class="line"># -n表示打印匹配项行号，</span><br><span class="line"># -I表示忽略二进制文件 </span><br></pre></td></tr></table></figure><p>简单的演示匹配字段中使用正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export | grep &quot;.*yanlou$&quot;</span><br></pre></td></tr></table></figure><h3 id="wc-命令，简单小巧的计数工具"><a href="#wc-命令，简单小巧的计数工具" class="headerlink" title="wc 命令，简单小巧的计数工具"></a>wc 命令，简单小巧的计数工具</h3><p>输出/etc/passwd文件的统计信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wc &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>分别只输出行数、单词数、字节数、字符数和输入文本中最长一行的字节数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 行数</span><br><span class="line">$ wc -l &#x2F;etc&#x2F;passwd</span><br><span class="line"># 单词数</span><br><span class="line">$ wc -w &#x2F;etc&#x2F;passwd</span><br><span class="line"># 字节数</span><br><span class="line">$ wc -c &#x2F;etc&#x2F;passwd</span><br><span class="line"># 字符数</span><br><span class="line">$ wc -m &#x2F;etc&#x2F;passwd</span><br><span class="line"># 最长行字节数</span><br><span class="line">$ wc -L &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>统计 /etc 下面所有目录数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -dl &#x2F;etc&#x2F;*&#x2F; | wc -l</span><br></pre></td></tr></table></figure><h3 id="sort-排序命令"><a href="#sort-排序命令" class="headerlink" title="sort 排序命令"></a>sort 排序命令</h3><h4 id="字典排序-fault"><a href="#字典排序-fault" class="headerlink" title="字典排序(fault)"></a>字典排序(fault)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;passswd | sort</span><br></pre></td></tr></table></figure><h4 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;passwd | sort -r</span><br></pre></td></tr></table></figure><h4 id="按特定字段排序"><a href="#按特定字段排序" class="headerlink" title="按特定字段排序"></a>按特定字段排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;passwd | sort -t&#39;:&#39; -k 3</span><br></pre></td></tr></table></figure><p>上面的-t参数用于指定字段的分隔符，这里是以”:”作为分隔符；-k 字段号用于指定对哪一个字段进行排序。这里/etc/passwd文件的第三个字段为数字，默认情况下是以字典序排序的，如果要按照数字排序就要加上-n参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;passwd | sort -t&#39;:&#39; -k 3 -n</span><br></pre></td></tr></table></figure><h3 id="uniq-去重命令"><a href="#uniq-去重命令" class="headerlink" title="uniq 去重命令"></a>uniq 去重命令</h3><h4 id="过滤重复行"><a href="#过滤重复行" class="headerlink" title="过滤重复行"></a>过滤重复行</h4><p>我们可以使用history命令查看最近执行过的命令（实际为读取${SHELL}_history文件,如我们环境中的~/.zsh_history文件），不过你可能只想查看使用了那个命令而不需要知道具体干了什么，那么你可能就会要想去掉命令后面的参数然后去掉重复的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ history | cut -c 8- | cut -d &#39; &#39; -f 1 | uniq</span><br></pre></td></tr></table></figure><p>然后经过层层过滤，你会发现确是只输出了执行的命令那一列，不过去重效果好像不明显，仔细看你会发现它确实去重了，只是不那么明显，之所以不明显是因为uniq命令只能去连续重复的行，不是全文去重，所以要达到预期效果，我们先排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq</span><br><span class="line"># 或者</span><br><span class="line">$ history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort -u</span><br></pre></td></tr></table></figure><p>这就是 Linux/UNIX 哲学吸引人的地方，大繁至简，一个命令只干一件事却能干到最好。</p><h4 id="输出重复行"><a href="#输出重复行" class="headerlink" title="输出重复行"></a>输出重复行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 输出重复过的行（重复的只输出一个）及重复次数</span><br><span class="line">$ history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq -dc</span><br><span class="line"># 输出所有重复的行</span><br><span class="line">$ history | cut -c 8- | cut -d &#39; &#39; -f 1 | sort | uniq -D</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 任务计划crontab</title>
      <link href="2017/07/02/Linux%20%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92crontab/"/>
      <url>2017/07/02/Linux%20%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92crontab/</url>
      
        <content type="html"><![CDATA[<p>Linux 任务计划crontab</p><h2 id="crontab-简介"><a href="#crontab-简介" class="headerlink" title="crontab 简介"></a>crontab 简介</h2><p>这里我们看一看crontab 的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name command to be executed</span><br></pre></td></tr></table></figure><h2 id="crontab-准备"><a href="#crontab-准备" class="headerlink" title="crontab 准备"></a>crontab 准备</h2><p>crontab 在本实验环境中需要做一些特殊的准备，首先我们会启动 rsyslog，以便我们可以通过日志中的信息来了解我们的任务是否真正的被执行了（在本实验环境中需要手动启动，而在自己本地中 Ubuntu 会默认自行启动不需要手动启动）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service rsyslog start</span><br></pre></td></tr></table></figure><p>在本实验环境中 crontab 也是不被默认启动的，同时不能在后台由 upstart 来管理，所以需要我们来启动它（同样在本实验环境中需要手动启动，自己的本地 Ubuntu 的环境中也不需要手动启动）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cron -f &amp;</span><br></pre></td></tr></table></figure><h2 id="crontab-使用"><a href="#crontab-使用" class="headerlink" title="crontab 使用"></a>crontab 使用</h2><h3 id="添加计划任务"><a href="#添加计划任务" class="headerlink" title="添加计划任务"></a>添加计划任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在文档的最后一排加上这样一排命令,该任务是每分钟我们会在 <code>/home/shiyanlou</code> 目录下创建一个以当前的年月日时分秒为名字的空白文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;1 * * * * touch &#x2F;home&#x2F;shiyanlou&#x2F;$(date +\%Y\%m\%d\%H\%M\%S)</span><br><span class="line"># 注意</span><br><span class="line"># “ % ” 在 crontab 文件中，有结束命令行、换行、重定向的作用</span><br><span class="line"># 前面加 ” \ ” 符号转意，</span><br><span class="line"># 否则，“ % ” 符号将执行其结束命令行或者换行的作用，</span><br><span class="line"># 并且其后的内容会被做为标准输入发送给前面的命令。</span><br></pre></td></tr></table></figure><h3 id="查看添加的任务"><a href="#查看添加的任务" class="headerlink" title="查看添加的任务"></a>查看添加的任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h3 id="察看任务是否启动"><a href="#察看任务是否启动" class="headerlink" title="察看任务是否启动"></a>察看任务是否启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep cron</span><br><span class="line"># or</span><br><span class="line">pgrep cron</span><br></pre></td></tr></table></figure><p>若没有启动，执行上文准备中的第二步</p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tail -f &#x2F;var&#x2F;log&#x2F;syslog</span><br></pre></td></tr></table></figure><h3 id="删除任务"><a href="#删除任务" class="headerlink" title="删除任务"></a>删除任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></table></figure><h2 id="crontab-的深入"><a href="#crontab-的深入" class="headerlink" title="crontab 的深入"></a>crontab 的深入</h2><p>每个用户使用 <code>crontab -e</code>添加计划任务，都会在<code>/var/spool/cron/crontabs</code>中添加一个该用户自己的任务文档，这样目的是为了隔离。</p><p>如果是系统级别的定时任务只需要以 <code>sudo</code> 权限编辑 <code>/etc/crontab</code> 文件就可以。</p><p>cron 服务监测时间最小单位是分钟，所以 cron 会每分钟去读取一次 <code>/etc/crontab</code> 与 <code>/var/spool/cron/crontabs</code> 里面的內容。</p><p>在 <code>/etc</code> 目录下，cron 相关的目录有下面几个:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. &#x2F;etc&#x2F;cron.daily，目录下的脚本会每天执行一次，在每天的6点25分时运行；</span><br><span class="line">2. &#x2F;etc&#x2F;cron.hourly，目录下的脚本会每个小时执行一次，在每小时的17分钟时运行；</span><br><span class="line">3. &#x2F;etc&#x2F;cron.monthly，目录下的脚本会每月执行一次，在每月1号的6点52分时运行；</span><br><span class="line">4. &#x2F;etc&#x2F;cron.weekly，目录下的脚本会每周执行一次，在每周第七天的6点47分时运行；</span><br></pre></td></tr></table></figure><p>系统默认执行时间可以根据需求进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下的帮助命令</title>
      <link href="2017/07/02/Linux%E4%B8%8B%E7%9A%84%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4/"/>
      <url>2017/07/02/Linux%E4%B8%8B%E7%9A%84%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Linux 下的帮助命令</p><h2 id="内建命令与外部命令"><a href="#内建命令与外部命令" class="headerlink" title="内建命令与外部命令"></a>内建命令与外部命令</h2><blockquote><p>内建命令实际上是 shell 程序的一部分，其中包含的是一些比较简单的 Linux 系统命令，这些命令是写在bash源码的builtins里面的，并由 shell 程序识别并在 shell 程序内部完成运行，通常在 Linux 系统加载运行时 shell 就被加载并驻留在系统内存中。而且解析内部命令 shell 不需要创建子进程，因此其执行速度比外部命令快。比如：history、cd、exit 等等。</p><p>外部命令是 Linux 系统中的实用程序部分，因为实用程序的功能通常都比较强大，所以其包含的程序量也会很大，在系统加载时并不随系统一起被加载到内存中，而是在需要时才将其调用内存。虽然其不包含在 shell 中，但是其命令执行过程是由 shell 程序控制的。外部命令是在 Bash 之外额外安装的，通常放在/bin，/usr/bin，/sbin，/usr/sbin等等。比如：ls、vi等。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ type exit</span><br><span class="line">$ type service</span><br><span class="line"></span><br><span class="line">#得到这样的结果说明是内建命令，正如上文所说内建命令都是在 bash 源码中的 builtins 的.def中</span><br><span class="line">xxx is a shell builtin</span><br><span class="line"></span><br><span class="line">#得到这样的结果说明是外部命令，正如上文所说，外部命令在&#x2F;usr&#x2F;bin or &#x2F;usr&#x2F;sbin等等中</span><br><span class="line">xxx is &#x2F;usr&#x2F;sbin&#x2F;xxx</span><br><span class="line"></span><br><span class="line">#若是得到alias的结果，说明该指令为命令别名所设定的名称；</span><br><span class="line">xxx is an alias for xx --xxx</span><br></pre></td></tr></table></figure><h2 id="帮助命令的使用"><a href="#帮助命令的使用" class="headerlink" title="帮助命令的使用"></a>帮助命令的使用</h2><h3 id="help-命令"><a href="#help-命令" class="headerlink" title="help 命令"></a>help 命令</h3><p>help 命令只能用于显示内建命令的帮助信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ help cd</span><br></pre></td></tr></table></figure><p>外部命令基本都有 <code>--help</code> 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls --help</span><br></pre></td></tr></table></figure><h3 id="man-命令"><a href="#man-命令" class="headerlink" title="man 命令"></a>man 命令</h3><p>得到的内容比用 <code>help</code> 更多更详细，而且 <code>man</code> 没有内建与外部命令的区分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man ls</span><br></pre></td></tr></table></figure><h3 id="info-命令"><a href="#info-命令" class="headerlink" title="info 命令"></a>info 命令</h3><p>要是你觉得man显示的信息都还不够，满足不了你的需求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ info ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 文件系统操作与磁盘管理</title>
      <link href="2017/07/02/Linux%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"/>
      <url>2017/07/02/Linux%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Linux 文件系统操作与磁盘管理</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="使用-df-命令查看磁盘的容量"><a href="#使用-df-命令查看磁盘的容量" class="headerlink" title="使用 df 命令查看磁盘的容量"></a>使用 df 命令查看磁盘的容量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ df</span><br><span class="line">$ df -h</span><br></pre></td></tr></table></figure><h3 id="使用-du-命令查看目录的容量"><a href="#使用-du-命令查看目录的容量" class="headerlink" title="使用 du 命令查看目录的容量"></a>使用 du 命令查看目录的容量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 默认同样以 blocks 的大小展示</span><br><span class="line">$ du </span><br><span class="line"># 加上&#96;-h&#96;参数，以更易读的方式展示</span><br><span class="line">$ du -h</span><br><span class="line"># 只查看1级目录的信息</span><br><span class="line">$ du -h -d 0 ~</span><br><span class="line"># 查看2级</span><br><span class="line">$ du -h -d 1 ~</span><br><span class="line"></span><br><span class="line">du -h #同--human-readable 以K，M，G为单位，提高信息的可读性。</span><br><span class="line">du -a #同--all 显示目录中所有文件的大小。</span><br><span class="line">du -s #同--summarize 仅显示总计，只列出最后加总的值。</span><br></pre></td></tr></table></figure><h2 id="简单的磁盘管理"><a href="#简单的磁盘管理" class="headerlink" title="简单的磁盘管理"></a>简单的磁盘管理</h2><h3 id="dd-命令简介"><a href="#dd-命令简介" class="headerlink" title="dd 命令简介"></a>dd 命令简介</h3><p>dd命令从标准输入读入用户输入到标准输出或者一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 输出到文件</span><br><span class="line">$ dd of&#x3D;test bs&#x3D;10 count&#x3D;1 # 或者 dd if&#x3D;&#x2F;dev&#x2F;stdin of&#x3D;test bs&#x3D;10 count&#x3D;1</span><br><span class="line"># 输出到标准输出</span><br><span class="line">$ dd if&#x3D;&#x2F;dev&#x2F;stdin of&#x3D;&#x2F;dev&#x2F;stdout bs&#x3D;10 count&#x3D;1</span><br><span class="line"></span><br><span class="line"># bs（block size）用于指定块大小（缺省单位为 Byte，也可为其指定如&#39;K&#39;，&#39;M&#39;，&#39;G&#39;等单位）.</span><br><span class="line"># count用于指定块数量。</span><br><span class="line"></span><br><span class="line"># 将输出的英文字符转换为大写再写入文件</span><br><span class="line">$ dd if&#x3D;&#x2F;dev&#x2F;stdin of&#x3D;test bs&#x3D;10 count&#x3D;1 conv&#x3D;ucase</span><br></pre></td></tr></table></figure><h3 id="使用-dd-命令创建虚拟镜像文件"><a href="#使用-dd-命令创建虚拟镜像文件" class="headerlink" title="使用 dd 命令创建虚拟镜像文件"></a>使用 dd 命令创建虚拟镜像文件</h3><p>通过上面一小节，你应该掌握了dd的基本使用，下面就来使用dd命令来完成创建虚拟磁盘的第一步。</p><p>从/dev/zero设备创建一个容量为 256M 的空文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;virtual.img bs&#x3D;1M count&#x3D;256</span><br><span class="line">$ du -h virtual.img</span><br></pre></td></tr></table></figure><p>然后我们要将这个文件格式化（写入文件系统），这里我们要学到一个（准确的说是一组）新的命令来完成这个需求。</p><p>使用 mkfs 命令格式化磁盘（我们这里是自己创建的虚拟磁盘镜像）</p><p>你可以在命令行输入 sudo mkfs 然后按下Tab键，你可以看到很多个以 mkfs 为前缀的命令，这些不同的后缀其实就是表示着不同的文件系统，可以用 mkfs 格式化成的文件系统。</p><p>我们可以简单的使用下面的命令来将我们的虚拟磁盘镜像格式化为ext4文件系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkfs.ext4 virtual.img</span><br></pre></td></tr></table></figure><p>可以看到实际 mkfs.ext4 是使用 mke2fs 来完成格式化工作的。mke2fs 的参数很多，不过我们也不会经常格式化磁盘来玩，所以就掌握这基本用法吧，等你有特殊需求时，再查看 man 文档解决。</p><p>如果你想想知道 Linux 支持哪些文件系统你可以输入ls -l /lib/modules/$(uname -r)/kernel/fs（我们的环境中无法查看）查看。</p><h3 id="使用-mount-命令挂载磁盘到目录树"><a href="#使用-mount-命令挂载磁盘到目录树" class="headerlink" title="使用 mount 命令挂载磁盘到目录树"></a>使用 mount 命令挂载磁盘到目录树</h3><p>用户在 Linux/UNIX 的机器上打开一个文件以前，包含该文件的文件系统必须先进行挂载的动作，此时用户要对该文件系统执行 mount 的指令以进行挂载。通常是使用在 USB 或其他可移除存储设备上，而根目录则需要始终保持挂载的状态。又因为 Linux/UNIX 文件系统可以对应一个文件而不一定要是硬件设备，所以可以挂载一个包含文件系统的文件到目录树。</p><p>Linux/UNIX 命令行的 mount 指令是告诉操作系统，对应的文件系统已经准备好，可以使用了，而该文件系统会对应到一个特定的点（称为挂载点）。挂载好的文件、目录、设备以及特殊文件即可提供用户使用。</p><p>我们先来使用mount来查看下主机已经挂载的文件系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount</span><br></pre></td></tr></table></figure><p>输出的结果中每一行表示一个设备或虚拟设备,每一行最前面是设备名，然后是 on 后面是挂载点，type 后面表示文件系统类型，再后面是挂载选项（比如可以在挂载时设定以只读方式挂载等等）。</p><p>那么我们如何挂载真正的磁盘到目录树呢，mount命令的一般格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [options] [source] [directory]</span><br></pre></td></tr></table></figure><p>一些常用操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [-o [操作选项]] [-t 文件系统类型] [-w|--rw|--ro] [文件系统源] [挂载点]</span><br></pre></td></tr></table></figure><p>我们现在直接来挂载我们创建的虚拟磁盘镜像到/mnt目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mount -o loop -t ext4 virtual.img &#x2F;mnt </span><br><span class="line"># 也可以省略挂载类型，很多时候 mount 会自动识别</span><br><span class="line"></span><br><span class="line"># 以只读方式挂载</span><br><span class="line">$ mount -o loop --ro virtual.img &#x2F;mnt</span><br><span class="line"># 或者mount -o loop,ro virtual.img &#x2F;mnt</span><br><span class="line">使用 umount 命令卸载已挂载磁盘</span><br><span class="line"></span><br><span class="line"># 命令格式 sudo umount 已挂载设备名或者挂载点，如：</span><br><span class="line">$ sudo umount &#x2F;mnt</span><br></pre></td></tr></table></figure><p>不过遗憾的是，由于我们环境的问题（环境中使用的 Linux 内核在编译时没有添加对 Loop device的支持），所以你将无法挂载成功：</p><p>另外关于 loop 设备,你可能会有诸多疑问，那么请看下面来自维基百科/dev/loop的说明：</p><p>在类 UNIX 系统中，/dev/loop（或称vnd （vnode disk）、lofi（循环文件接口））是一种伪设备，这种设备使得文件可以如同块设备一般被访问。</p><p>在使用之前，循环设备必须与现存文件系统上的文件相关联。这种关联将提供给用户一个应用程序接口，接口将允许文件视为块特殊文件（参见设备文件系统）使用。因此，如果文件中包含一个完整的文件系统，那么这个文件就能如同磁盘设备一般被挂载。</p><p>这种设备文件经常被用于光盘或是磁盘镜像。通过循环挂载来挂载包含文件系统的文件，便使处在这个文件系统中的文件得以被访问。这些文件将出现在挂载点目录。如果挂载目录中本身有文件，这些文件在挂载后将被禁止使用。<br>使用 fdisk 为磁盘分区（关于分区的一些概念不清楚的用户请参看主引导记录）</p><p>同样因为环境原因中没有物理磁盘，也无法创建虚拟磁盘的原因我们就无法实验练习使用该命令了，下面我将以我的物理主机为例讲解如何为磁盘分区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看硬盘分区表信息</span><br><span class="line">$ sudo fdisk -l</span><br></pre></td></tr></table></figure><p>输出结果中开头显示了我主机上的磁盘的一些信息，包括容量扇区数，扇区大小，I/O 大小等信息。</p><p>我们重点开一下中间的分区信息，/dev/sda1，/dev/sda2 为主分区分别安装了 Windows 和 Linux 操作系统，/dev/sda3 为交换分区（可以理解为虚拟内存），/dev/sda4 为扩展分区其中包含 /dev/sda5，/dev/sda6，/dev/sda7，/dev/sda8 四个逻辑分区，因为主机上有几个分区之间有空隙，没有对齐边界扇区,所以分区之间的不是完全连续的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 进入磁盘分区模式</span><br><span class="line">$ sudo fdisk virtual.img</span><br></pre></td></tr></table></figure><p>在进行操作前我们首先应先规划好我们的分区方案，这里我将在使用 128M（可用 127M 左右）的虚拟磁盘镜像创建一个 30M 的主分区剩余部分为扩展分区包含 2 个大约 45M 的逻辑分区。</p><p>操作完成后输入p查看结果如下:</p><p>最后不要忘记输入w写入分区表。</p><h3 id="使用-losetup-命令建立镜像与回环设备的关联"><a href="#使用-losetup-命令建立镜像与回环设备的关联" class="headerlink" title="使用 losetup 命令建立镜像与回环设备的关联"></a>使用 losetup 命令建立镜像与回环设备的关联</h3><p>同样因为环境原因中没有物理磁盘，也没有 loop device 的原因我们就无法实验练习使用该命令了，下面我将以我的物理主机为例讲解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo losetup &#x2F;dev&#x2F;loop0 virtual.img</span><br><span class="line"># 如果提示设备忙你也可以使用其它的回环设备，&quot;ls &#x2F;dev&#x2F;loop*&quot;参看所有回环设备</span><br><span class="line"></span><br><span class="line"># 解除设备关联</span><br><span class="line">$ sudo losetup -d &#x2F;dev&#x2F;loop0</span><br></pre></td></tr></table></figure><p>然后再使用mkfs格式化各分区（前面我们是格式化整个虚拟磁盘镜像文件或磁盘），不过格式化之前，我们还要为各分区建立虚拟设备的映射，用到kpartx工具，需要先安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install kpartx</span><br><span class="line">$ sudo kpartx -av &#x2F;dev&#x2F;loop0</span><br><span class="line"></span><br><span class="line"># 取消映射</span><br><span class="line">$ sudo kpartx -dv &#x2F;dev&#x2F;loop0</span><br></pre></td></tr></table></figure><p>接着再是格式化，我们将其全部格式化为 ext4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkfs.ext4 -q &#x2F;dev&#x2F;mapper&#x2F;loop0p1</span><br><span class="line">$ sudo mkfs.ext4 -q &#x2F;dev&#x2F;mapper&#x2F;loop0p5</span><br><span class="line">$ sudo mkfs.ext4 -q &#x2F;dev&#x2F;mapper&#x2F;loop0p6</span><br></pre></td></tr></table></figure><p>格式化完成后在/media目录下新建四个空目录用于挂载虚拟磁盘：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p &#x2F;media&#x2F;virtualdisk_&#123;1..3&#125;</span><br><span class="line"># 挂载磁盘分区</span><br><span class="line">$ sudo mount &#x2F;dev&#x2F;mapper&#x2F;loop0p1 &#x2F;media&#x2F;virtualdisk_1</span><br><span class="line">$ sudo mount &#x2F;dev&#x2F;mapper&#x2F;loop0p5 &#x2F;media&#x2F;virtualdisk_2</span><br><span class="line">$ sudo mount &#x2F;dev&#x2F;mapper&#x2F;loop0p6 &#x2F;media&#x2F;virtualdisk_3</span><br><span class="line"></span><br><span class="line"># 卸载磁盘分区</span><br><span class="line">$ sudo umount &#x2F;dev&#x2F;mapper&#x2F;loop0p1</span><br><span class="line">$ sudo umount &#x2F;dev&#x2F;mapper&#x2F;loop0p5</span><br><span class="line">$ sudo umount &#x2F;dev&#x2F;mapper&#x2F;loop0p6</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure><h2 id="找出当前目录下面占用最大的前十个文件"><a href="#找出当前目录下面占用最大的前十个文件" class="headerlink" title="找出当前目录下面占用最大的前十个文件"></a>找出当前目录下面占用最大的前十个文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">du : 计算出单个文件或者文件夹的磁盘空间占用.</span><br><span class="line">sort : 对文件行或者标准输出行记录排序后输出.</span><br><span class="line">head : 输出文件内容的前面部分.</span><br><span class="line"></span><br><span class="line">$ du -a  | sort -n -r | head -n 10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 环境变量与文件查找</title>
      <link href="2017/06/17/Linux%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/"/>
      <url>2017/06/17/Linux%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p>Linux 环境变量设置和文件查找操作</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="创建变量和读取变量的值"><a href="#创建变量和读取变量的值" class="headerlink" title="创建变量和读取变量的值"></a>创建变量和读取变量的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ declare tmp</span><br><span class="line">$ declare tmp</span><br><span class="line">$ echo $tmp</span><br></pre></td></tr></table></figure><h3 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.profile 可以用 ls -a 查看</span><br><span class="line">cd &#x2F;home&#x2F;shiyanlou</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure><p><code>.profile</code> 只对当前用户永久生效。而写在 <code>/etc/profile</code> 里面的是对所有用户永久生效，所以如果想要添加一个永久生效的环境变量，只需要打开 <code>/etc/profile</code>，在最后加上你想添加的环境变量就好啦。</p><h3 id="文件添加可执行权限"><a href="#文件添加可执行权限" class="headerlink" title="文件添加可执行权限"></a>文件添加可执行权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 hello_shell.sh</span><br></pre></td></tr></table></figure><h3 id="gcc-编译"><a href="#gcc-编译" class="headerlink" title="gcc 编译"></a>gcc 编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o hello_world hello_world.c</span><br></pre></td></tr></table></figure><h3 id="添加自定义路径到“-PATH-”环境变量"><a href="#添加自定义路径到“-PATH-”环境变量" class="headerlink" title="添加自定义路径到“ PATH ”环境变量"></a>添加自定义路径到“ PATH ”环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ PATH&#x3D;$PATH:&#x2F;home&#x2F;shiyanlou&#x2F;mybin # 注意这里一定要使用绝对路径。</span><br><span class="line">$ echo &quot;PATH&#x3D;$PATH:&#x2F;home&#x2F;shiyanlou&#x2F;mybin&quot; &gt;&gt; .zshrc # 开机加载自定义环境变量位置</span><br><span class="line">#  &gt;&gt; 表示将标准输出以追加的方式重定向到一个文件中，注意前面用到的 &gt; 是以覆盖的方式重定向到一个文件中。在指定文件不存在的情况下都会创建新的文件。</span><br><span class="line"># 在每个用户的 home 目录中有一个 Shell 每次启动时会默认执行一个配置脚本，以初始化环境，包括添加一些用户自定义环境变量等等。</span><br><span class="line"># zsh 的配置文件是 .zshrc，相应 Bash 的配置文件为 .bashrc 。它们在 etc 下还都有一个或多个全局的配置文件，不过我们一般只修改用户目录下的配置文件。</span><br></pre></td></tr></table></figure><h3 id="修改和删除已有变量"><a href="#修改和删除已有变量" class="headerlink" title="修改和删除已有变量"></a>修改和删除已有变量</h3><p>变量的修改有以下几种方式：</p><table><thead><tr><th>变量设置方式</th><th>说明</th></tr></thead><tbody><tr><td>${变量名#匹配字串}</td><td>从头向后开始匹配，删除符合匹配字串的最短数据</td></tr><tr><td>${变量名##匹配字串}</td><td>从头向后开始匹配，删除符合匹配字串的最长数据</td></tr><tr><td>${变量名%匹配字串}</td><td>从尾向前开始匹配，删除符合匹配字串的最短数据</td></tr><tr><td>${变量名%%匹配字串}</td><td>从尾向前开始匹配，删除符合匹配字串的最长数据</td></tr><tr><td>${变量名/旧的字串/新的字串}</td><td>将符合旧字串的第一个字串替换为新的字串</td></tr><tr><td>${变量名//旧的字串/新的字串}</td><td>将符合旧字串的全部字串替换为新的字串</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ path&#x3D;$PATH</span><br><span class="line">$ echo $path</span><br><span class="line">$ path&#x3D;$&#123;path%&#x2F;home&#x2F;shiyanlou&#x2F;mybin&#125;</span><br><span class="line"># 或使用通配符,*表示任意多个任意字符</span><br><span class="line">$ path&#x3D;$&#123;path%*&#x2F;mybin&#125;</span><br><span class="line"></span><br><span class="line">$ unset temp # 可以使用 unset 命令删除一个环境变量</span><br></pre></td></tr></table></figure><h3 id="让环境变量立即生效"><a href="#让环境变量立即生效" class="headerlink" title="让环境变量立即生效"></a>让环境变量立即生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ source .zshrc</span><br><span class="line"># source 命令还有一个别名就是 .</span><br><span class="line">$ . .&#x2F;.zshrc</span><br></pre></td></tr></table></figure><h2 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h2><p>与搜索相关的命令常用的有 <code>whereis</code>，<code>which</code>，<code>find</code> 和 <code>locate</code> 。</p><h4 id="whereis-简单快速"><a href="#whereis-简单快速" class="headerlink" title="whereis 简单快速"></a><code>whereis</code> 简单快速</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whereis who</span><br></pre></td></tr></table></figure><p>这个搜索很快，因为它并没有从硬盘中依次查找，而是直接从数据库中查询。whereis 只能搜索二进制文件(-b)，man 帮助文件(-m)和源代码文件(-s)。如果想要获得更全面的搜索结果可以使用 locate 命令。</p><h4 id="locate-快而全"><a href="#locate-快而全" class="headerlink" title="locate 快而全"></a><code>locate</code> 快而全</h4><p>通过“ <code>/var/lib/mlocate/mlocate.db</code> ”数据库查找，不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行 <code>updatedb</code> 命令更新一次，所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次 <code>updatedb</code> 命令（在我们的环境中必须先执行一次该命令）。它可以用来查找指定目录下的不同文件类型，如查找 /etc 下所有以 sh 开头的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ locate &#x2F;etc&#x2F;sh</span><br><span class="line"># 注意，它不只是在 &#x2F;etc 目录下查找，还会自动递归子目录进行查找。</span><br><span class="line">查找 &#x2F;usr&#x2F;share&#x2F; 下所有 jpg 文件：</span><br><span class="line"></span><br><span class="line">$ locate &#x2F;usr&#x2F;share&#x2F;\*.jpg</span><br><span class="line"># 注意要添加 * 号前面的反斜杠转义，否则会无法找到。</span><br><span class="line">如果想只统计数目可以加上 -c 参数，-i 参数可以忽略大小写进行查找，whereis 的 -b、-m、-s 同样可以使用。</span><br></pre></td></tr></table></figure><h4 id="which-小而精"><a href="#which-小而精" class="headerlink" title="which 小而精"></a><code>which</code> 小而精</h4><p>which 本身是 Shell 内建的一个命令，我们通常使用 which 来确定是否安装了某个指定的软件，因为它只从 PATH 环境变量指定的路径中去搜索命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ which man</span><br></pre></td></tr></table></figure><h4 id="find-精而细"><a href="#find-精而细" class="headerlink" title="find 精而细"></a><code>find</code> 精而细</h4><p>find 应该是这几个命令中最强大的了，它不但可以通过文件类型、文件名进行查找而且可以根据文件的属性（如文件的时间戳，文件的权限等）进行搜索。</p><p>这条命令表示去 /etc/ 目录下面 ，搜索名字叫做 interfaces 的文件或者目录。这是 find 命令最常见的格式，千万记住 find 的第一个参数是要搜索的地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo find &#x2F;etc&#x2F; -name interfaces</span><br></pre></td></tr></table></figure><p>注意 find 命令的路径是作为第一个参数的， 基本命令格式为 find [path] [option] [action] 。<br>与时间相关的命令参数：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-atime</td><td>最后访问时间</td></tr><tr><td>-ctime</td><td>最后修改文件内容的时间</td></tr><tr><td>-mtime</td><td>最后修改文件属性的时间</td></tr></tbody></table><p>下面以 -mtime 参数举例：</p><ul><li>-mtime n：n 为数字，表示为在 n 天之前的“一天之内”修改过的文件</li><li>-mtime +n：列出在 n 天之前（不包含 n 天本身）被修改过的文件</li><li>-mtime -n：列出在 n 天之内（包含 n 天本身）被修改过的文件</li><li>newer file：file 为一个已存在的文件，列出比 file 还要新的文件名</li></ul><p>列出 home 目录中，当天（24 小时之内）有改动的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find ~ -mtime 0</span><br></pre></td></tr></table></figure><p>列出用户家目录下比 Code 文件夹新的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find ~ -newer &#x2F;home&#x2F;shiyanlou&#x2F;Code</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 用户及文件权限管理</title>
      <link href="2017/06/17/Linux%20%E7%94%A8%E6%88%B7%E5%8F%8A%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>2017/06/17/Linux%20%E7%94%A8%E6%88%B7%E5%8F%8A%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>添加删除用户，添加用户到 sudo 组，修改文件权限。</p><h2 id="Linux-用户管理"><a href="#Linux-用户管理" class="headerlink" title="Linux 用户管理"></a>Linux 用户管理</h2><p>通过第一节课程的学习，你应该已经知道，Linux 是一个可以实现多用户登陆的操作系统，比如“李雷”和“韩梅梅”都可以同时登陆同一台主机，他们共享一些主机的资源，但他们也分别有自己的用户空间，用于存放各自的文件。但实际上他们的文件都是放在同一个物理磁盘上的甚至同一个逻辑分区或者目录里，但是由于 Linux 的 用户管理 和 权限机制，不同用户不可以轻易地查看、修改彼此的文件。</p><p>下面我们就来学习一下 Linux 下的账户管理的基础知识。</p><h3 id="2-1-查看用户"><a href="#2-1-查看用户" class="headerlink" title="2.1 查看用户"></a>2.1 查看用户</h3><p>请打开终端，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ who am i</span><br><span class="line">或者</span><br><span class="line">$ who mom likes</span><br></pre></td></tr></table></figure><p>输出的第一列表示打开当前伪终端的用户的用户名（要查看当前登录用户的用户名，去掉空格直接使用 <code>whoami</code> 即可），第二列的 <code>pts/0</code> 中 <code>pts</code> 表示伪终端，所谓伪是相对于 <code>/dev/tty</code> 设备而言的，还记得上一节讲终端时的那七个使用 <code>[Ctrl]+[Alt]+[F1]～[F7]</code> 进行切换的 <code>/dev/tty</code> 设备么,这是“真终端”，伪终端就是当你在图形用户界面使用 <code>/dev/tty7</code> 时每打开一个终端就会产生一个伪终端， <code>pts/0</code> 后面那个数字就表示打开的伪终端序号，你可以尝试再打开一个终端，然后在里面输入 <code>who am i</code> ，看第二列是不是就变成 <code>pts/1</code> 了，第三列则表示当前伪终端的启动时间。</p><h3 id="who-命令其它常用参数"><a href="#who-命令其它常用参数" class="headerlink" title="who 命令其它常用参数"></a>who 命令其它常用参数</h3><p>参数|说明<br>-a|    打印能打印的全部<br>-d|    打印死掉的进程<br>-m|    同am i,mom likes<br>-q|    打印当前登录用户数及用户名<br>-u|    打印当前登录用户登录信息<br>-r|    打印运行等级</p><h3 id="2-2-创建用户"><a href="#2-2-创建用户" class="headerlink" title="2.2 创建用户"></a>2.2 创建用户</h3><p>在 Linux 系统里， root 账户拥有整个系统至高无上的权利，比如 <code>新建/添加</code> 用户。</p><p><code>root</code> 权限，系统权限的一种，与 <code>SYSTEM</code> 权限可以理解成一个概念，但高于 <code>Administrator</code> 权限，<code>root</code> 是 <code>Linux</code> 和 <code>UNIX</code> 系统中的超级管理员用户帐户，该帐户拥有整个系统至高无上的权力，所有对象他都可以操作，所以很多黑客在入侵系统的时候，都要把权限提升到 <code>root</code> 权限，用 <code>Windows</code> 的方法理解也就是将自己的非法帐户添加到 <code>Administrators</code> 用户组。更比如安卓操作系统中（基于 <code>Linux</code> 内核）获得 <code>root</code> 权限之后就意味着已经获得了手机的最高权限，这时候你可以对手机中的任何文件（包括系统文件）执行所有增、删、改、查的操作。</p><p>我们一般登录系统时都是以普通账户的身份登录的，要创建用户需要 <code>root</code> 权限，这里就要用到 <code>sudo</code> 这个命令了。不过使用这个命令有两个大前提，一是你要知道当前登录用户的密码，二是当前用户必须在 sudo 用户组。shiyanlou 用户也属于 sudo 用户组（稍后会介绍如何查看和添加用户组）。</p><h3 id="su，su-与-sudo"><a href="#su，su-与-sudo" class="headerlink" title="su，su- 与 sudo"></a>su，su- 与 sudo</h3><p><code>su &lt;user&gt;</code> 可以切换到用户 user，执行时需要输入目标用户的密码，<code>sudo &lt;cmd&gt;</code> 可以以特权级别运行 <code>cmd</code> 命令，需要当前用户属于 <code>sudo</code> 组，且需要输入当前用户的密码。<code>su - &lt;user&gt;</code> 命令也是切换用户，同时环境变量也会跟着改变成目标用户的环境变量。</p><p>现在我们新建一个叫 <code>lilei</code> 的用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser lilei</span><br></pre></td></tr></table></figure><p>实验楼的环境目前设置为 <code>shiyanlou</code> 用户执行 <code>sudo</code> 不需要输入密码，通常此处需要按照提示输入 <code>shiyanlou</code> 密码（Linux 下密码输入是不显示任何内容的），<code>shiyanlou</code> 用户密码在左边实验文档最上方。然后是给 <code>lilei</code> 用户设置密码，后面的选项的一些内容你可以选择直接回车使用默认值：</p><p>这个命令不但可以添加用户到系统，同时也会默认为新用户创建 <code>home</code> 目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls &#x2F;home</span><br></pre></td></tr></table></figure><p>现在你已经创建好一个用户，并且你可以使用你创建的用户登录了，使用如下命令切换登录用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su -l lilei</span><br></pre></td></tr></table></figure><p>输入刚刚设置的 lilei 的密码：</p><p>退出当前用户跟退出终端一样可以使用 exit 命令或者使用快捷键 Ctrl+d。</p><h3 id="2-3-用户组"><a href="#2-3-用户组" class="headerlink" title="2.3 用户组"></a>2.3 用户组</h3><p>在 Linux 里面每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源，就跟家的形式差不多，你的兄弟姐妹（不同的用户）属于同一个家（用户组），你们可以共同拥有这个家（共享资源），爸妈对待你们都一样（共享权限），你偶尔写写日记，其他人未经允许不能查看（私有资源和权限）。当然一个用户是可以属于多个用户组的，正如你既属于家庭，又属于学校或公司。</p><p>在 <code>Linux</code> 里面如何知道自己属于哪些用户组呢？</p><p>方法一：使用 groups 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groups shiyanlou</span><br></pre></td></tr></table></figure><p>其中冒号之前表示用户，后面表示该用户所属的用户组。这里可以看到 <code>shiyanlou</code> 用户属于 <code>shiyanlou</code> 用户组，每次新建用户如果不指定用户组的话，默认会自动创建一个与用户名相同的用户组（差不多就相当于家长的意思，或者说是老总）。默认情况下在 <code>sudo</code> 用户组里的可以使用 <code>sudo</code> 命令获得 <code>root</code> 权限。<code>shiyanlou</code> 用户也可以使用 <code>sudo</code> 命令，为什么这里没有显示在 <code>sudo</code> 用户组里呢？可以查看下 <code>/etc/sudoers.d/shiyanlou</code> 文件，我们在 <code>/etc/sudoers.d</code> 目录下创建了这个文件，从而给 <code>shiyanlou</code> 用户赋予了 <code>sudo</code> 权限：</p><p>方法二：查看 <code>/etc/group</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;group | sort</span><br></pre></td></tr></table></figure><p>这里 <code>cat</code> 命令用于读取指定文件的内容并打印到终端输出，后面会详细讲它的使用。 <code>| sort</code> 表示将读取的文本进行一个字典排序再输出，然后你将看到如下一堆输出，你可以在最下面看到 <code>shiyanlou</code> 的用户组信息：</p><p>没找到，没关系，你可以使用命令过滤掉一些你不想看到的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;group | grep -E &quot;shiyanlou&quot;</span><br></pre></td></tr></table></figure><p><code>etc/group</code> 文件格式说明</p><p><code>/etc/group</code> 的内容包括用户组（Group）、用户组口令、GID 及该用户组所包含的用户（User），每个用户组一条记录。格式如下：</p><p><code>group_name:password:GID:user_list</code></p><p>你看到上面的 password 字段为一个 x 并不是说密码就是它，只是表示密码不可见而已。</p><p>将其它用户加入 <code>sudo</code> 用户组</p><p>默认情况下新创建的用户是不具有 <code>root</code> 权限的，也不在 <code>sudo</code> 用户组，可以让其加入 <code>sudo</code> 用户组从而获取 <code>root</code> 权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ su -l lilei</span><br><span class="line">$ sudo ls</span><br></pre></td></tr></table></figure><p>会提示 lilei 不在 <code>sudoers</code> 文件中，意思就是 <code>lilei</code> 不在 sudo 用户组中，至于 <code>sudoers</code> 文件（<code>/etc/sudoers</code>）你现在最好不要动它，操作不慎会导致比较麻烦的后果。</p><p>使用 <code>usermod</code> 命令可以为用户添加用户组，同样使用该命令你必需有 <code>root</code> 权限，你可以直接使用 <code>root</code> 用户为其它用户添加用户组，或者用其它已经在 <code>sudo</code> 用户组的用户使用 <code>sudo</code> 命令获取权限来执行该命令。</p><p>这里我用 <code>shiyanlou</code> 用户执行 <code>sudo</code> 命令将 <code>lilei</code> 添加到 <code>sudo</code> 用户组，让它也可以使用 <code>sudo</code> 命令获得 root 权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ su shiyanlou # 此处需要输入shiyanlou用户密码，可以点击右侧工具栏中的“SSH直连”查看</span><br><span class="line">$ groups lilei</span><br><span class="line">$ sudo usermod -G sudo lilei</span><br><span class="line">$ groups lilei</span><br></pre></td></tr></table></figure><p>然后你再切换回 lilei 用户，现在就可以使用 sudo 获取 root 权限了。</p><h3 id="2-4-删除用户"><a href="#2-4-删除用户" class="headerlink" title="2.4 删除用户"></a>2.4 删除用户</h3><p>删除用户是很简单的事：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo deluser lilei --remove-home</span><br></pre></td></tr></table></figure><h2 id="Linux-文件权限"><a href="#Linux-文件权限" class="headerlink" title="Linux 文件权限"></a>Linux 文件权限</h2><h3 id="3-1-查看文件权限"><a href="#3-1-查看文件权限" class="headerlink" title="3.1 查看文件权限"></a>3.1 查看文件权限</h3><p>我们之前已经很多次用到 ls 命令了，如你所见，我们用它来列出并显示当前目录下的文件，当然这是在不带任何参数的情况下，它能做的当然不止这么多，现在我们就要用它来查看文件权限。</p><p>使用较长格式列出文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br></pre></td></tr></table></figure><ol><li>文件类型</li></ol><p>关于文件类型，这里有一点你必需时刻牢记 <code>Linux</code> 里面一切皆文件，正因为这一点才有了设备文件（ <code>/dev</code> 目录下有各种设备文件，大都跟具体的硬件设备相关）这一说。 socket：网络套接字，具体是什么，感兴趣的用户可以自己去了解或期待实验楼的后续相关课程。pipe 管道，这个东西很重要，我们以后将会讨论到，这里你先知道有它的存在即可。软链接文件：链接文件是分为两种的，另一种当然是“硬链接”（硬链接不常用，具体内容不作为本课程讨论重点，而软链接等同于 Windows 上的快捷方式,你记住这一点就够了）。</p><ol start="2"><li>文件权限</li></ol><p>读权限，表示你可以使用 <code>cat &lt;file name&gt;</code> 之类的命令来读取某个文件的内容；写权限，表示你可以编辑和修改某个文件；</p><p>执行权限，通常指可以运行的二进制程序文件或者脚本文件，如同 <code>Windows</code> 上的 <code>exe</code> 后缀的文件，不过 <code>Linux</code> 上不是通过文件后缀名来区分文件的类型。你需要注意的一点是，一个目录同时具有读权限和执行权限才可以打开并查看内部文件，而一个目录要有写权限才允许在其中创建其它文件，这是因为目录文件实际保存着该目录里面的文件的列表等信息。</p><p>所有者权限，这一点相信你应该明白了，至于所属用户组权限，是指你所在的用户组中的所有其它用户对于该文件的权限，比如，你有一个艾派德，那么这个用户组权限就决定了你的兄弟姐妹有没有权限使用它破坏它和占有它。</p><ol start="3"><li>链接数</li></ol><p>链接到该文件所在的 <code>inode</code> 结点的文件名数目（关于这个概念涉及到 <code>Linux</code> 文件系统的相关概念知识，不在本课程的讨论范围，感兴趣的用户可以自己去了解）。<br>文件大小</p><p>以 inode 结点大小为单位来表示的文件大小，你可以给 ls 加上 -lh 参数来更直观的查看文件的大小。<br>明白了文件权限的一些概念，我们顺带补充一下关于 ls 命令的一些其它常用的用法：</p><p>显示除了 .（当前目录）和 ..（上一级目录）之外的所有文件，包括隐藏文件（Linux 下以 . 开头的文件为隐藏文件）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -A</span><br></pre></td></tr></table></figure><p>当然，你可以同时使用 -A 和 -l 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -Al</span><br></pre></td></tr></table></figure><p>查看某一个目录的完整属性，而不是显示目录里面的文件属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -dl &lt;目录名&gt;</span><br></pre></td></tr></table></figure><p>显示所有文件大小，并以普通人类能看懂的方式呈现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -AsSh</span><br></pre></td></tr></table></figure><p>其中小 s 为显示文件大小，大 S 为按文件大小排序，若需要知道如何按其它方式排序，请使用“man”命令查询。</p><h3 id="3-2-变更文件所有者"><a href="#3-2-变更文件所有者" class="headerlink" title="3.2 变更文件所有者"></a>3.2 变更文件所有者</h3><p>假设目前是 lilei 用户登录，新建一个文件，命名为 “ iphone6 ”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch iphone6</span><br></pre></td></tr></table></figure><p>可见文件所有者是 lilei ：</p><p>现在，换回到 shiyanlou 用户身份，使用以下命令变更文件所有者为 shiyanlou ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;home&#x2F;lilei</span><br><span class="line">$ ls iphone6</span><br><span class="line">$ sudo chown shiyanlou iphone6</span><br></pre></td></tr></table></figure><p>现在查看，发现 文件所有者成功修改为 shiyanlou ：</p><h3 id="3-3-修改文件权限"><a href="#3-3-修改文件权限" class="headerlink" title="3.3 修改文件权限"></a>3.3 修改文件权限</h3><p>如果你有一个自己的文件不想被其他用户读、写、执行，那么就需要对文件的权限做修改，这里有两种方式：</p><p>方式一：二进制数字表示</p><p>每个文件的三组权限（拥有者，所属用户组，其他用户，记住这个顺序是一定的）对应一个 “ <code>rwx</code> “，也就是一个 “ 7 ” ，所以如果我要将文件“ iphone6 ”的权限改为只有我自己可以用那么就这样：</p><p>为了演示，我先在文件里加点内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;echo \&quot;hello shiyanlou\&quot;&quot; &gt; iphone6</span><br></pre></td></tr></table></figure><p>然后修改权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 700 iphone6</span><br></pre></td></tr></table></figure><p>现在，其他用户已经不能读这个“ iphone6 ”文件了：</p><p>方式二：加减赋值操作<br>完成上述相同的效果，你可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod go-rw iphone6</span><br><span class="line"># g、o 还有 u 分别表示 group、others 和 user，+ 和 - 分别表示增加和去掉相应的权限。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 目录结构及文件基本操作</title>
      <link href="2017/06/14/Linux%20%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2017/06/14/Linux%20%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>实验楼《Linux 基础入门》第四节 Linux 目录结构及文件基本操作笔记</p><h2 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h2><p><img src="http://ojq0m9rz9.bkt.clouddn.com/Linux%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="Linux 目录结构"></p><h2 id="Linux-文件基本操作"><a href="#Linux-文件基本操作" class="headerlink" title="Linux 文件基本操作"></a>Linux 文件基本操作</h2><h3 id="新建空白文件"><a href="#新建空白文件" class="headerlink" title="新建空白文件"></a>新建空白文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch test</span><br></pre></td></tr></table></figure><h3 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir mydir</span><br><span class="line">$ mkdir -p father&#x2F;son&#x2F;grandson</span><br></pre></td></tr></table></figure><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp test father&#x2F;son&#x2F;grandson</span><br></pre></td></tr></table></figure><h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -r father family # -r 或者 -R 参数，表示递归复制</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm test</span><br><span class="line">$ rm -f test # -f 参数强制删除</span><br></pre></td></tr></table></figure><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r family # 跟复制目录一样，要删除一个目录，也需要加上 -r 或 -R 参</span><br></pre></td></tr></table></figure><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv file1 Documents # mv 源目录文件 目的目录</span><br></pre></td></tr></table></figure><h3 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv file1 myfile # mv 旧的文件名 新的文件名</span><br></pre></td></tr></table></figure><h3 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用通配符批量创建 5 个文件:</span><br><span class="line">$ touch file&#123;1..5&#125;.txt</span><br><span class="line"></span><br><span class="line"># 批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件:</span><br><span class="line">$ rename &#39;s&#x2F;\.txt&#x2F;\.c&#x2F;&#39; *.txt</span><br><span class="line"></span><br><span class="line"># 批量将这 5 个文件，文件名改为大写:</span><br><span class="line">$ rename &#39;y&#x2F;a-z&#x2F;A-Z&#x2F;&#39; *.c</span><br></pre></td></tr></table></figure><h3 id="使用-cat，tac-和-nl-命令查看文件"><a href="#使用-cat，tac-和-nl-命令查看文件" class="headerlink" title="使用 cat，tac 和 nl 命令查看文件"></a>使用 cat，tac 和 nl 命令查看文件</h3><p>cat 为正序显示，tac 为倒序显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat passwd</span><br><span class="line">$ cat -n passwd # -n 参数显示行号</span><br></pre></td></tr></table></figure><p>nl 命令常用参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-b : 指定添加行号的方式，主要有两种：</span><br><span class="line">    -b a:表示无论是否为空行，同样列出行号(&quot;cat -n&quot;就是这种方式)</span><br><span class="line">    -b t:只列出非空行的编号并列出（默认为这种方式）</span><br><span class="line">-n : 设置行号的样式，主要有三种：</span><br><span class="line">    -n ln:在行号字段最左端显示</span><br><span class="line">    -n rn:在行号字段最右边显示，且不加 0</span><br><span class="line">    -n rz:在行号字段最右边显示，且加 0</span><br><span class="line">-w : 行号字段占用的位数(默认为 6 位)</span><br></pre></td></tr></table></figure><h3 id="使用-more-和-less-命令分页查看文件"><a href="#使用-more-和-less-命令分页查看文件" class="headerlink" title="使用 more 和 less 命令分页查看文件"></a>使用 more 和 less 命令分页查看文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ more passwd</span><br><span class="line"></span><br><span class="line">打开后默认只显示一屏内容，终端底部显示当前阅读的进度。</span><br><span class="line">可以使用 Enter 键向下滚动一行，使用 Space 键向下滚动一屏。</span><br><span class="line">按下 h 显示帮助，q 退出。</span><br></pre></td></tr></table></figure><h3 id="使用-head-和-tail-命令查看文件"><a href="#使用-head-和-tail-命令查看文件" class="headerlink" title="使用 head 和 tail 命令查看文件"></a>使用 head 和 tail 命令查看文件</h3><p>只查看文件的头几行（默认为 10 行，不足 10 行则显示全部）和尾几行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tail &#x2F;etc&#x2F;passwd</span><br><span class="line">$ tail -n 1 &#x2F;etc&#x2F;passwd # -n 参数，后面紧跟行数</span><br></pre></td></tr></table></figure><h3 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ file &#x2F;bin&#x2F;ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 基础入门（新版）（实验楼） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test_2 4.1 逆序输出（10分））</title>
      <link href="2017/05/09/test_2%204.1%20%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA%EF%BC%8810%E5%88%86%EF%BC%89%EF%BC%89/"/>
      <url>2017/05/09/test_2%204.1%20%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA%EF%BC%8810%E5%88%86%EF%BC%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>你的程序会读入一系列的正整数，预先不知道正整数的数量，一旦读到-1，就表示输入结束。然后，按照和输入相反的顺序输出所读到的数字，不包括最后标识结束的-1。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>你的程序会读入一系列的正整数，预先不知道正整数的数量，一旦读到-1，就表示输入结束。然后，按照和输入相反的顺序输出所读到的数字，不包括最后标识结束的-1。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一系列正整数，输入-1表示结束，-1不是输入的数据的一部分。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>按照与输入相反的顺序输出所有的整数，每个整数后面跟一个空格以与后面的整数区分，最后的整数后面也有空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>1 2 3 4 -1</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>4 3 2 1 </p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms  内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># include&lt;stdio.h&gt;</span><br><span class="line"># include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct _node &#123;</span><br><span class="line">int value;</span><br><span class="line">struct _node* before;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">int main () &#123;</span><br><span class="line">Node* head &#x3D; NULL;</span><br><span class="line">Node* a_before &#x3D; NULL;</span><br><span class="line">int number;</span><br><span class="line">do &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;number);</span><br><span class="line">if ( number !&#x3D; -1 ) &#123;</span><br><span class="line">Node* a &#x3D; (Node*)malloc(sizeof(Node));</span><br><span class="line">a-&gt;value &#x3D; number;</span><br><span class="line">a-&gt;before &#x3D; a_before;</span><br><span class="line">a_before &#x3D; a;</span><br><span class="line">&#125;</span><br><span class="line">&#125; while ( number !&#x3D; -1);</span><br><span class="line"></span><br><span class="line">for ( a_before; a_before; a_before&#x3D;a_before-&gt;before ) &#123;</span><br><span class="line">printf(&quot;%d &quot;, a_before-&gt;value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言程序设计进阶（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test_2 1.1 字符串比对（10分）</title>
      <link href="2017/04/27/test_2%201.1%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E5%AF%B9%EF%BC%8810%E5%88%86%EF%BC%89/"/>
      <url>2017/04/27/test_2%201.1%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E5%AF%B9%EF%BC%8810%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>题目说起来很简单，你会读到两个字符串，每个字符串占据一行，每个字符串的长度均小于10000字符，而且第一个字符串的长度小于第二个字符串的。你的程序要找出第一个字符串在第二个字符串中出现的位置，输出这些位置，如果找不到，则输出-1。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>题目说起来很简单，你会读到两个字符串，每个字符串占据一行，每个字符串的长度均小于10000字符，而且第一个字符串的长度小于第二个字符串的。你的程序要找出第一个字符串在第二个字符串中出现的位置，输出这些位置，如果找不到，则输出-1。</p><p>注意，第一个字符的位置是0。</p><p>注意，第一个字符串在第二个字符串中的位置可能不止一处。</p><p>注意，字符串中可能含有空格。</p><p>注意，两个字符串的长度一定大于0。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>两个字符串，一行一个。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>第一个字符串在第二个字符串中出现的位置，按照从小到到的顺序排列，每个数字后面有一个空格。</p><p>如果在第二个字符串中找不到第一个字符串，则输出-1。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>abba</code><br><code>ababbba abbabbabbabbaacc</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>8 11 14 17</code></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms 内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># include&lt;stdio.h&gt;</span><br><span class="line"># include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">char s1[10000];</span><br><span class="line">char s2[10000];</span><br><span class="line">int i &#x3D; 0, j &#x3D; 0, cnt &#x3D; 0;</span><br><span class="line">char *p;</span><br><span class="line">p &#x3D; s2;</span><br><span class="line"></span><br><span class="line">while ( (s1[i++] &#x3D; getchar()) !&#x3D;&#39;\n&#39; ); </span><br><span class="line">while ( (s2[j++] &#x3D; getchar()) !&#x3D;&#39;\n&#39; ); </span><br><span class="line">s1[strlen(s1)-1] &#x3D; &#39;\0&#39;;</span><br><span class="line"></span><br><span class="line">while ( p &#x3D; strstr(p, s1) ) &#123;</span><br><span class="line">printf(&quot;%d &quot;, p - s2);</span><br><span class="line">cnt ++;</span><br><span class="line">p ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( cnt &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">printf(&quot;%d&quot;, -1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言程序设计进阶（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 8.2 GPS数据处理（6分）</title>
      <link href="2017/04/27/test%208.2%20GPS%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%EF%BC%886%E5%88%86%EF%BC%89/"/>
      <url>2017/04/27/test%208.2%20GPS%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%EF%BC%886%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>现在，你的程序要读入一系列GPS输出，其中包含$GPRMC，也包含其他语句。在数据的最后，有一行单独的 <code>END</code> 表示数据的结束。</p><p>你的程序要从中找出$GPRMC语句，计算校验和，找出其中校验正确，并且字段2表示已定位的语句，从中计算出时间，换算成北京时间。一次数据中会包含多条$GPRMC语句，以最后一条语句得到的北京时间作为结果输出。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>NMEA-0183协议是为了在不同的GPS（全球定位系统）导航设备中建立统一的BTCM（海事无线电技术委员会）标准，由美国国家海洋电子协会（NMEA-The National Marine Electronics Associa-tion）制定的一套通讯协议。GPS接收机根据NMEA-0183协议的标准规范，将位置、速度等信息通过串口传送到PC机、PDA等设备。</p><p>NMEA-0183协议是GPS接收机应当遵守的标准协议，也是目前GPS接收机上使用最广泛的协议，大多数常见的GPS接收机、GPS数据处理软件、导航软件都遵守或者至少兼容这个协议。</p><p>NMEA-0183协议定义的语句非常多，但是常用的或者说兼容性最广的语句只有$GPGGA、$GPGSA、$GPGSV、$GPRMC、$GPVTG、$GPGLL等。</p><p>其中$GPRMC语句的格式如下：</p><p><code>$GPRMC,024813.640,A,3158.4608,N,11848.3737,E,10.05,324.27,150706,,,A*50</code></p><p>这里整条语句是一个文本行，行中以逗号“,”隔开各个字段，每个字段的大小（长度）不一，这里的示例只是一种可能，并不能认为字段的大小就如上述例句一样。</p><pre><code>字段0：$GPRMC，语句ID，表明该语句为Recommended Minimum Specific GPS/TRANSIT Data（RMC）推荐最小定位信息字段1：UTC时间，hhmmss.sss格式字段2：状态，A=定位，V=未定位字段3：纬度ddmm.mmmm，度分格式（前导位数不足则补0）字段4：纬度N（北纬）或S（南纬）字段5：经度dddmm.mmmm，度分格式（前导位数不足则补0）字段6：经度E（东经）或W（西经）字段7：速度，节，Knots字段8：方位角，度字段9：UTC日期，DDMMYY格式字段10：磁偏角，（000 - 180）度（前导位数不足则补0）字段11：磁偏角方向，E=东W=西字段16：校验值</code></pre><p>这里，“*”为校验和识别符，其后面的两位数为校验和，代表了“$”和“*”之间所有字符（不包括这两个字符）的异或值的十六进制值。上面这条例句的校验和是十六进制的50，也就是十进制的80。</p><p>提示：^运算符的作用是异或。将$和*之间所有的字符做^运算(第一个字符和第二个字符异或，结果再和第三个字符异或，依此类推)之后的值对65536取余后的结果，应该和*后面的两个十六进制数字的值相等，否则的话说明这条语句在传输中发生了错误。注意这个十六进制值中是会出现A-F的大写字母的。</p><p>现在，你的程序要读入一系列GPS输出，其中包含$GPRMC，也包含其他语句。在数据的最后，有一行单独的 <code>END</code> 表示数据的结束。</p><p>你的程序要从中找出$GPRMC语句，计算校验和，找出其中校验正确，并且字段2表示已定位的语句，从中计算出时间，换算成北京时间。一次数据中会包含多条$GPRMC语句，以最后一条语句得到的北京时间作为结果输出。</p><p>你的程序一定会读到一条有效的$GPRMC语句。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>多条GPS语句，每条均以回车换行结束。最后一行是END三个大写字母。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>6位数时间，表达为：</p><pre><code>`hh:mm:ss`</code></pre><p>其中，hh是两位数的小时，不足两位时前面补0；mm是两位数的分钟，不足两位时前面补0；ss是两位数的秒，不足两位时前面补0。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>$GPRMC,024813.640,A,3158.4608,N,11848.3737,E,10.05,324.27,150706,,,A*50</code><br><code>END</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>10:48:13</code></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms  内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># include&lt;stdio.h&gt;</span><br><span class="line"># include&lt;stdlib.h&gt;</span><br><span class="line"># include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int checkandsavestr(char strings[], char string[]);</span><br><span class="line">int printime(char strings[]);</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">char strings[100], string[100];</span><br><span class="line"></span><br><span class="line">while ( 1 ) &#123;</span><br><span class="line">scanf(&quot;%s&quot;, string);</span><br><span class="line">if ( strstr(string, &quot;END&quot;) ) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">checkandsavestr(strings, string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printime(strings);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int checkandsavestr(char strings[], char string[]) &#123;</span><br><span class="line">char checkcode[10];</span><br><span class="line">char *p;</span><br><span class="line"></span><br><span class="line">if ( strstr(string, &quot;$GPRMC&quot;) &amp;&amp; strstr(string, &quot;,A,&quot;) ) &#123;</span><br><span class="line">char checknum &#x3D; string[1];</span><br><span class="line">for ( int i &#x3D; 2; string[i] !&#x3D; &#39;*&#39;; i++ ) &#123;</span><br><span class="line">checknum ^&#x3D; string[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sprintf(checkcode,&quot;%X&quot;, checknum);</span><br><span class="line">&#x2F;&#x2F;itoa(checknum, checkcode, 16);</span><br><span class="line">p &#x3D; strchr(string, &#39;*&#39;) + 1;</span><br><span class="line">if ( strcmp(checkcode, p) &#x3D;&#x3D; 0 )&#123;</span><br><span class="line">strcpy(strings, string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int printime(char strings[]) &#123;</span><br><span class="line">char tmptime[10];</span><br><span class="line">int hour, minute, second;</span><br><span class="line"></span><br><span class="line">strncpy(tmptime, strings + 7, 2);</span><br><span class="line">hour &#x3D; atoi(tmptime);</span><br><span class="line">hour &#x3D; (hour + 8) % 24;</span><br><span class="line"></span><br><span class="line">strncpy(tmptime, strings + 9, 2);</span><br><span class="line">minute &#x3D; atoi(tmptime);</span><br><span class="line">strncpy(tmptime, strings + 11, 2);</span><br><span class="line">second &#x3D; atoi(tmptime);</span><br><span class="line"></span><br><span class="line">printf(&quot;%02d:%02d:%02d&quot;, hour, minute, second);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 音量调节快捷键设置</title>
      <link href="2017/04/22/win10%20%E9%9F%B3%E9%87%8F%E8%B0%83%E8%8A%82%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE/"/>
      <url>2017/04/22/win10%20%E9%9F%B3%E9%87%8F%E8%B0%83%E8%8A%82%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>小米的悦米机械键盘买回家以后，发现键盘上没有提供音量调节的快捷键。因为早都被笔记本和带音量调节快捷键的键盘惯坏了，每次到任务栏调节音量感觉特别不方便，所以必须手动设置一个。</p><h3 id="导入注册表"><a href="#导入注册表" class="headerlink" title="导入注册表"></a>导入注册表</h3><p>在网上找到了一个导入注册表的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    Windows Registry Editor Version 5.00</span><br><span class="line">          </span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line">&quot;Scancode Map&quot;&#x3D;hex:00,00,00,00,00,00,00,00,03,00,00,00,30,E0,43,00,2E,E0,42,00,00,00,00,00</span><br></pre></td></tr></table></figure><p>新建一个文本文档，将上面这段代码复制进去保存，修改文件后缀名为<code>.reg</code>，双击运行之后重启计算机。键盘上的<code>F8</code>就被替换成音量减，<code>F9</code>被替换成音量加。反正<code>F8</code>和<code>F9</code>基本没怎么用过，换成音量加减多发挥作用也好。</p><h3 id="hex-后的数字的含义"><a href="#hex-后的数字的含义" class="headerlink" title="hex 后的数字的含义"></a>hex 后的数字的含义</h3><h4 id="前-8-个-00"><a href="#前-8-个-00" class="headerlink" title="前 8 个 00"></a>前 8 个 00</h4><p>前8个00是版本号和头部字节.</p><h4 id="03-00-00-00"><a href="#03-00-00-00" class="headerlink" title="03,00,00,00"></a>03,00,00,00</h4><p><code>03</code>表示映射数，<code>02</code>表示 1 组映射，<code>03</code>表示 2 组映射，以此类推。</p><h4 id="30-E0-43-00-和-2E-E0-42-00"><a href="#30-E0-43-00-和-2E-E0-42-00" class="headerlink" title="30,E0,43,00 和 2E,E0,42,00"></a>30,E0,43,00 和 2E,E0,42,00</h4><p>这是两组映射，每组前两个是映射后键位的扫描码，后两个是键位原扫描码。</p><p><code>30,E0</code>表示提高音量（Volume Up），<code>43,00</code>表示F9。</p><p><code>2E,E0</code>表示降低音量（Volume Down），<code>42,00</code>表示F8。</p><p>事实上，Volume Up、Volume Down、F9、F8 的键盘扫描码分别为<code>E0,30</code>、<code>E0,2E</code>、<code>00,43</code>、<code>00,42</code>。这里使用的时候需要将扫描码的高低字节交换一下。</p><p>其他键的扫描码可以自行搜索或者参考文末资料2。</p><h4 id="00-00-00-00-00"><a href="#00-00-00-00-00" class="headerlink" title="00,00,00,00,00"></a>00,00,00,00,00</h4><p>这是个调皮的结尾。</p><h3 id="手动添加注册表项"><a href="#手动添加注册表项" class="headerlink" title="手动添加注册表项"></a>手动添加注册表项</h3><p>本来上面就能解决的，不知道开始出了什么问题，没法导入注册表。但是原理搞清楚了，手动添加注册表就可以了嘛。</p><p>首先打开注册表编辑器（regedit），定位到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout</code>。</p><p>新建一个名为 <code>Scancode Map</code> 的二进制值注册表项。</p><p><img src="http://ojq0m9rz9.bkt.clouddn.com/hexo/image/%E9%9F%B3%E9%87%8F%E5%BF%AB%E6%8D%B7%E9%94%AE1.png"><br><img src="http://ojq0m9rz9.bkt.clouddn.com/hexo/image/%E9%9F%B3%E9%87%8F%E5%BF%AB%E6%8D%B7%E9%94%AE2.png"></p><p>将<code>hex</code>后的值手动输入进去。重启计算机就可以了。</p><p><img src="http://ojq0m9rz9.bkt.clouddn.com/hexo/image/%E9%9F%B3%E9%87%8F%E5%BF%AB%E6%8D%B7%E9%94%AE3.png"></p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>恢复原来的键盘布局只需要将<code>Scancode Map</code>项删除即可。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://www.xiaoboy.com/detail/1341545069.html">windows系统设置调节音量的快捷键</a></li><li><a href="https://wenku.baidu.com/view/7348a96d58fafab069dc025c.html">Scancode Map的妙用,按键随意变换</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 8.1 单词长度（4分））</title>
      <link href="2017/04/17/test%208.1%20%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%EF%BC%884%E5%88%86%EF%BC%89%EF%BC%89/"/>
      <url>2017/04/17/test%208.1%20%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%EF%BC%884%E5%88%86%EF%BC%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>输入在一行中给出一行文本，以‘.’结束，结尾的句号不能计算在最后一个单词的长度内。在一行中输出这行文本对应的单词的长度，每个长度之间以空格隔开，行末没有最后的空格。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>你的程序要读入一行文本，其中以空格分隔为若干个单词，以‘.’结束。你要输出这行文本中每个单词的长度。这里的单词与语言无关，可以包括各种符号，比如“it’s”算一个单词，长度为4。注意，行中可能出现连续的空格。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入在一行中给出一行文本，以‘.’结束，结尾的句号不能计算在最后一个单词的长度内。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>在一行中输出这行文本对应的单词的长度，每个长度之间以空格隔开，行末没有最后的空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>It’s great to see you here.</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>4 5 2 3 3 4</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">char words[100];</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">scanf(&quot;%s&quot;, words);</span><br><span class="line">if ( strrchr(words, &#39;.&#39;)) &#123;</span><br><span class="line">int lencheck &#x3D; strlen(words) - 1;</span><br><span class="line">if ( lencheck &gt; 0 ) &#123;</span><br><span class="line">printf(&quot;%d&quot;, lencheck);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;%d &quot;, strlen(words));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 7.2 鞍点（5分）</title>
      <link href="2017/04/15/test%207.2%20%E9%9E%8D%E7%82%B9%EF%BC%885%E5%88%86%EF%BC%89/"/>
      <url>2017/04/15/test%207.2%20%E9%9E%8D%E7%82%B9%EF%BC%885%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>给定一个n*n矩阵A。矩阵A的鞍点是一个位置（i，j），在该位置上的元素是第i行上的最大数，第j列上的最小数。一个矩阵A也可能没有鞍点。<br>你的任务是找出A的鞍点。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>给定一个n*n矩阵A。矩阵A的鞍点是一个位置（i，j），在该位置上的元素是第i行上的最大数，第j列上的最小数。一个矩阵A也可能没有鞍点。</p><p>你的任务是找出A的鞍点。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第1行是一个正整数<code>n</code>, <code>（1&lt;=n&lt;=100）</code>，然后有n行，每一行有n个整数，同一行上两个整数之间有一个或多个空格。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对输入的矩阵，如果找到鞍点，就输出其下标。下标为两个数字，第一个数字是行号，第二个数字是列号，均从0开始计数。<br>如果找不到，就输出<br><code>NO</code><br>题目所给的数据保证了不会出现多个鞍点。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>4</code><br><code>1 7 4 1 </code><br><code>4 8 3 6 </code><br><code>1 6 1 2 </code><br><code>0 7 8 9</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>2 1</code></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms  内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">const int N &#x3D; 100;</span><br><span class="line">int getcolnum(int A[N][N], int n, int rowsubscript, int columnsubscript);</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int A[N][N];</span><br><span class="line">int n;</span><br><span class="line"></span><br><span class="line">for ( int i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">for (int j &#x3D; 0; j &lt; N; j++) &#123;</span><br><span class="line">A[i][j] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">for (int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">for (int j &#x3D; 0; j &lt; n; j++) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;A[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int rowsubscript, columnsubscript, check;</span><br><span class="line">check &#x3D; 0;</span><br><span class="line">for ( int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">&#x2F;&#x2F;初始化行列号，仅判断一行中的大小。 </span><br><span class="line">rowsubscript &#x3D; i;</span><br><span class="line">columnsubscript &#x3D; 0;</span><br><span class="line">for (int j &#x3D; 0; j &lt; n; j++) &#123;</span><br><span class="line">if ( A[i][j] &gt; A[rowsubscript][columnsubscript]) &#123;</span><br><span class="line">rowsubscript &#x3D; i;</span><br><span class="line">columnsubscript &#x3D; j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (getcolnum(A, n, rowsubscript, columnsubscript)) &#123;</span><br><span class="line">check &#x3D; 1;</span><br><span class="line">break;&#x2F;&#x2F;符合条件立即跳出循环，防止行列号被循环改变 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (check &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">printf(&quot;%d %d&quot;, rowsubscript, columnsubscript);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;NO&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int getcolnum(int A[N][N], int n, int rowsubscript, int columnsubscript) &#123;</span><br><span class="line">int check &#x3D; 1;</span><br><span class="line">for ( int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">if (A[i][columnsubscript] &lt; A[rowsubscript][columnsubscript]) &#123;</span><br><span class="line">check &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return check;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 7.1 多项式加法（5分）</title>
      <link href="2017/04/14/test%207.1%20%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%8A%A0%E6%B3%95%EF%BC%885%E5%88%86%EF%BC%89/"/>
      <url>2017/04/14/test%207.1%20%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%8A%A0%E6%B3%95%EF%BC%885%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>一个多项式可以表达为x的各次幂与系数乘积的和，比如：<code>2x6+3x5+12x3+6x+20</code>。<br>现在，你的程序要读入两个多项式，然后输出这两个多项式的和，也就是把对应的幂上的系数相加然后输出。<br>程序要处理的幂最大为100。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>一个多项式可以表达为x的各次幂与系数乘积的和，比如：<br><code>2x6+3x5+12x3+6x+20</code><br>现在，你的程序要读入两个多项式，然后输出这两个多项式的和，也就是把对应的幂上的系数相加然后输出。</p><p>程序要处理的幂最大为100。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>总共要输入两个多项式，每个多项式的输入格式如下：  </p><p>每行输入两个数字，第一个表示幂次，第二个表示该幂次的系数，所有的系数都是整数。第一行一定是最高幂，最后一行一定是0次幂。</p><p>注意第一行和最后一行之间不一定按照幂次降低顺序排列；如果某个幂次的系数为0，就不出现在输入数据中了；0次幂的系数为0时还是会出现在输入数据中。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>从最高幂开始依次降到0幂，如：<br><code>2x6+3x5+12x3-6x+20</code><br>注意其中的x是小写字母x，而且所有的符号之间都没有空格，如果某个幂的系数为0则不需要有那项。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>6 2</code><br><code>5 3</code><br><code>3 12</code><br><code>1 6</code><br><code>0 20</code><br><code>6 2</code><br><code>5 3</code><br><code>2 12</code><br><code>1 6</code><br><code>0 20</code>  </p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>4x6+6x5+12x3+12x2+12x+40</code></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms  内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">const int N &#x3D; 101;</span><br><span class="line">int A[N];</span><br><span class="line"></span><br><span class="line">for ( int i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">A[i] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int endtag &#x3D; 0;</span><br><span class="line">int n, a;</span><br><span class="line">while ( endtag &lt; 2 ) &#123;</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;n, &amp;a);</span><br><span class="line"></span><br><span class="line">if ( n &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">endtag ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( A[n] !&#x3D; 0 ) &#123;</span><br><span class="line">A[n] +&#x3D; a;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">A[n] &#x3D; a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;判断最大幂 </span><br><span class="line">int maxpower &#x3D; 0;</span><br><span class="line">for ( int i &#x3D; N; i &gt; 0; i-- ) &#123;</span><br><span class="line">if (A[i] !&#x3D; 0 ) &#123;</span><br><span class="line">maxpower &#x3D; i;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;分只有0次幂和有非0次幂两种情况 </span><br><span class="line">if (maxpower &#x3D;&#x3D; 0) &#123;</span><br><span class="line">printf(&quot;%d&quot;, A[0]);&#x2F;&#x2F;如果只有0次幂，直接输出 </span><br><span class="line">&#125; else &#123;</span><br><span class="line">for ( int i &#x3D; maxpower; i &gt; -1; i--) &#123;</span><br><span class="line">&#x2F;&#x2F;非0次幂分幂大于1，幂等于1，幂等于0三种情况，每种情况中又分系数绝对值为1和不为1两种情况。 </span><br><span class="line">if ( i &gt; 1) &#123;</span><br><span class="line">if ( abs(A[i]) &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">printf(&quot;x%d&quot;, i);</span><br><span class="line">&#125; else if ( abs(A[i]) &gt; 1 ) &#123;</span><br><span class="line">printf(&quot;%dx%d&quot;, abs(A[i]), i);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (i &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">if ( abs(A[i]) &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">printf(&quot;x&quot;);</span><br><span class="line">&#125; else if ( abs(A[i]) &gt; 1) &#123;</span><br><span class="line">printf(&quot;%dx&quot;, abs(A[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if ( A[i] !&#x3D; 0 ) &#123;</span><br><span class="line">printf(&quot;%d&quot;, abs(A[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;为方便理解，上面用的全部是绝对值，故需要添加运算符号。通过判断下一个非0系数添加符号。 </span><br><span class="line">if ( i &gt; 0)&#123;</span><br><span class="line">if ( A[i-1] &gt; 0 ) &#123;</span><br><span class="line">printf(&quot;+&quot;);</span><br><span class="line">&#125; else if ( A[i-1] &lt; 0 ) &#123;</span><br><span class="line">printf(&quot;-&quot;);&#x2F;&#x2F;负数可不用绝对值，不额外输出负号，但为代码可读性，符号统一输出。 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 6.2 完数（5分）</title>
      <link href="2017/04/09/test%206.2%20%E5%AE%8C%E6%95%B0%EF%BC%885%E5%88%86%EF%BC%89/"/>
      <url>2017/04/09/test%206.2%20%E5%AE%8C%E6%95%B0%EF%BC%885%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>一个正整数的因子是所有可以整除它的正整数。而一个数如果恰好等于除它本身外的因子之和，这个数就称为完数。例如6=1＋2＋3(6的因子是1,2,3)。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>一个正整数的因子是所有可以整除它的正整数。而一个数如果恰好等于除它本身外的因子之和，这个数就称为完数。例如6=1＋2＋3(6的因子是1,2,3)。</p><p>现在，你要写一个程序，读入两个正整数n和m（<code>1&lt;=n&lt;m&lt;1000</code>），输出[n,m]范围内所有的完数。</p><p>提示：可以写一个函数来判断某个数是否是完数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>两个正整数，以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>其间所有的完数，以空格分隔，最后一个数字后面没有空格。如果没有，则输出一行文字：<br><code>NIL</code><br>（输出NIL三个大写字母加回车）。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>1 10</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>6</code></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms  内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int isPerfect(int n)</span><br><span class="line">&#123;</span><br><span class="line">int isPerfect &#x3D; 0;</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line">if (n &gt; 1)</span><br><span class="line">&#123;</span><br><span class="line">for (int i &#x3D; 1; i &lt; n &#x2F; 2 + 1; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (n % i &#x3D;&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">sum +&#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (n &#x3D;&#x3D; sum)</span><br><span class="line">&#123;</span><br><span class="line">isPerfect &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return isPerfect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">int n, m;</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">int cnt &#x3D; 0;</span><br><span class="line">for (int i &#x3D; n; i &lt;&#x3D; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (isPerfect(i))</span><br><span class="line">&#123;</span><br><span class="line">if (cnt &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;, i);</span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (cnt &#x3D;&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;NIL\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPerfect</span>(<span class="params">n</span>):</span></span><br><span class="line">    numbersum = <span class="number">0</span></span><br><span class="line">    check = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(n / <span class="number">2</span> + <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">                numbersum += i</span><br><span class="line">        <span class="keyword">if</span> n == numbersum:</span><br><span class="line">            check = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> check</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    lst = s.split()</span><br><span class="line">    n = <span class="built_in">int</span>(lst[<span class="number">0</span>])</span><br><span class="line">    m = <span class="built_in">int</span>(lst[<span class="number">1</span>])</span><br><span class="line">    perfect_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isPerfect(i):</span><br><span class="line">            perfect_list.append(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> perfect_list:</span><br><span class="line">        print(<span class="string">&#x27;NIL\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27; &#x27;</span>.join(perfect_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 6.1 分解质因数（5分）</title>
      <link href="2017/04/09/test%206.1%20%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0%EF%BC%885%E5%88%86%EF%BC%89/"/>
      <url>2017/04/09/test%206.1%20%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0%EF%BC%885%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>每个非素数（合数）都可以写成几个素数（也可称为质数）相乘的形式，这几个素数就都叫做这个合数的质因数。比如，6可以被分解为2x3，而24可以被分解为2x2x2x3。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>每个非素数（合数）都可以写成几个素数（也可称为质数）相乘的形式，这几个素数就都叫做这个合数的质因数。比如，6可以被分解为2x3，而24可以被分解为2x2x2x3。</p><p>现在，你的程序要读入一个[2,100000]范围内的整数，然后输出它的质因数分解式；当读到的就是素数时，输出它本身。</p><p>提示：可以用一个函数来判断某数是否是素数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一个整数，范围在[2,100000]内。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>形如：<br><code>n=axbxcxd</code><br>或<br><code>n=n</code><br>所有的符号之间都没有空格，x是小写字母x。abcd这样的数字一定是从小到大排列的。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>18</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>18=2x3x3</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms  内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;寻找并返回最小质因数，没有则返回0 </span><br><span class="line">int isMinPreme(int n)</span><br><span class="line">&#123;</span><br><span class="line">int tmp &#x3D; 0;</span><br><span class="line">for (int MinPreme &#x3D; 2; MinPreme &lt; sqrt(n) + 1; MinPreme++)</span><br><span class="line">&#123;</span><br><span class="line">if (n % MinPreme &#x3D;&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">tmp &#x3D; MinPreme;</span><br><span class="line">break;&#x2F;&#x2F;找到最小质因数立即跳出循环 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;短除法，除以最小质因数并打印，返回商 </span><br><span class="line">int getQuotient(int n)</span><br><span class="line">&#123;</span><br><span class="line">int tmp &#x3D; 0;</span><br><span class="line"></span><br><span class="line">int MinPreme &#x3D; isMinPreme(n);</span><br><span class="line">&#x2F;&#x2F;如果输入已经是2，已进行到最后一步，立即打印。 </span><br><span class="line">if (n &#x3D;&#x3D; 2)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d&quot;, n);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;短除并输出 </span><br><span class="line">else if (MinPreme &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%dx&quot;, MinPreme);</span><br><span class="line">n &#x2F;&#x3D; MinPreme;</span><br><span class="line">tmp &#x3D; n;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 最小质因数为n本身 </span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d&quot;, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n &#x3D; 0;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line"></span><br><span class="line">printf(&quot;%d&#x3D;&quot;, n);</span><br><span class="line">&#x2F;&#x2F; 不断短除获得商，直到n&#x3D;2 </span><br><span class="line">while (n &gt; 1)</span><br><span class="line">&#123;</span><br><span class="line">n &#x3D; getQuotient(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 5.1 高精度小数（10分）</title>
      <link href="2017/03/30/test%205.1%20%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%B0%8F%E6%95%B0%EF%BC%8810%E5%88%86%EF%BC%89/"/>
      <url>2017/03/30/test%205.1%20%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%B0%8F%E6%95%B0%EF%BC%8810%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>请写一个程序，输入一个分数，计算出它的小数形式。无论是否可以除尽，输出最多小数点后200位。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>由于计算机内部表达方式的限制，浮点运算都有精度问题，为了得到高精度的计算结果，就需要自己设计实现方法。</p><p>(0,1)之间的任何浮点数都可以表达为两个正整数的商，为了表达这样两个数的商，可以将相除的结果以多个整数来表示，每个整数表示结果的一位。即商的第一位用一个整数来表示，第二位用另一个整数来表示，以此类推，就可以输出一个高精度的除法结果了。</p><p>如16/19的结果0.8421052631…就可以依次输出8、4、2、1、0、5、2、6、3、1…。</p><p>而除法的过程，则可以模仿人工列竖式做除法的方式，先将被除数乘以10，得到一位商以后，将余数乘以10作为下一轮计算的被除数：</p><pre><code>160/19-&gt;8余880/19-&gt;4余4...</code></pre><p>当某次余数为0时，则表明除尽。</p><p>现在，请写一个程序，输入一个分数，计算出它的小数形式。无论是否可以除尽，输出最多小数点后200位。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>形如 <code>a/b</code> 的两个数，其中10&lt;=a&lt;b&lt;100。也就是说，这个小数一定是小于1的正数。</p><p>提示：输入是带着两个数中间的“/”的，所以scanf应采用“%d/%d”这样的输入格式。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>形如 <code>0.xxxxxxxxx</code>  的小数，小数点后最多200位。输出结束的时候要带着回车换行。如果<code>a/b</code>是一个有限不循环小数，则输出完所有的有效位就可以了，不需要再输出后面的0来凑满200位。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>16/19</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>0.84210526315789473684210526315789473684210526315789473684210526315789473684210526315789473684210526315789473684210526315789473684210526315789473684210526315789473684210526315789473684210526315789473684</code></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms  内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a, b, t;</span><br><span class="line">scanf(&quot;%d&#x2F;%d&quot;, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">int i &#x3D; 0;</span><br><span class="line">printf(&quot;0.&quot;); </span><br><span class="line">while(a !&#x3D; 0 &amp;&amp; i &lt; 200)</span><br><span class="line">&#123;</span><br><span class="line">t &#x3D; a * 10;</span><br><span class="line">printf(&quot;%d&quot;, t &#x2F; b);</span><br><span class="line">a &#x3D; t % b;</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 4.2 念整数（5分）</title>
      <link href="2017/03/30/test%204.2%20%E5%BF%B5%E6%95%B4%E6%95%B0%EF%BC%885%E5%88%86%EF%BC%89/"/>
      <url>2017/03/30/test%204.2%20%E5%BF%B5%E6%95%B4%E6%95%B0%EF%BC%885%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>你的程序要读入一个整数，范围是[-100000,100000]。然后，用汉语拼音将这个整数的每一位输出出来。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>你的程序要读入一个整数，范围是[-100000,100000]。然后，用汉语拼音将这个整数的每一位输出出来。<br>如输入1234，则输出：<br><code>yi er san si</code><br>注意，每个字的拼音之间有一个空格，但是最后的字后面没有空格。当遇到负数时，在输出的开头加上“fu”，如-2341输出为：<br><code>fu er san si yi</code></p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一个整数，范围是[-100000,100000]。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>表示这个整数的每一位数字的汉语拼音，每一位数字的拼音之间以空格分隔，末尾没有空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>-30</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>fu san ling</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms  内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line"> </span><br><span class="line">if (n &lt; 0) &#123;</span><br><span class="line">printf(&quot;fu &quot;);</span><br><span class="line">n &#x3D; -n;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出10^n</span><br><span class="line">int mark &#x3D; 1;</span><br><span class="line">int t &#x3D; n;</span><br><span class="line">while (t &gt; 9)&#123;</span><br><span class="line">t &#x2F;&#x3D; 10;</span><br><span class="line">mark *&#x3D; 10;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;从左往右分解数字 </span><br><span class="line">int digit;</span><br><span class="line">while (mark &gt; 0) &#123;</span><br><span class="line">digit &#x3D; n &#x2F; mark;</span><br><span class="line">n %&#x3D; mark;</span><br><span class="line">mark &#x2F;&#x3D; 10;</span><br><span class="line">&#x2F;&#x2F;输出数字相对应的拼音 </span><br><span class="line">switch (digit) &#123;</span><br><span class="line">case 0:</span><br><span class="line">printf(&quot;ling&quot;);</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">printf(&quot;yi&quot;);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">printf(&quot;er&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">printf(&quot;san&quot;);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">printf(&quot;si&quot;);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">printf(&quot;wu&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">printf(&quot;liu&quot;);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">printf(&quot;qi&quot;);</span><br><span class="line">break;</span><br><span class="line">case 8:</span><br><span class="line">printf(&quot;ba&quot;);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">printf(&quot;jiu&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;当数字不是最后一位时，输出空格 </span><br><span class="line">if (mark &gt; 0) &#123;</span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test 4.1 素数和（5分）</title>
      <link href="2017/03/30/test%204.1%20%E7%B4%A0%E6%95%B0%E5%92%8C%EF%BC%885%E5%88%86%EF%BC%89/"/>
      <url>2017/03/30/test%204.1%20%E7%B4%A0%E6%95%B0%E5%92%8C%EF%BC%885%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>给定两个整数n和m，<code>0&lt;n&lt;=m&lt;=200</code>，你的程序要计算第n个素数到第m个素数之间所有的素数的和，包括第n个素数和第m个素数。</p><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>我们认为2是第一个素数，3是第二个素数，5是第三个素数，依次类推。</p><p>现在，给定两个整数n和m，<code>0&lt;n&lt;=m&lt;=200</code>，你的程序要计算第n个素数到第m个素数之间所有的素数的和，包括第n个素数和第m个素数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>两个整数，第一个表示n，第二个表示m。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数，表示第n个素数到第m个素数之间所有的素数的和，包括第n个素数和第m个素数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>2 4</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>15</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>时间限制：500ms<br>内存限制：32000kb</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">int m;</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">int cnt &#x3D; 1;</span><br><span class="line">int sum &#x3D; 0; </span><br><span class="line">for (int digital &#x3D; 2; cnt &lt; m+1; digital ++) &#123;</span><br><span class="line">int isPrime &#x3D; 1;</span><br><span class="line">for (int i&#x3D;2; i&lt;digital; i++) &#123;</span><br><span class="line">if (digital % i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">isPrime &#x3D; 0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (isPrime) &#123;</span><br><span class="line">if (cnt &gt;&#x3D; n)&#123;</span><br><span class="line">sum +&#x3D; digital;</span><br><span class="line">&#125;</span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d&quot;, sum);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-复杂度2 Maximum Subsequence Sum</title>
      <link href="2017/03/25/01-%E5%A4%8D%E6%9D%82%E5%BA%A62%20Maximum%20Subsequence%20Sum/"/>
      <url>2017/03/25/01-%E5%A4%8D%E6%9D%82%E5%BA%A62%20Maximum%20Subsequence%20Sum/</url>
      
        <content type="html"><![CDATA[<p>Given a sequence of KK integers {N1, N2,…, Nk}. A continuous subsequence is defined to be {Ni, N(i+1),…, Nj} where 1 ≤ i ≤ j ≤ K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.  </p><p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h3><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer KK (\le 10000≤10000). The second line contains KK numbers, separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h3><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices ii and jj (as shown by the sample case). If all the KK numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>10 1 4</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnlineProcessing</span>(<span class="params">lst, n</span>):</span></span><br><span class="line">    ThisSum = MaxSum = <span class="number">0</span></span><br><span class="line">    MinNum = TmpMin = lst[<span class="number">0</span>]</span><br><span class="line">    MaxNum = lst[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        ThisSum += lst[i]</span><br><span class="line">        <span class="comment"># 如果当前和大于历史最大和，赋值给最大和。更新最小数字和最大数字</span></span><br><span class="line">        <span class="keyword">if</span> ThisSum &gt; MaxSum:</span><br><span class="line">            MaxSum = ThisSum</span><br><span class="line">            MinNum = TmpMin</span><br><span class="line">            MaxNum = lst[i]</span><br><span class="line">        <span class="comment"># 如果当前和为负数，抛弃当前和，并将下一个数字作为最小数字备选。之后，如果有当前和大于历史最大和，则将此备选赋值给最小数字。</span></span><br><span class="line">        <span class="keyword">elif</span> ThisSum &lt; <span class="number">0</span>:</span><br><span class="line">            ThisSum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; n - <span class="number">1</span>:   <span class="comment"># 当为最后一个数字时，不需要设最小数字备选，i+1 会超过列表范围。</span></span><br><span class="line">                TmpMin = lst[i + <span class="number">1</span>]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当最大和为0时，要么全为负数，输出第一和最后一个数字；要么由负数和0组成，输出0。</span></span><br><span class="line">    <span class="keyword">if</span> MaxSum == <span class="number">0</span>:</span><br><span class="line">        MinNum = lst[<span class="number">0</span>]</span><br><span class="line">        MaxNum = lst[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> lst:</span><br><span class="line">            MinNum = MaxNum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    print(<span class="built_in">str</span>(MaxSum) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(MinNum) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(MaxNum))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    lst = <span class="built_in">input</span>()</span><br><span class="line">    lst = [<span class="built_in">int</span>(e) <span class="keyword">for</span> e <span class="keyword">in</span> lst.split()]</span><br><span class="line">    OnlineProcessing(lst, n)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">const int N &#x3D; 10000;</span><br><span class="line">int A[N];</span><br><span class="line">int n;</span><br><span class="line">int ThisSum &#x3D; 0, MaxSum &#x3D; 0;</span><br><span class="line">int MinNum, MaxNum, TmpMin;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line"></span><br><span class="line">for ( int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;A[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MinNum &#x3D; TmpMin &#x3D; A[0];</span><br><span class="line">MaxNum &#x3D; A[n-1];</span><br><span class="line">for ( int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">ThisSum +&#x3D; A[i];</span><br><span class="line">if ( ThisSum &gt; MaxSum ) &#123;</span><br><span class="line">MaxSum &#x3D; ThisSum;</span><br><span class="line">MinNum &#x3D; TmpMin;</span><br><span class="line">MaxNum &#x3D; A[i];</span><br><span class="line">&#125; else if ( ThisSum &lt; 0 ) &#123;</span><br><span class="line">ThisSum &#x3D; 0;</span><br><span class="line">if ( i &lt; n - 1) &#123;&#x2F;&#x2F;n-1为最后一个下标 </span><br><span class="line">TmpMin &#x3D; A[i+1];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( MaxSum &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">MinNum &#x3D; A[0];</span><br><span class="line">MaxNum &#x3D; A[n-1];</span><br><span class="line">for ( int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">if ( A[i] &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">MinNum &#x3D; MaxNum &#x3D; 0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d %d %d&quot;, MaxSum, MinNum, MaxNum);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-复杂度1 最大子列和问题</title>
      <link href="2017/03/25/01-%E5%A4%8D%E6%9D%82%E5%BA%A61%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/"/>
      <url>2017/03/25/01-%E5%A4%8D%E6%9D%82%E5%BA%A61%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>给定KK个整数组成的序列 {N1, N2,…, Nk}，“连续子列”被定义 {Ni, N(i+1),…, Nj}，其中 1 ≤ i ≤ j ≤ K。“最大子列和”则被定义为所有连续子列元素的和中最大者。例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13 }有最大的和20。现要求你编写程序，计算给定整数序列的最大子列和。</p><p>本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下：</p><pre><code>数据1：与样例等价，测试基本正确性；数据2：102个随机整数；数据3：103个随机整数；数据4：104个随机整数；数据5：105个随机整数；</code></pre><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入第1行给出正整数KK (\le 100000≤100000)；第2行给出KK个整数，其间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p><code>6</code><br><code>-2 11 -4 13 -5 -2</code></p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p><code>20</code></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><h5 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MaxSubSequenceSum</span>(<span class="params">lst, n</span>):</span></span><br><span class="line">    MaxSum = <span class="number">0</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        ThisSum = <span class="number">0</span></span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> j &lt; n:</span><br><span class="line">            ThisSum += lst[j]</span><br><span class="line">            <span class="keyword">if</span> ThisSum &gt; MaxSum:</span><br><span class="line">                MaxSum = ThisSum</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    print(MaxSum)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    lst = <span class="built_in">input</span>()</span><br><span class="line">    lst = [<span class="built_in">int</span>(e) <span class="keyword">for</span> e <span class="keyword">in</span> lst.split()]</span><br><span class="line">    MaxSubSequenceSum(lst, n)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h5 id="O-nlogn"><a href="#O-nlogn" class="headerlink" title="O(nlogn)"></a>O(nlogn)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DivideAndConquer</span>(<span class="params">lst, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left == right:</span><br><span class="line">        <span class="keyword">if</span> lst[left] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> lst[left]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    center = (left + right) // <span class="number">2</span></span><br><span class="line">    MaxLeftSum = DivideAndConquer(lst, left, center)</span><br><span class="line">    MaxRightSum = DivideAndConquer(lst, center + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">    MaxLeftBorderSum = LeftBorderSum = <span class="number">0</span></span><br><span class="line">    i = center</span><br><span class="line">    <span class="keyword">while</span> i &gt;= left:</span><br><span class="line">        LeftBorderSum += lst[i]</span><br><span class="line">        <span class="keyword">if</span> LeftBorderSum &gt; MaxLeftBorderSum:</span><br><span class="line">            MaxLeftBorderSum = LeftBorderSum</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    MaxRightBorderSum = RightBorderSum = <span class="number">0</span></span><br><span class="line">    i = center + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= right:</span><br><span class="line">        RightBorderSum += lst[i]</span><br><span class="line">        <span class="keyword">if</span> RightBorderSum &gt; MaxRightBorderSum:</span><br><span class="line">            MaxRightBorderSum = RightBorderSum</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>([MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    lst = <span class="built_in">input</span>()</span><br><span class="line">    lst = [<span class="built_in">int</span>(e) <span class="keyword">for</span> e <span class="keyword">in</span> lst.split()]</span><br><span class="line">    print(DivideAndConquer(lst, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h5 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnlineProcessing</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="comment"># list = map(int, list.split()) # map 可遍历，但是不能根据位置取数据。</span></span><br><span class="line">    <span class="built_in">list</span> = [<span class="built_in">int</span>(e) <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">list</span>.split()]</span><br><span class="line">    ThisSum = MaxSum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        ThisSum += e</span><br><span class="line">        <span class="keyword">if</span> ThisSum &gt; MaxSum:</span><br><span class="line">            MaxSum = ThisSum</span><br><span class="line">        <span class="keyword">elif</span> ThisSum &lt; <span class="number">0</span>:</span><br><span class="line">            ThisSum = <span class="number">0</span></span><br><span class="line">    print(MaxSum)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">input</span>()</span><br><span class="line">        OnlineProcessing(<span class="built_in">list</span>)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><h5 id="O-n-1"><a href="#O-n-1" class="headerlink" title="O(n)"></a>O(n)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">const int N &#x3D; 100000;</span><br><span class="line">int n;</span><br><span class="line">int A[N];</span><br><span class="line">int ThisSum &#x3D; 0, MaxSum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;A[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ( int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">ThisSum +&#x3D; A[i];</span><br><span class="line">if ( ThisSum &gt; MaxSum ) &#123;</span><br><span class="line">MaxSum &#x3D; ThisSum;</span><br><span class="line">&#125; else if ( ThisSum &lt; 0 ) &#123;</span><br><span class="line">ThisSum &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;, MaxSum);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#将计算最大子列和打包为一个函数。</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void OnlineProcessing(int A[], int n);</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">const int N &#x3D; 100000;</span><br><span class="line">int n;</span><br><span class="line">int A[N];</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;A[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 注意调用方法（调用用A而不是A[]）</span><br><span class="line">OnlineProcessing(A, n);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void OnlineProcessing(int A[], int n) &#123;</span><br><span class="line">int ThisSum &#x3D; 0, MaxSum &#x3D; 0;</span><br><span class="line">for ( int i &#x3D; 0; i &lt; n; i++ ) &#123;</span><br><span class="line">ThisSum +&#x3D; A[i];</span><br><span class="line">if ( ThisSum &gt; MaxSum ) &#123;</span><br><span class="line">MaxSum &#x3D; ThisSum;</span><br><span class="line">&#125; else if ( ThisSum &lt; 0 ) &#123;</span><br><span class="line">ThisSum &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;, MaxSum);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构（浙江大学 - 陈越） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Next-Mist主题头部顶栏背景图片设置</title>
      <link href="2017/03/23/Hexo-Next%E4%B8%BB%E9%A2%98%E5%A4%B4%E9%83%A8%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE/"/>
      <url>2017/03/23/Hexo-Next%E4%B8%BB%E9%A2%98%E5%A4%B4%E9%83%A8%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Next-Mist 主题最上面一栏的默认背景是灰色的，略微有些淡。想要更换这张图片可按以下步骤操作。</p><h2 id="Hexo-Next-Mist主题头部顶栏背景图片设置"><a href="#Hexo-Next-Mist主题头部顶栏背景图片设置" class="headerlink" title="Hexo-Next-Mist主题头部顶栏背景图片设置"></a>Hexo-Next-Mist主题头部顶栏背景图片设置</h2><p>Next-Mist 主题最上面一栏的默认背景是灰色的，略微有些淡。想要更换这张图片可按以下步骤操作。</p><p>设置好的效果 <a href="https://yeureka.github.io/">Yeureka’s study</a></p><h3 id="图片存放位置"><a href="#图片存放位置" class="headerlink" title="图片存放位置"></a>图片存放位置</h3><p>选择一张心仪的图片），命名为 background.jpg，放到 source 文件夹下的 image 文件夹内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hexo\source\image</span><br></pre></td></tr></table></figure><p>图片大小我选择的是“50厘米*5厘米”，太小的话无法覆盖整个背景。</p><h3 id="背景图片设置"><a href="#背景图片设置" class="headerlink" title="背景图片设置"></a>背景图片设置</h3><p>找到如下位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo\themes\next\source\css\_schemes\Mist\_header.styl</span><br></pre></td></tr></table></figure><p>打开 _header.styl，将第一行 background: 后的内容改为如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header &#123; background: url(&#39;..&#x2F;image&#x2F;background.jpg&#39;); &#125;</span><br></pre></td></tr></table></figure><p>保存，重新生成网页即可。</p><h3 id="以图床上的图片作为背景"><a href="#以图床上的图片作为背景" class="headerlink" title="以图床上的图片作为背景"></a>以图床上的图片作为背景</h3><p>url() 内的链接可以是绝对地址的形式。因为我的静态博客在 github 上面，打开比较慢，所以将背景图片放到图床上以提高打开速度。设置形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header &#123; background: url(&#39;http:&#x2F;&#x2F;xx.xx.xx.com&#x2F;hexo&#x2F;image&#x2F;header-backgroud.jpg&#39;); &#125;</span><br></pre></td></tr></table></figure><p>设置了图床以后，每次打开博客都是图片最先刷出来。囧( ╯□╰ )</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1004 成绩排名 (20)</title>
      <link href="2017/03/20/PAT(Basic%20Level)%201004%20%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%20(20)/"/>
      <url>2017/03/20/PAT(Basic%20Level)%201004%20%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%20(20)/</url>
      
        <content type="html"><![CDATA[<p>读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h2 id="1004-成绩排名-20"><a href="#1004-成绩排名-20" class="headerlink" title="1004 成绩排名 (20)"></a>1004 成绩排名 (20)</h2><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含1个测试用例，格式为</p><pre><code>第1行：正整数n  第2行：第1个学生的姓名 学号 成绩  第3行：第2个学生的姓名 学号 成绩  ... ... ...  第n+1行：第n个学生的姓名 学号 成绩</code></pre><p>其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code>3  Joe Math990112 89  Mike CS991301 100  Mary EE990830 95</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code>Mike CS991301  Joe Math990112</code></pre><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">char name[10];</span><br><span class="line">char student_id[10];</span><br><span class="line">char name_max[10];</span><br><span class="line">char name_min[10];</span><br><span class="line">char student_id_min[10];</span><br><span class="line">char student_id_max[10];</span><br><span class="line">int score;</span><br><span class="line">int score_max;</span><br><span class="line">int score_min;</span><br><span class="line">int n;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">scanf(&quot;%s %s %d&quot;, &amp;name, &amp;student_id, &amp;score);</span><br><span class="line">score_max &#x3D; score_min &#x3D; score;</span><br><span class="line">strcpy(name_max, name);</span><br><span class="line">strcpy(name_min, name);</span><br><span class="line">strcpy(student_id_max, student_id);</span><br><span class="line">strcpy(student_id_min, student_id);</span><br><span class="line"></span><br><span class="line">for (n&#x3D;n; n&gt;1; n--) &#123;</span><br><span class="line">scanf(&quot;%s %s %d&quot;, &amp;name, &amp;student_id, &amp;score);</span><br><span class="line">if (score &gt; score_max) &#123;</span><br><span class="line">score_max &#x3D; score;</span><br><span class="line">strcpy(name_max, name);</span><br><span class="line">strcpy(student_id_max, student_id);</span><br><span class="line">&#125;</span><br><span class="line">if (score &lt; score_min) &#123;</span><br><span class="line">score_min &#x3D; score;</span><br><span class="line">strcpy(name_min, name);</span><br><span class="line">strcpy(student_id_min, student_id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%s %s\n%s %s&quot;, name_max, student_id_max, name_min, student_id_min);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1003 我要通过！(20)</title>
      <link href="2017/03/20/PAT(Basic%20Level)%201003%20%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81(20)/"/>
      <url>2017/03/20/PAT(Basic%20Level)%201003%20%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81(20)/</url>
      
        <content type="html"><![CDATA[<p>“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。</p><h2 id="1003-我要通过！-20"><a href="#1003-我要通过！-20" class="headerlink" title="1003 我要通过！(20)"></a>1003 我要通过！(20)</h2><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。</p><p>得到“答案正确”的条件是：</p><ol><li>字符串中必须仅有P, A, T这三种字符，不可以包含其它字符；</li><li>任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；</li><li>如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。</li></ol><p>现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含1个测试用例。第1行给出一个自然数n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code>8PATPAATAAPATAAAAPAATAAAAxPATxPTWhateverAPAAATAA</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code>YESYESYESYESNONONONO</code></pre><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ul><li>条件1，2是条件3的条件</li><li>由条件3倒推 (a,b,c) 之间的关系<ul><li>因为，<code>aPbTc</code> 成立时 <code>aPbATca</code> 成立;</li><li>所以，PT之间多一个A，则 T 后多一串 a;</li><li>反推，<code>aP(b-n*A)T(c-n*a)</code> 成立;</li><li>最终，<code>b-n*A = A</code>，上式可写为<code>aPAT(c-n*a)</code>;</li><li>根据条件2，式子的形式必须为<code>xPATx</code>;</li><li>故，<code>a = c-n*a</code>,式子的最终形式一定为<code>aPATa</code>;</li><li>再正推，<code>aPATa</code> <code>aPAATaa</code> <code>aPAAATaaa</code>;</li><li>显然，PT之间A的数量和T之后a字符串的数量相等;</li></ul></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断字符串中是否只含有PAT三个字母，且PT有且仅有 1 个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial_check</span>(<span class="params">string</span>):</span></span><br><span class="line">    c_check = <span class="number">1</span></span><br><span class="line">    countp = <span class="number">0</span></span><br><span class="line">    countt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> c != <span class="string">&#x27;P&#x27;</span> <span class="keyword">and</span> c != <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> c != <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">            c_check = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">            countp += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">            countt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> c_check == countp == countt == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># T位于P后面，且满足：T之后A的个数 = PT之间A的个数 * P之前A的个数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">site_check</span>(<span class="params">string</span>):</span></span><br><span class="line">    p = string.find(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">    t = string.find(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">    t_p_site_check = t - p &gt; <span class="number">1</span></span><br><span class="line">    a_check = <span class="built_in">len</span>(string[t+<span class="number">1</span>:]) == <span class="built_in">len</span>(string[p+<span class="number">1</span>:t]) * <span class="built_in">len</span>(string[:p])</span><br><span class="line">    <span class="keyword">if</span> t_p_site_check == a_check == <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">&#x27;YES&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;NO&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先判断PAT个数，再判断格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">if</span> initial_check(string):</span><br><span class="line">        site_check(string)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;NO&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        check(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1002 写出这个数</title>
      <link href="2017/03/20/PAT(Basic%20Level)%201002%20%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/"/>
      <url>2017/03/20/PAT(Basic%20Level)%201002%20%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10^100。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>在一行内输出n的各位数字之和的每一位，拼音数字间有1 空格，但一行中最后一个拼音数字后没有空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>1234567890987654321123456789</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>yi san wu</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串数字分割为单个整型数字列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listnum</span>(<span class="params">num</span>):</span></span><br><span class="line">    digits = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">        digits.append(<span class="built_in">int</span>(num[i]))</span><br><span class="line">    <span class="keyword">return</span> digits</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字分割，求和，数字和分割，匹配拼音，字符串连接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumpinyin</span>(<span class="params">num</span>):</span></span><br><span class="line">    pinyin = &#123;</span><br><span class="line">    <span class="number">0</span> : <span class="string">&#x27;ling&#x27;</span>,</span><br><span class="line">    <span class="number">1</span> : <span class="string">&#x27;yi&#x27;</span>,</span><br><span class="line">    <span class="number">2</span> : <span class="string">&#x27;er&#x27;</span>,</span><br><span class="line">    <span class="number">3</span> : <span class="string">&#x27;san&#x27;</span>,</span><br><span class="line">    <span class="number">4</span> : <span class="string">&#x27;si&#x27;</span>,</span><br><span class="line">    <span class="number">5</span> : <span class="string">&#x27;wu&#x27;</span>,</span><br><span class="line">    <span class="number">6</span> : <span class="string">&#x27;liu&#x27;</span>,</span><br><span class="line">    <span class="number">7</span> : <span class="string">&#x27;qi&#x27;</span>,</span><br><span class="line">    <span class="number">8</span> : <span class="string">&#x27;ba&#x27;</span>,</span><br><span class="line">    <span class="number">9</span> : <span class="string">&#x27;jiu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    digitslist = listnum(num)</span><br><span class="line">    Sum = <span class="built_in">sum</span>(digitslist)</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> listnum(<span class="built_in">str</span>(Sum)):</span><br><span class="line">        <span class="built_in">list</span>.append(pinyin[e])</span><br><span class="line">    print(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>))</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">input</span>()</span><br><span class="line">sumpinyin(num)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test3.2 数字特征值</title>
      <link href="2017/03/20/test3.2%20%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E5%80%BC/"/>
      <url>2017/03/20/test3.2%20%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>对数字求特征值是常用的编码算法，奇偶特征是一种简单的特征值。对于一个整数，从个位开始对每一位数字编号，个位是1号，十位是2号，以此类推。这个整数在第n位上的数字记作x，如果x和n的奇偶性相同，则记下一个1，否则记下一个0。按照整数的顺序把对应位的表示奇偶性的0和1都记录下来，就形成了一个二进制数字。比如，对于342315，这个二进制数字就是001101。</p><h4 id="3-2-数字特征值（5分）"><a href="#3-2-数字特征值（5分）" class="headerlink" title="3.2 数字特征值（5分）"></a>3.2 数字特征值（5分）</h4><p><strong>3.2.1 题目内容：</strong><br>对数字求特征值是常用的编码算法，奇偶特征是一种简单的特征值。对于一个整数，从个位开始对每一位数字编号，个位是1号，十位是2号，以此类推。这个整数在第n位上的数字记作x，如果x和n的奇偶性相同，则记下一个1，否则记下一个0。按照整数的顺序把对应位的表示奇偶性的0和1都记录下来，就形成了一个二进制数字。比如，对于342315，这个二进制数字就是001101。</p><p>这里的计算可以用下面的表格来表示：</p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th><th>g</th></tr></thead><tbody><tr><td>数字</td><td>3</td><td>4</td><td>2</td><td>3</td><td>1</td><td>5</td></tr><tr><td>数位</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td></tr><tr><td>数字</td><td>奇</td><td>偶</td><td>偶</td><td>奇</td><td>奇</td><td>奇</td></tr><tr><td>数位奇偶</td><td>偶</td><td>奇</td><td>偶</td><td>奇</td><td>偶</td><td>奇</td></tr><tr><td>奇偶一致</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>二进制位值</td><td>32</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td></tr></tbody></table><p>你的程序要读入一个非负整数，整数的范围是[0,1000000]，然后按照上述算法计算出表示奇偶性的那个二进制数字，输出它对应的十进制值。</p><p><strong>3.2.2 提示：</strong><br>将整数从右向左分解，数位每次加1，而二进制值每次乘2。</p><p><strong>3.2.3 输入格式:</strong><br>一个非负整数，整数的范围是[0,1000000]。</p><p><strong>3.2.4 输出格式：</strong><br>一个整数，表示计算结果。</p><p><strong>3.2.5 输入样例：</strong><br>342315</p><p><strong>3.2.6 输出样例：</strong><br>13</p><p><strong>3.2.7 时间限制：</strong> 500ms <strong>内存限制：</strong> 2000kb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int num;</span><br><span class="line">int digit;</span><br><span class="line">int judgement_value;</span><br><span class="line">int position &#x3D; 1;</span><br><span class="line">int bit_value &#x3D; 1;</span><br><span class="line">int feature_value &#x3D; 0;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">digit &#x3D; num % 10;</span><br><span class="line">num &#x2F;&#x3D; 10;</span><br><span class="line">if (digit % 2 &#x3D;&#x3D; position % 2) &#123;</span><br><span class="line">judgement_value &#x3D; 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">judgement_value &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">feature_value +&#x3D; judgement_value * bit_value;</span><br><span class="line">position ++;</span><br><span class="line">bit_value *&#x3D; 2;</span><br><span class="line">&#125; while (num &gt; 0);</span><br><span class="line"></span><br><span class="line">printf(&quot;%d&quot;, feature_value);</span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT(Basic Level) 1001 害死人不偿命的(3n+1)猜想</title>
      <link href="2017/03/20/PAT(Basic%20Level)%201001%20%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84(3n+1)%E7%8C%9C%E6%83%B3/"/>
      <url>2017/03/20/PAT(Basic%20Level)%201001%20%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84(3n+1)%E7%8C%9C%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。</p><table><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>时间限制</td><td>400 ms</td></tr><tr><td>内存限制</td><td>65536 kB</td></tr><tr><td>代码长度限制</td><td>8000 B</td></tr><tr><td>判题程序</td><td>Standard</td></tr><tr><td>作者</td><td>CHEN, Yue</td></tr></tbody></table><h3 id="卡拉兹-Callatz-猜想："><a href="#卡拉兹-Callatz-猜想：" class="headerlink" title="卡拉兹(Callatz)猜想："></a>卡拉兹(Callatz)猜想：</h3><p>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每个测试输入包含1个测试用例，即给出自然数n的值。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出从n计算到1需要的步数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>3</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>5</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        n = n / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n = (<span class="number">3</span> * n + <span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT (Basic Level) Practise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test3.1 奇偶个数</title>
      <link href="2017/03/20/test3.1%20%E5%A5%87%E5%81%B6%E4%B8%AA%E6%95%B0/"/>
      <url>2017/03/20/test3.1%20%E5%A5%87%E5%81%B6%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>你的程序要读入一系列正整数数据，输入-1表示输入结束，-1本身不是输入的数据。程序输出读到的数据中的奇数和偶数的个数。 </p><h4 id="3-1-奇偶个数（5分）"><a href="#3-1-奇偶个数（5分）" class="headerlink" title="3.1 奇偶个数（5分）"></a>3.1 奇偶个数（5分）</h4><p><strong>3.1.1 题目内容：</strong><br>你的程序要读入一系列正整数数据，输入-1表示输入结束，-1本身不是输入的数据。程序输出读到的数据中的奇数和偶数的个数。</p><p><strong>3.2.2 输入格式:</strong><br>一系列正整数，整数的范围是（0,100000）。如果输入-1则表示输入结束。</p><p><strong>3.2.3 输出格式：</strong><br>两个整数，第一个整数表示读入数据中的奇数的个数，第二个整数表示读入数据中的偶数的个数。两个整数之间以空格分隔。</p><p><strong>3.2.4 输入样例：</strong><br>9 3 4 2 5 7 －1 </p><p><strong>3.2.5 输出样例：</strong><br>4 2</p><p><strong>3.2.6 时间限制：</strong> 500ms <strong>内存限制：</strong> 32000kb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># C语言实现</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int num;</span><br><span class="line">int evencount;</span><br><span class="line">int oddcount;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line">while (num !&#x3D; -1) &#123;</span><br><span class="line">if (num % 2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">evencount ++;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">oddcount ++;</span><br><span class="line">&#125;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d %d&quot;, oddcount, evencount);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2.2 信号报告</title>
      <link href="2017/03/19/test2.2%20%E4%BF%A1%E5%8F%B7%E6%8A%A5%E5%91%8A/"/>
      <url>2017/03/19/test2.2%20%E4%BF%A1%E5%8F%B7%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>现在，你的程序要读入一个信号报告的数字，然后输出对应的含义。如读到59，则输出：Extremely strong signals, perfectly readable.</p><h4 id="2-2-信号报告（5分）"><a href="#2-2-信号报告（5分）" class="headerlink" title="2.2 信号报告（5分）"></a>2.2 信号报告（5分）</h4><p><strong>2.2.1 题目内容：</strong>  </p><ul><li><p>无线电台的RS制信号报告是由三两个部分组成的：</p><ul><li>R(Readability) 信号可辨度即清晰度.</li><li>S(Strength)    信号强度即大小.</li></ul></li><li><p>其中R位于报告第一位，共分5级，用1—5数字表示.</p><ol><li>Unreadable</li><li>Barely readable, occasional words distinguishable</li><li>Readable with considerable difficulty</li><li>Readable with practically no difficulty</li><li>Perfectly readable</li></ol></li><li><p>报告第二位是S，共分九个级别，用1—9中的一位数字表示</p><ol><li>Faint signals, barely perceptible</li><li>Very weak signals</li><li>Weak signals</li><li>Fair signals</li><li>Fairly good signals</li><li>Good signals</li><li>Moderately strong signals</li><li>Strong signals</li><li>Extremely strong signals</li></ol></li></ul><p>现在，你的程序要读入一个信号报告的数字，然后输出对应的含义。如读到59，则输出：Extremely strong signals, perfectly readable.</p><p><strong>3.2.2 输入格式:</strong><br>一个整数，信号报告。整数的十位部分表示可辨度，个位部分表示强度。输入的整数范围是[11,59]中的个位不为0的数字，这个范围外的数字不可能出现在测试数据中。</p><p><strong>3.2.3 输出格式：</strong><br>一句话，表示这个信号报告的意义。按照题目中的文字，先输出表示强度的文字，跟上逗号和空格，然后是表示可辨度的文字，跟上句号。注意可辨度的句子的第一个字母是小写的。注意这里的标点符号都是英文的。</p><p><strong>3.2.4 输入样例：</strong><br>33</p><p><strong>3.2.5 输出样例：</strong><br>Weak signals, readable with considerable difficulty.</p><p><strong>3.2.6 时间限制：</strong> 500ms <strong>内存限制：</strong> 32000kb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 实现</span></span><br><span class="line">Rdict = &#123;</span><br><span class="line">          <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;unreadable&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;barely readable, occasional words distinguishable&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;readable with considerable difficulty&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;readable with practically no difficulty&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;perfectly readable&#x27;</span>     </span><br><span class="line">        &#125;</span><br><span class="line">Sdict = &#123;</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;Faint signals, barely perceptible&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;Very weak signals&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;Weak signals&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;Fair signals&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;Fairly good signals&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;Good signals&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;Moderately strong signals&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;Strong signals&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;Extremely strong signals&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">RS = <span class="built_in">input</span>()</span><br><span class="line">R_Code = RS[<span class="number">0</span>]</span><br><span class="line">S_Code = RS[<span class="number">1</span>]</span><br><span class="line">Readability = Rdict[R_Code]</span><br><span class="line">Strength = Sdict[S_Code]</span><br><span class="line"></span><br><span class="line">print(Strength + <span class="string">&#x27;, &#x27;</span> + Readability + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int R;</span><br><span class="line">int S;</span><br><span class="line">int RS;</span><br><span class="line"></span><br><span class="line">char R1[] &#x3D; &quot;unreadable&quot;;</span><br><span class="line">char R2[] &#x3D; &quot;barely readable, occasional words distinguishable&quot;;</span><br><span class="line">char R3[] &#x3D; &quot;readable with considerable difficulty&quot;;</span><br><span class="line">char R4[] &#x3D; &quot;readable with practically no difficulty&quot;;</span><br><span class="line">char R5[] &#x3D; &quot;perfectly readable&quot;;</span><br><span class="line"></span><br><span class="line">char S1[] &#x3D; &quot;Faint signals, barely perceptible&quot;;</span><br><span class="line">char S2[] &#x3D; &quot;Very weak signals&quot;;</span><br><span class="line">char S3[] &#x3D; &quot;Weak signals&quot;;</span><br><span class="line">char S4[] &#x3D; &quot;Fair signals&quot;;</span><br><span class="line">char S5[] &#x3D; &quot;Fairly good signals&quot;;</span><br><span class="line">char S6[] &#x3D; &quot;Good signals&quot;;</span><br><span class="line">char S7[] &#x3D; &quot;Moderately strong signals&quot;;</span><br><span class="line">char S8[] &#x3D; &quot;Strong signals&quot;;</span><br><span class="line">char S9[] &#x3D; &quot;Extremely strong signals&quot;;</span><br><span class="line"></span><br><span class="line">char sR[100];</span><br><span class="line">char sS[100];</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;,&amp;RS);</span><br><span class="line"></span><br><span class="line">R &#x3D; RS &#x2F; 10;</span><br><span class="line">S &#x3D; RS % 10;</span><br><span class="line"></span><br><span class="line">switch (R) &#123;</span><br><span class="line">case 1:</span><br><span class="line">strcpy(sR, R1);</span><br><span class="line">switch (S) &#123;</span><br><span class="line">case 1:</span><br><span class="line">strcpy(sS, S1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">strcpy(sS, S2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">strcpy(sS, S3);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">strcpy(sS, S4);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">strcpy(sS, S5);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">strcpy(sS, S6);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">strcpy(sS, S7);</span><br><span class="line">break;</span><br><span class="line">case 8:</span><br><span class="line">strcpy(sS, S8);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">strcpy(sS, S9);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">strcpy(sR, R2);</span><br><span class="line">switch (S) &#123;</span><br><span class="line">case 1:</span><br><span class="line">strcpy(sS, S1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">strcpy(sS, S2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">strcpy(sS, S3);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">strcpy(sS, S4);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">strcpy(sS, S5);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">strcpy(sS, S6);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">strcpy(sS, S7);</span><br><span class="line">break;</span><br><span class="line">case 8:</span><br><span class="line">strcpy(sS, S8);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">strcpy(sS, S9);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">strcpy(sR, R3);</span><br><span class="line">switch (S) &#123;</span><br><span class="line">case 1:</span><br><span class="line">strcpy(sS, S1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">strcpy(sS, S2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">strcpy(sS, S3);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">strcpy(sS, S4);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">strcpy(sS, S5);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">strcpy(sS, S6);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">strcpy(sS, S7);</span><br><span class="line">break;</span><br><span class="line">case 8:</span><br><span class="line">strcpy(sS, S8);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">strcpy(sS, S9);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">strcpy(sR, R4);</span><br><span class="line">switch (S) &#123;</span><br><span class="line">case 1:</span><br><span class="line">strcpy(sS, S1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">strcpy(sS, S2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">strcpy(sS, S3);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">strcpy(sS, S4);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">strcpy(sS, S5);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">strcpy(sS, S6);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">strcpy(sS, S7);</span><br><span class="line">break;</span><br><span class="line">case 8:</span><br><span class="line">strcpy(sS, S8);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">strcpy(sS, S9);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">strcpy(sR, R5);</span><br><span class="line">switch (S) &#123;</span><br><span class="line">case 1:</span><br><span class="line">strcpy(sS, S1);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">strcpy(sS, S2);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">strcpy(sS, S3);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">strcpy(sS, S4);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">strcpy(sS, S5);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">strcpy(sS, S6);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">strcpy(sS, S7);</span><br><span class="line">break;</span><br><span class="line">case 8:</span><br><span class="line">strcpy(sS, S8);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">strcpy(sS, S9);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%s, %s.&quot;, sS, sR);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2.1 时间换算</title>
      <link href="2017/03/19/test2.1%20%E6%97%B6%E9%97%B4%E6%8D%A2%E7%AE%97/"/>
      <url>2017/03/19/test2.1%20%E6%97%B6%E9%97%B4%E6%8D%A2%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>UTC是世界协调时，BJT是北京时间，UTC时间相当于BJT减去8。现在，你的程序要读入BJT输出UTC。</p><h4 id="2-1-时间换算（5分）"><a href="#2-1-时间换算（5分）" class="headerlink" title="2.1 时间换算（5分）"></a>2.1 时间换算（5分）</h4><ul><li><p>题目内容：</p></li><li><p>UTC是世界协调时，BJT是北京时间，UTC时间相当于BJT减去8。现在，你的程序要读入一个整数，表示BJT的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果小时不是0而分小于10分，需要保留十位上的0；如果小时是0而分小于10分的，则不需要保留十位上的0。如1124表示11点24分，而905表示9点5分，36表示0点36分，7表示0点7分。</p></li><li><p>有效的输入范围是0到2359，即你的程序不可能从测试服务器读到0到2359以外的输入数据。</p></li><li><p>你的程序要输出这个时间对应的UTC时间，输出的格式和输入的相同，即输出一个整数，表示UTC的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果小时不是0而分小于10分，需要保留十位上的0；如果小时是0而分小于10分的，则不需要保留十位上的0。</p></li><li><p>提醒：要小心跨日的换算。</p></li><li><p>输入格式: 一个整数，表示BJT的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果小时不是0而分小于10分，需要保留十位上的0；如果小时是0而分小于10分的，则不需要保留十位上的0。</p></li><li><p>输出格式：一个整数，表示UTC的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果小时不是0而分小于10分，需要保留十位上的0；如果小时是0而分小于10分的，则不需要保留十位上的0。</p></li><li><p>输入样例：803</p></li><li><p>输出样例：3</p></li><li><p>时间限制：500ms内存限制：32000kb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int BJT;</span><br><span class="line">int UTC;</span><br><span class="line">int UTChour;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;BJT);</span><br><span class="line">int BJThour &#x3D; BJT &#x2F; 100;</span><br><span class="line">int BJTminute &#x3D; BJT % 100;</span><br><span class="line"></span><br><span class="line">if (BJThour &gt;&#x3D; 8) &#123;</span><br><span class="line">UTChour &#x3D; BJThour - 8;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">UTChour &#x3D; BJThour + 16;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UTC &#x3D; UTChour * 100 + BJTminute;</span><br><span class="line">printf(&quot;%d&quot;, UTC);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1.1 逆序的三位数</title>
      <link href="2017/03/19/test1.1%20%E9%80%86%E5%BA%8F%E7%9A%84%E4%B8%89%E4%BD%8D%E6%95%B0/"/>
      <url>2017/03/19/test1.1%20%E9%80%86%E5%BA%8F%E7%9A%84%E4%B8%89%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>程序每次读入一个正三位数，然后输出逆序的数字。注意，当输入的数字含有结尾的0时，输出不应带有前导的0。比如输入700，输出应该是7。</p><h4 id="1-1-逆序的三位数（5分）"><a href="#1-1-逆序的三位数（5分）" class="headerlink" title="1.1 逆序的三位数（5分）"></a>1.1 逆序的三位数（5分）</h4><ul><li><p>题目内容：逆序的三位数：</p></li><li><p>程序每次读入一个正三位数，然后输出逆序的数字。注意，当输入的数字含有结尾的0时，输出不应带有前导的0。比如输入700，输出应该是7。</p></li><li><p>提示：用%10可以得到个位数，用/100可以得到百位数…。将这样得到的三个数字合起来：百位*100+十位*10+个位，就得到了结果。</p></li><li><p>输入格式:每个测试是一个3位的正整数。</p></li><li><p>输出格式：输出逆序的数。</p></li><li><p>输入样例：123</p></li><li><p>输出样例：321</p></li><li><p>时间限制：500ms内存限制：32000kb</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int num;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line"></span><br><span class="line">int Digits &#x3D; num % 10;</span><br><span class="line">int Ten_Digits &#x3D; (num &#x2F; 10) % 10;</span><br><span class="line">int Hundred_Digits &#x3D; num &#x2F; 100;</span><br><span class="line">int Converted_numbers &#x3D; Digits * 100 + Ten_Digits * 10 + Hundred_Digits;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d&quot;, Converted_numbers);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 实现</span></span><br><span class="line">num = <span class="built_in">input</span>()</span><br><span class="line"><span class="comment"># 字符串反序并输出为整数</span></span><br><span class="line">print(<span class="built_in">int</span>(num[::-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计入门——C语言（浙江大学 - 翁恺） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World —— 搭建 Hexo 博客手记</title>
      <link href="2017/01/13/hello-world/"/>
      <url>2017/01/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>2017 年，新的一年又开始了，作为一个业余爱好者，折腾这个博客只是为了好玩，那么就将这篇博文作为对自己新年的祝福吧！</p><p>搭建博客的时候遇到了很多问题，当我开始写这篇文章的时候，博客还没有搭建好。所以，我决定将搭建过程中使用到的参考资料记录下来，算是一种梳理思路吧。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h3><blockquote><ul><li><a href="http://woodenrobot.me/2016/02/27/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/#more">Hexo 搭建个人博客</a></li><li><a href="https://hexo.io/zh-cn/docs/">Hexo 中文文档</a></li><li><a href="http://theme-next.iissnan.com/">Next 文档</a></li><li><a href="http://lovenight.github.io/2015/11/10/Hexo-3-1-1-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/">Hexo-3-1-1-静态博客搭建指南</a></li></ul></blockquote><p>前期以第一篇参考资料为主搭建了大概的框架，但是遇到了很多问题，迫不得已又参阅了文档。后期主要将会从第四篇资料出发进行一些美化工作。</p><p>最后祝自己 2017 年过的越来越好吧！</p><p>—— yeureka 于 2017 年 1 月 13 日</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="link/index.html"/>
      <url>link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
